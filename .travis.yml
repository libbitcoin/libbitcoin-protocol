# Bitprim-protocol
#
# Copyright (c) 2016 Bitprim developers (see AUTHORS)
# Distributed under the Boost Software License, Version 1.0. (See accompanying
# file LICENSE_1_0.txt or copy at http://www.boost.org/LICENSE_1_0.txt)

language: cpp
# sudo: false
# sudo: required
# dist: trusty
git:
  submodules: false
  
matrix:
  include:

    # Linux clang-3.6 Debug
    - env: CLANG_VERSION=3.6 CXX_FLAGS="-std=c++11" BUILD_TYPE=Debug
      os: linux
      sudo: required
      dist: trusty
      cache:
        ccache: true
        timeout: 1000
        directories:
          - $HOME/boost
          - $HOME/protobuf
          - $HOME/zeromq
      addons: &clang36
        apt:
          packages:
            - clang-3.6
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.6

    # Linux clang-3.6 Release
    - env: CLANG_VERSION=3.6 CXX_FLAGS="-std=c++11" BUILD_TYPE=Release
      os: linux
      sudo: required
      dist: trusty
      cache:
        ccache: true
        timeout: 1000
        directories:
          - $HOME/boost
          - $HOME/protobuf
          - $HOME/zeromq
      addons: &clang36
        apt:
          packages:
            - clang-3.6
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.6

    # Linux clang-3.7 Debug
    - env: CLANG_VERSION=3.7 CXX_FLAGS="-std=c++11" BUILD_TYPE=Debug
      os: linux
      sudo: required
      dist: trusty
      cache:
        ccache: true
        timeout: 1000
        directories:
          - $HOME/boost
          - $HOME/protobuf
          - $HOME/zeromq
      addons: &clang37
        apt:
          packages:
            - clang-3.7
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.7

    # Linux clang-3.7 Release
    - env: CLANG_VERSION=3.7 CXX_FLAGS="-std=c++11" BUILD_TYPE=Release
      os: linux
      sudo: required
      dist: trusty
      cache:
        ccache: true
        timeout: 1000
        directories:
          - $HOME/boost
          - $HOME/protobuf
          - $HOME/zeromq
      addons: &clang37
        apt:
          packages:
            - clang-3.7
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.7

    # Linux clang-3.8 Debug
    - env: CLANG_VERSION=3.8 CXX_FLAGS="-std=c++11" BUILD_TYPE=Debug
      os: linux
      sudo: required
      dist: trusty
      cache:
        ccache: true
        timeout: 1000
        directories:
          - $HOME/boost
          - $HOME/protobuf
          - $HOME/zeromq
      addons: &clang38
        apt:
          packages:
            - clang-3.8
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.8

    # Linux clang-3.8 Release
    - env: CLANG_VERSION=3.8 CXX_FLAGS="-std=c++11" BUILD_TYPE=Release
      os: linux
      sudo: required
      dist: trusty
      cache:
        ccache: true
        timeout: 1000
        directories:
          - $HOME/boost
          - $HOME/protobuf
          - $HOME/zeromq
        apt:
          packages:
            - clang-3.8
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.8

    # gcc-4.9 Debug
    - env: GCC_VERSION=4.9 CXX_FLAGS="-std=c++11" BUILD_TYPE=Debug
      os: linux
      sudo: required
      dist: trusty
      cache:
        ccache: true
        timeout: 1000
        directories:
          - $HOME/boost
          - $HOME/protobuf
          - $HOME/zeromq
      addons: &gcc49
        apt:
          packages:
            - g++-4.9
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.6

    # gcc-4.9 Release
    - env: GCC_VERSION=4.9 CXX_FLAGS="-std=c++11" BUILD_TYPE=Release
      os: linux
      sudo: required
      dist: trusty
      cache:
        ccache: true
        timeout: 1000
        directories:
          - $HOME/boost
          - $HOME/protobuf
          - $HOME/zeromq
      addons: &gcc49
        apt:
          packages:
            - g++-4.9
          sources:
            - ubuntu-toolchain-r-test
            - llvm-toolchain-precise-3.6
            
    # gcc-5
    - env: GCC_VERSION=5 CXX_FLAGS="-std=c++11" BUILD_TYPE=Debug
      os: linux
      sudo: required
      dist: trusty
      cache:
        ccache: true
        timeout: 1000
        directories:
          - $HOME/boost
          - $HOME/protobuf
          - $HOME/zeromq
      addons: &gcc5
        apt:
          packages:
            - cmake
            - g++-5
          sources:
            - ubuntu-toolchain-r-test

    - env: GCC_VERSION=5 CXX_FLAGS="-std=c++11" BUILD_TYPE=Release
      os: linux
      sudo: required
      dist: trusty
      cache:
        ccache: true
        timeout: 1000
        directories:
          - $HOME/boost
          - $HOME/protobuf
          - $HOME/zeromq
      addons: &gcc5
        apt:
          packages:
            - cmake
            - g++-5
          sources:
            - ubuntu-toolchain-r-test
            
    # gcc-6
    - env: GCC_VERSION=6 CXX_FLAGS="-std=c++11" BUILD_TYPE=Debug
      os: linux
      sudo: required
      dist: trusty
      cache:
        ccache: true
        timeout: 1000
        directories:
          - $HOME/boost
          - $HOME/protobuf
          - $HOME/zeromq
      addons: &gcc6
        apt:
          packages:
            - cmake
            - g++-6
          sources:
            - ubuntu-toolchain-r-test
    
    - env: GCC_VERSION=6 CXX_FLAGS="-std=c++11" BUILD_TYPE=Release
      os: linux
      sudo: required
      dist: trusty
      cache:
        ccache: true
        timeout: 1000
        directories:
          - $HOME/boost
          - $HOME/protobuf
          - $HOME/zeromq
      addons: &gcc6
        apt:
          packages:
            - cmake
            - g++-6
          sources:
            - ubuntu-toolchain-r-test

    # OSX

    # Xcode 7 Debug
    - env: CXX_FLAGS="-std=c++11" BUILD_TYPE=Debug
      os: osx
      osx_image: xcode73
      addons: &xcode73
      sudo: required

    # Xcode 7 Release
    - env: CXX_FLAGS="-std=c++11" BUILD_TYPE=Release
      os: osx
      osx_image: xcode73
      addons: &xcode73
      sudo: required
      
    # Xcode 8 Release
    - env: CXX_FLAGS="-std=c++11" BUILD_TYPE=Debug
      os: osx
      osx_image: xcode8
      addons: &xcode8
      sudo: required
      
    # Xcode 8 Release
    - env: CXX_FLAGS="-std=c++11" BUILD_TYPE=Release
      os: osx
      osx_image: xcode8
      addons: &xcode8
      sudo: required

branches:
  only:
    - master

before_install:

  # Update submodules 
  - git submodule update --init --recursive

  # protobuf prerequisites
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      sudo apt-get install -y autoconf automake libtool curl make unzip
    fi

  - if [ -n "$GCC_VERSION" ]; then export CXX="g++-${GCC_VERSION}" CC="gcc-${GCC_VERSION}"; fi
  - if [ -n "$CLANG_VERSION" ]; then export CXX="clang++-${CLANG_VERSION}" CC="clang-${CLANG_VERSION}"; fi

install:
  ############################################################################
  # All the dependencies are installed in ${TRAVIS_BUILD_DIR}/deps/
  ############################################################################
  - DEPS_DIR="${TRAVIS_BUILD_DIR}/deps"
  - mkdir ${DEPS_DIR} && cd ${DEPS_DIR}

  ############################################################################
  # Install a recent CMake
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      CMAKE_URL="https://cmake.org/files/v3.7/cmake-3.7.0-rc3-Linux-x86_64.tar.gz"
      mkdir cmake && travis_retry wget --no-check-certificate --quiet -O - ${CMAKE_URL} | tar --strip-components=1 -xz -C cmake
      export PATH=${DEPS_DIR}/cmake/bin:${PATH}
    fi
    
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      #osx>7 already has cmake 3.6
      brew unlink cmake
      brew install cmake
    fi
    
  ############################################################################
  # Install Boost
  ############################################################################  
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if [ ! -d "$HOME/boost/lib" ]; then
        wget -O boost.tar.gz https://sourceforge.net/projects/boost/files/boost/1.61.0/boost_1_61_0.tar.gz/download
        tar -xzf boost.tar.gz
        cd boost_1_61_0
        ./bootstrap.sh --prefix=$HOME/boost
        ./b2 #--toolset="gcc-${GCC_VERSION}"
        sudo ./b2 install
        cd ..
      else
        echo 'Using cached directory for boost.';
        export BOOST_ROOT="/home/travis/boost"
        export BOOST_INCLUDE="/home/travis/boost/include"
        export BOOST_LIBDIR="/home/travis/boost/lib"
        export BOOST_OPTS = "-DBOOST_ROOT=${BOOST_ROOT} -DBOOST_INCLUDEDIR=${BOOST_INCLUDE} -DBOOST_LIBRARYDIR=${BOOST_LIBDIR}"
        ls -A $HOME/boost
      fi
    fi

  ############################################################################
  # Install ZeroMQ
  ############################################################################    
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if [ ! -d "$HOME/zeromq/lib" ]; then
        wget https://github.com/zeromq/libzmq/releases/download/v4.2.0/zeromq-4.2.0.tar.gz
        tar -xzvf zeromq-4.2.0.tar.gz
        cd zeromq-4.2.0
        sudo ./autogen.sh
        sudo ./configure --prefix=$HOME/zeromq
        sudo make --silent 
        sudo make install --silent
        cd ..
        export ZEROMQ=""
      else
        echo 'Using cached directory for zeromq.';
        export ZeroMQ_ROOT_DIR="/home/travis/zeromq"
        export ZeroMQ_INCLUDE_DIR="/home/travis/zeromq/include"
        export ZeroMQ_LIBRARIES="/home/travis/zeromq/lib"

        export ZEROMQ=" -DZeroMQ_ROOT_DIR=/home/travis/zeromq "
      fi
    fi
  ############################################################################
  # Install protobuf
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      if [ ! -d "$HOME/protobuf/lib" ]; then
        wget https://github.com/google/protobuf/releases/download/v3.1.0/protobuf-cpp-3.1.0.tar.gz
        tar -xzvf protobuf-cpp-3.1.0.tar.gz
        cd protobuf-3.1.0
        sudo ./configure --prefix=$HOME/protobuf 
        sudo make --silent
        sudo make install --silent
        cd ..
        export PROTOBUF=""
      else
        echo 'Using cached directory for protobuf.';
        export Protobuf_ROOT_DIR="/home/travis/protobuf"
        export Protobuf_INCLUDE_DIR="/home/travis/protobuf/include"
        export Protobuf_LIBRARY="/home/travis/protobuf/lib"
        export Protobuf_PROTOC_EXECUTABLE="/home/travis/protobuf/bin"
        export PATH=/home/travis/protobuf/bin:${PATH}
        export PROTOBUF=" -DProtobuf_ROOT_DIR=/home/travis/protobuf "
      fi  
    fi
  - |
    if [[ "${TRAVIS_OS_NAME}" == "osx" ]]; then
      brew unlink protobuf
      brew install protobuf
    fi  
    
  ############################################################################
  # Ldconfig only in linux
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      sudo ldconfig      
    fi
  

  ############################################################################
  # secp256k1
  ############################################################################
  - git clone https://github.com/bitprim/secp256k1.git
  - cd secp256k1
  - mkdir build
  - cd build
  - cmake .. -DENABLE_MODULE_RECOVERY=ON 
  - make -j2 --silent
  - sudo make install --silent
  - cd ..
  - cd ..

  ############################################################################
  # set libraries
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      sudo ldconfig      
    fi


  ############################################################################
  # bitprim-core
  ############################################################################
  - git clone https://github.com/bitprim/bitprim-core.git
  - cd bitprim-core
  - mkdir build
  - cd build
  - cmake .. -DENABLE_TESTS=OFF -DWITH_TESTS=OFF -DWITH_EXAMPLES=OFF -DENABLE_MODULE_RECOVERY=ON -DWITH_TOOLS=OFF -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" ${BOOST_OPTS}
  - make -j2 --silent
  - sudo make install --silent
  - cd ..
  - cd ..
  
  ############################################################################
  # set libraries
  ############################################################################
  - |
    if [[ "${TRAVIS_OS_NAME}" == "linux" ]]; then
      sudo ldconfig      
    fi


before_script:
  ############################################################################
  # Set the git identity (for pushing the documentation and the benchmarks)
  ############################################################################
  - git config --global user.name "Travis bot"
  - git config --global user.email travis-bot@travis-ci.org

  - if [ -n "$GCC_VERSION" ]; then export CXX_FLAGS="${CXX_FLAGS} -Wall -Wextra"; fi
  - if [ -n "$CLANG_VERSION" ]; then export CXX_FLAGS="${CXX_FLAGS} -Wall -Wextra"; fi


  - cd ${TRAVIS_BUILD_DIR}
  - mkdir build 
  - cd build 
  - cmake .. -DWITH_TESTS=OFF ${PROTOBUF} ${ZEROMQ} -DCMAKE_BUILD_TYPE=$BUILD_TYPE -DCMAKE_CXX_FLAGS="${CXX_FLAGS}" ${BOOST_OPTS}

script:

  - make -j2 
  - sudo make install



notifications:
  email: false
  webhooks:
    urls: https://webhooks.gitter.im/e/a19dd2b03bf676d2b622
    on_success: change
    on_failure: always
