###############################################################################
#  Copyright (c) 2014-2015 libbitcoin-protocol developers (see COPYING).
#
#         GENERATED SOURCE CODE, DO NOT EDIT EXCEPT EXPERIMENTALLY
#
###############################################################################
sudo:
    - false

language:
    - cpp

addons:
    apt:
        sources:
            - boost-latest
            - ubuntu-toolchain-r-test

matrix:
    include:
        - os: osx
          compiler: clang
          env: LINK=dynamic
        - os: osx
          compiler: clang
          env: LINK=static
        - os: linux
          compiler: clang
          env: LINK=dynamic
        - os: linux
          compiler: clang
          env: LINK=static
          addons:
            apt:
              sources:
                - sourceline: 'ppa:h-rayflood/llvm'
              packages:
                - clang-3.4
        - os: linux
          compiler: gcc
          env: LINK=dynamic
          addons:
            apt:
              packages:
                - g++-4.8
        - os: linux
          compiler: gcc
          env: LINK=static
          addons:
            apt:
              packages:
                - lcov
    fast_finish:
        - true

before_install:

    # Set aliases for readability.
    - if [[ $CC             == gcc     ]]; then GCC=true; fi
    - if [[ $CC             == clang   ]]; then CLANG=true; fi
    - if [[ $LINK           == static  ]]; then STATIC=true; fi
    - if [[ $LINK           == dynamic ]]; then DYNAMIC=true; fi
    - if [[ $TRAVIS_OS_NAME == osx     ]]; then OSX=true; fi
    - if [[ $TRAVIS_OS_NAME == linux   ]]; then LINUX=true; fi

    # Update homebrew.
    - if [[ $OSX   && $CLANG             ]]; then brew update; fi

install:

    # Export CC/CXX to control compiler/version.
    - if [[ $OSX   && $CLANG && $STATIC  ]]; then export CC=clang; export CXX=clang++; fi
    - if [[ $LINUX && $CLANG && $STATIC  ]]; then export CC=clang-3.4; export CXX=clang++-3.4; fi
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then export CC=gcc; export CXX=g++; fi
    - if [[ $OSX   && $CLANG && $DYNAMIC ]]; then export CC=clang; export CXX=clang++; fi
    - if [[ $LINUX && $CLANG && $DYNAMIC ]]; then export CC=clang; export CXX=clang++; fi
    - if [[ $LINUX && $GCC   && $DYNAMIC ]]; then export CC=gcc-4.8; export CXX=g++-4.8; fi

    # Download and install packages.

script:

    # Download and build libbitcoin-protocol and all dependencies.
    - if [[ $OSX   && $CLANG && $STATIC  ]]; then CC=$CC CXX=$CXX ./install.sh --disable-shared --build-boost --build-zmq --prefix=$TRAVIS_BUILD_DIR/my-prefix; fi
    - if [[ $LINUX && $CLANG && $STATIC  ]]; then CC=$CC CXX=$CXX ./install.sh --disable-shared --build-boost --build-zmq --prefix=$TRAVIS_BUILD_DIR/my-prefix CFLAGS='-Os' CXXFLAGS='-Os'; fi
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then CC=$CC CXX=$CXX ./install.sh --build-boost --build-zmq --disable-shared --build-dir=my-build --prefix=$TRAVIS_BUILD_DIR/my-prefix CFLAGS='-Og -g --coverage' CXXFLAGS='-Og -g --coverage'; fi
    - if [[ $OSX   && $CLANG && $DYNAMIC ]]; then CC=$CC CXX=$CXX ./install.sh --build-zmq --disable-static; fi
    - if [[ $LINUX && $CLANG && $DYNAMIC ]]; then CC=$CC CXX=$CXX ./install.sh --build-boost --build-zmq --disable-ndebug --disable-static --prefix=$TRAVIS_BUILD_DIR/my-prefix CFLAGS='-Os' CXXFLAGS='-Os'; fi
    - if [[ $LINUX && $GCC   && $DYNAMIC ]]; then CC=$CC CXX=$CXX ./install.sh --disable-static --build-boost --build-zmq --prefix=$TRAVIS_BUILD_DIR/my-prefix CFLAGS='-Os -s' CXXFLAGS='-Os -s'; fi

after_success:

    # Install coveralls and current lcov.
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then gem install coveralls-lcov; fi

    # Capture coverage info, filter out system and test code, and debug before upload.
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then lcov --directory . --capture --output-file coverage.info; fi
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then lcov --remove coverage.info "/usr/*" "$TRAVIS_BUILD_DIR/my-prefix/*" "my-build/*" "test/*" "interface.pb.*" --output-file coverage.info; fi
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then lcov --list coverage.info; fi

    # Upload coverage info to coveralls service (--repo-token <private coveralls repo token>).
    - if [[ $LINUX && $GCC   && $STATIC  ]]; then coveralls-lcov coverage.info; fi

