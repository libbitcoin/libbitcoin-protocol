// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/bitcoin/protocol/interface.proto

package libbitcoin.protocol;

public final class Interface {
  private Interface() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  /**
   * Protobuf enum {@code libbitcoin.protocol.filters}
   */
  public enum filters
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>ADDRESS = 1;</code>
     */
    ADDRESS(0, 1),
    /**
     * <code>TRANSACTION = 2;</code>
     */
    TRANSACTION(1, 2),
    /**
     * <code>STEALTH = 3;</code>
     */
    STEALTH(2, 3),
    ;

    /**
     * <code>ADDRESS = 1;</code>
     */
    public static final int ADDRESS_VALUE = 1;
    /**
     * <code>TRANSACTION = 2;</code>
     */
    public static final int TRANSACTION_VALUE = 2;
    /**
     * <code>STEALTH = 3;</code>
     */
    public static final int STEALTH_VALUE = 3;


    public final int getNumber() { return value; }

    public static filters valueOf(int value) {
      switch (value) {
        case 1: return ADDRESS;
        case 2: return TRANSACTION;
        case 3: return STEALTH;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<filters>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<filters>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<filters>() {
            public filters findValueByNumber(int number) {
              return filters.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.getDescriptor().getEnumTypes().get(0);
    }

    private static final filters[] VALUES = values();

    public static filters valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private filters(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:libbitcoin.protocol.filters)
  }

  /**
   * Protobuf enum {@code libbitcoin.protocol.transaction_results}
   *
   * <pre>
   *
   * Client request
   *
   * </pre>
   */
  public enum transaction_results
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>TX_HASH = 1;</code>
     */
    TX_HASH(0, 1),
    /**
     * <code>TX_RESULT = 2;</code>
     */
    TX_RESULT(1, 2),
    /**
     * <code>UTXO_RESULT = 3;</code>
     */
    UTXO_RESULT(2, 3),
    ;

    /**
     * <code>TX_HASH = 1;</code>
     */
    public static final int TX_HASH_VALUE = 1;
    /**
     * <code>TX_RESULT = 2;</code>
     */
    public static final int TX_RESULT_VALUE = 2;
    /**
     * <code>UTXO_RESULT = 3;</code>
     */
    public static final int UTXO_RESULT_VALUE = 3;


    public final int getNumber() { return value; }

    public static transaction_results valueOf(int value) {
      switch (value) {
        case 1: return TX_HASH;
        case 2: return TX_RESULT;
        case 3: return UTXO_RESULT;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<transaction_results>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<transaction_results>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<transaction_results>() {
            public transaction_results findValueByNumber(int number) {
              return transaction_results.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.getDescriptor().getEnumTypes().get(1);
    }

    private static final transaction_results[] VALUES = values();

    public static transaction_results valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private transaction_results(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:libbitcoin.protocol.transaction_results)
  }

  /**
   * Protobuf enum {@code libbitcoin.protocol.locations}
   */
  public enum locations
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>NONE = 0;</code>
     */
    NONE(0, 0),
    /**
     * <code>BLOCK = 1;</code>
     */
    BLOCK(1, 1),
    /**
     * <code>MERKLE = 2;</code>
     */
    MERKLE(2, 2),
    ;

    /**
     * <code>NONE = 0;</code>
     */
    public static final int NONE_VALUE = 0;
    /**
     * <code>BLOCK = 1;</code>
     */
    public static final int BLOCK_VALUE = 1;
    /**
     * <code>MERKLE = 2;</code>
     */
    public static final int MERKLE_VALUE = 2;


    public final int getNumber() { return value; }

    public static locations valueOf(int value) {
      switch (value) {
        case 0: return NONE;
        case 1: return BLOCK;
        case 2: return MERKLE;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<locations>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static com.google.protobuf.Internal.EnumLiteMap<locations>
        internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<locations>() {
            public locations findValueByNumber(int number) {
              return locations.valueOf(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(index);
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.getDescriptor().getEnumTypes().get(2);
    }

    private static final locations[] VALUES = values();

    public static locations valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      return VALUES[desc.getIndex()];
    }

    private final int index;
    private final int value;

    private locations(int index, int value) {
      this.index = index;
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:libbitcoin.protocol.locations)
  }

  public interface block_headerOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.block_header)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 version = 1;</code>
     *
     * <pre>
     * protocol version
     * </pre>
     */
    boolean hasVersion();
    /**
     * <code>required uint32 version = 1;</code>
     *
     * <pre>
     * protocol version
     * </pre>
     */
    int getVersion();

    /**
     * <code>required bytes previous_block_hash = 2;</code>
     *
     * <pre>
     * 32-byte previous block hash
     * </pre>
     */
    boolean hasPreviousBlockHash();
    /**
     * <code>required bytes previous_block_hash = 2;</code>
     *
     * <pre>
     * 32-byte previous block hash
     * </pre>
     */
    com.google.protobuf.ByteString getPreviousBlockHash();

    /**
     * <code>required bytes merkle_root = 3;</code>
     *
     * <pre>
     * 32-byte transactions hash
     * </pre>
     */
    boolean hasMerkleRoot();
    /**
     * <code>required bytes merkle_root = 3;</code>
     *
     * <pre>
     * 32-byte transactions hash
     * </pre>
     */
    com.google.protobuf.ByteString getMerkleRoot();

    /**
     * <code>required uint32 timestamp = 4;</code>
     *
     * <pre>
     * creation
     * </pre>
     */
    boolean hasTimestamp();
    /**
     * <code>required uint32 timestamp = 4;</code>
     *
     * <pre>
     * creation
     * </pre>
     */
    int getTimestamp();

    /**
     * <code>required uint32 bits = 5;</code>
     *
     * <pre>
     * difficulty
     * </pre>
     */
    boolean hasBits();
    /**
     * <code>required uint32 bits = 5;</code>
     *
     * <pre>
     * difficulty
     * </pre>
     */
    int getBits();

    /**
     * <code>required uint32 nonce = 6;</code>
     */
    boolean hasNonce();
    /**
     * <code>required uint32 nonce = 6;</code>
     */
    int getNonce();

    /**
     * <code>required uint64 tx_count = 7;</code>
     *
     * <pre>
     * variable length integer in protocol, not involved in hash computation
     * </pre>
     */
    boolean hasTxCount();
    /**
     * <code>required uint64 tx_count = 7;</code>
     *
     * <pre>
     * variable length integer in protocol, not involved in hash computation
     * </pre>
     */
    long getTxCount();
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.block_header}
   *
   * <pre>
   *
   * Block Header
   *
   * </pre>
   */
  public static final class block_header extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.block_header)
      block_headerOrBuilder {
    // Use block_header.newBuilder() to construct.
    private block_header(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private block_header(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final block_header defaultInstance;
    public static block_header getDefaultInstance() {
      return defaultInstance;
    }

    public block_header getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private block_header(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              version_ = input.readUInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              previousBlockHash_ = input.readBytes();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              merkleRoot_ = input.readBytes();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              timestamp_ = input.readUInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              bits_ = input.readUInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              nonce_ = input.readUInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              txCount_ = input.readUInt64();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_header_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_header_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.block_header.class, libbitcoin.protocol.Interface.block_header.Builder.class);
    }

    public static com.google.protobuf.Parser<block_header> PARSER =
        new com.google.protobuf.AbstractParser<block_header>() {
      public block_header parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new block_header(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<block_header> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int VERSION_FIELD_NUMBER = 1;
    private int version_;
    /**
     * <code>required uint32 version = 1;</code>
     *
     * <pre>
     * protocol version
     * </pre>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 version = 1;</code>
     *
     * <pre>
     * protocol version
     * </pre>
     */
    public int getVersion() {
      return version_;
    }

    public static final int PREVIOUS_BLOCK_HASH_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString previousBlockHash_;
    /**
     * <code>required bytes previous_block_hash = 2;</code>
     *
     * <pre>
     * 32-byte previous block hash
     * </pre>
     */
    public boolean hasPreviousBlockHash() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bytes previous_block_hash = 2;</code>
     *
     * <pre>
     * 32-byte previous block hash
     * </pre>
     */
    public com.google.protobuf.ByteString getPreviousBlockHash() {
      return previousBlockHash_;
    }

    public static final int MERKLE_ROOT_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString merkleRoot_;
    /**
     * <code>required bytes merkle_root = 3;</code>
     *
     * <pre>
     * 32-byte transactions hash
     * </pre>
     */
    public boolean hasMerkleRoot() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bytes merkle_root = 3;</code>
     *
     * <pre>
     * 32-byte transactions hash
     * </pre>
     */
    public com.google.protobuf.ByteString getMerkleRoot() {
      return merkleRoot_;
    }

    public static final int TIMESTAMP_FIELD_NUMBER = 4;
    private int timestamp_;
    /**
     * <code>required uint32 timestamp = 4;</code>
     *
     * <pre>
     * creation
     * </pre>
     */
    public boolean hasTimestamp() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>required uint32 timestamp = 4;</code>
     *
     * <pre>
     * creation
     * </pre>
     */
    public int getTimestamp() {
      return timestamp_;
    }

    public static final int BITS_FIELD_NUMBER = 5;
    private int bits_;
    /**
     * <code>required uint32 bits = 5;</code>
     *
     * <pre>
     * difficulty
     * </pre>
     */
    public boolean hasBits() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>required uint32 bits = 5;</code>
     *
     * <pre>
     * difficulty
     * </pre>
     */
    public int getBits() {
      return bits_;
    }

    public static final int NONCE_FIELD_NUMBER = 6;
    private int nonce_;
    /**
     * <code>required uint32 nonce = 6;</code>
     */
    public boolean hasNonce() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>required uint32 nonce = 6;</code>
     */
    public int getNonce() {
      return nonce_;
    }

    public static final int TX_COUNT_FIELD_NUMBER = 7;
    private long txCount_;
    /**
     * <code>required uint64 tx_count = 7;</code>
     *
     * <pre>
     * variable length integer in protocol, not involved in hash computation
     * </pre>
     */
    public boolean hasTxCount() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>required uint64 tx_count = 7;</code>
     *
     * <pre>
     * variable length integer in protocol, not involved in hash computation
     * </pre>
     */
    public long getTxCount() {
      return txCount_;
    }

    private void initFields() {
      version_ = 0;
      previousBlockHash_ = com.google.protobuf.ByteString.EMPTY;
      merkleRoot_ = com.google.protobuf.ByteString.EMPTY;
      timestamp_ = 0;
      bits_ = 0;
      nonce_ = 0;
      txCount_ = 0L;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasVersion()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPreviousBlockHash()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasMerkleRoot()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTimestamp()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasBits()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasNonce()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasTxCount()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, version_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, previousBlockHash_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, merkleRoot_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeUInt32(4, timestamp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeUInt32(5, bits_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeUInt32(6, nonce_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeUInt64(7, txCount_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, version_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, previousBlockHash_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, merkleRoot_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(4, timestamp_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(5, bits_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(6, nonce_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(7, txCount_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.block_header parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.block_header parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block_header parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.block_header parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block_header parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.block_header parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block_header parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.block_header parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block_header parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.block_header parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.block_header prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.block_header}
     *
     * <pre>
     *
     * Block Header
     *
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.block_header)
        libbitcoin.protocol.Interface.block_headerOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_header_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_header_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.block_header.class, libbitcoin.protocol.Interface.block_header.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.block_header.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        version_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        previousBlockHash_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        merkleRoot_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        timestamp_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        bits_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        nonce_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        txCount_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000040);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_header_descriptor;
      }

      public libbitcoin.protocol.Interface.block_header getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.block_header.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.block_header build() {
        libbitcoin.protocol.Interface.block_header result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.block_header buildPartial() {
        libbitcoin.protocol.Interface.block_header result = new libbitcoin.protocol.Interface.block_header(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.version_ = version_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.previousBlockHash_ = previousBlockHash_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.merkleRoot_ = merkleRoot_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.timestamp_ = timestamp_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.bits_ = bits_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.nonce_ = nonce_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.txCount_ = txCount_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.block_header) {
          return mergeFrom((libbitcoin.protocol.Interface.block_header)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.block_header other) {
        if (other == libbitcoin.protocol.Interface.block_header.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasPreviousBlockHash()) {
          setPreviousBlockHash(other.getPreviousBlockHash());
        }
        if (other.hasMerkleRoot()) {
          setMerkleRoot(other.getMerkleRoot());
        }
        if (other.hasTimestamp()) {
          setTimestamp(other.getTimestamp());
        }
        if (other.hasBits()) {
          setBits(other.getBits());
        }
        if (other.hasNonce()) {
          setNonce(other.getNonce());
        }
        if (other.hasTxCount()) {
          setTxCount(other.getTxCount());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasVersion()) {
          
          return false;
        }
        if (!hasPreviousBlockHash()) {
          
          return false;
        }
        if (!hasMerkleRoot()) {
          
          return false;
        }
        if (!hasTimestamp()) {
          
          return false;
        }
        if (!hasBits()) {
          
          return false;
        }
        if (!hasNonce()) {
          
          return false;
        }
        if (!hasTxCount()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.block_header parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.block_header) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int version_ ;
      /**
       * <code>required uint32 version = 1;</code>
       *
       * <pre>
       * protocol version
       * </pre>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 version = 1;</code>
       *
       * <pre>
       * protocol version
       * </pre>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <code>required uint32 version = 1;</code>
       *
       * <pre>
       * protocol version
       * </pre>
       */
      public Builder setVersion(int value) {
        bitField0_ |= 0x00000001;
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 version = 1;</code>
       *
       * <pre>
       * protocol version
       * </pre>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString previousBlockHash_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes previous_block_hash = 2;</code>
       *
       * <pre>
       * 32-byte previous block hash
       * </pre>
       */
      public boolean hasPreviousBlockHash() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bytes previous_block_hash = 2;</code>
       *
       * <pre>
       * 32-byte previous block hash
       * </pre>
       */
      public com.google.protobuf.ByteString getPreviousBlockHash() {
        return previousBlockHash_;
      }
      /**
       * <code>required bytes previous_block_hash = 2;</code>
       *
       * <pre>
       * 32-byte previous block hash
       * </pre>
       */
      public Builder setPreviousBlockHash(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        previousBlockHash_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes previous_block_hash = 2;</code>
       *
       * <pre>
       * 32-byte previous block hash
       * </pre>
       */
      public Builder clearPreviousBlockHash() {
        bitField0_ = (bitField0_ & ~0x00000002);
        previousBlockHash_ = getDefaultInstance().getPreviousBlockHash();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString merkleRoot_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes merkle_root = 3;</code>
       *
       * <pre>
       * 32-byte transactions hash
       * </pre>
       */
      public boolean hasMerkleRoot() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required bytes merkle_root = 3;</code>
       *
       * <pre>
       * 32-byte transactions hash
       * </pre>
       */
      public com.google.protobuf.ByteString getMerkleRoot() {
        return merkleRoot_;
      }
      /**
       * <code>required bytes merkle_root = 3;</code>
       *
       * <pre>
       * 32-byte transactions hash
       * </pre>
       */
      public Builder setMerkleRoot(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        merkleRoot_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes merkle_root = 3;</code>
       *
       * <pre>
       * 32-byte transactions hash
       * </pre>
       */
      public Builder clearMerkleRoot() {
        bitField0_ = (bitField0_ & ~0x00000004);
        merkleRoot_ = getDefaultInstance().getMerkleRoot();
        onChanged();
        return this;
      }

      private int timestamp_ ;
      /**
       * <code>required uint32 timestamp = 4;</code>
       *
       * <pre>
       * creation
       * </pre>
       */
      public boolean hasTimestamp() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>required uint32 timestamp = 4;</code>
       *
       * <pre>
       * creation
       * </pre>
       */
      public int getTimestamp() {
        return timestamp_;
      }
      /**
       * <code>required uint32 timestamp = 4;</code>
       *
       * <pre>
       * creation
       * </pre>
       */
      public Builder setTimestamp(int value) {
        bitField0_ |= 0x00000008;
        timestamp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 timestamp = 4;</code>
       *
       * <pre>
       * creation
       * </pre>
       */
      public Builder clearTimestamp() {
        bitField0_ = (bitField0_ & ~0x00000008);
        timestamp_ = 0;
        onChanged();
        return this;
      }

      private int bits_ ;
      /**
       * <code>required uint32 bits = 5;</code>
       *
       * <pre>
       * difficulty
       * </pre>
       */
      public boolean hasBits() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>required uint32 bits = 5;</code>
       *
       * <pre>
       * difficulty
       * </pre>
       */
      public int getBits() {
        return bits_;
      }
      /**
       * <code>required uint32 bits = 5;</code>
       *
       * <pre>
       * difficulty
       * </pre>
       */
      public Builder setBits(int value) {
        bitField0_ |= 0x00000010;
        bits_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 bits = 5;</code>
       *
       * <pre>
       * difficulty
       * </pre>
       */
      public Builder clearBits() {
        bitField0_ = (bitField0_ & ~0x00000010);
        bits_ = 0;
        onChanged();
        return this;
      }

      private int nonce_ ;
      /**
       * <code>required uint32 nonce = 6;</code>
       */
      public boolean hasNonce() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>required uint32 nonce = 6;</code>
       */
      public int getNonce() {
        return nonce_;
      }
      /**
       * <code>required uint32 nonce = 6;</code>
       */
      public Builder setNonce(int value) {
        bitField0_ |= 0x00000020;
        nonce_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 nonce = 6;</code>
       */
      public Builder clearNonce() {
        bitField0_ = (bitField0_ & ~0x00000020);
        nonce_ = 0;
        onChanged();
        return this;
      }

      private long txCount_ ;
      /**
       * <code>required uint64 tx_count = 7;</code>
       *
       * <pre>
       * variable length integer in protocol, not involved in hash computation
       * </pre>
       */
      public boolean hasTxCount() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>required uint64 tx_count = 7;</code>
       *
       * <pre>
       * variable length integer in protocol, not involved in hash computation
       * </pre>
       */
      public long getTxCount() {
        return txCount_;
      }
      /**
       * <code>required uint64 tx_count = 7;</code>
       *
       * <pre>
       * variable length integer in protocol, not involved in hash computation
       * </pre>
       */
      public Builder setTxCount(long value) {
        bitField0_ |= 0x00000040;
        txCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 tx_count = 7;</code>
       *
       * <pre>
       * variable length integer in protocol, not involved in hash computation
       * </pre>
       */
      public Builder clearTxCount() {
        bitField0_ = (bitField0_ & ~0x00000040);
        txCount_ = 0L;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.block_header)
    }

    static {
      defaultInstance = new block_header(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.block_header)
  }

  public interface pointOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.point)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required bytes hash = 1;</code>
     */
    boolean hasHash();
    /**
     * <code>required bytes hash = 1;</code>
     */
    com.google.protobuf.ByteString getHash();

    /**
     * <code>required uint32 index = 2;</code>
     */
    boolean hasIndex();
    /**
     * <code>required uint32 index = 2;</code>
     */
    int getIndex();
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.point}
   *
   * <pre>
   *
   * OutPoint corresponding object.
   *
   * </pre>
   */
  public static final class point extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.point)
      pointOrBuilder {
    // Use point.newBuilder() to construct.
    private point(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private point(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final point defaultInstance;
    public static point getDefaultInstance() {
      return defaultInstance;
    }

    public point getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private point(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              hash_ = input.readBytes();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              index_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_point_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_point_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.point.class, libbitcoin.protocol.Interface.point.Builder.class);
    }

    public static com.google.protobuf.Parser<point> PARSER =
        new com.google.protobuf.AbstractParser<point>() {
      public point parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new point(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<point> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int HASH_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString hash_;
    /**
     * <code>required bytes hash = 1;</code>
     */
    public boolean hasHash() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bytes hash = 1;</code>
     */
    public com.google.protobuf.ByteString getHash() {
      return hash_;
    }

    public static final int INDEX_FIELD_NUMBER = 2;
    private int index_;
    /**
     * <code>required uint32 index = 2;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 index = 2;</code>
     */
    public int getIndex() {
      return index_;
    }

    private void initFields() {
      hash_ = com.google.protobuf.ByteString.EMPTY;
      index_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasHash()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, hash_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, index_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, hash_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, index_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.point parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.point parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.point parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.point parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.point parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.point parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.point parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.point parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.point parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.point parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.point prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.point}
     *
     * <pre>
     *
     * OutPoint corresponding object.
     *
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.point)
        libbitcoin.protocol.Interface.pointOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_point_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_point_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.point.class, libbitcoin.protocol.Interface.point.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.point.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        hash_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_point_descriptor;
      }

      public libbitcoin.protocol.Interface.point getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.point.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.point build() {
        libbitcoin.protocol.Interface.point result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.point buildPartial() {
        libbitcoin.protocol.Interface.point result = new libbitcoin.protocol.Interface.point(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.hash_ = hash_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.index_ = index_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.point) {
          return mergeFrom((libbitcoin.protocol.Interface.point)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.point other) {
        if (other == libbitcoin.protocol.Interface.point.getDefaultInstance()) return this;
        if (other.hasHash()) {
          setHash(other.getHash());
        }
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasHash()) {
          
          return false;
        }
        if (!hasIndex()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.point parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.point) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString hash_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes hash = 1;</code>
       */
      public boolean hasHash() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bytes hash = 1;</code>
       */
      public com.google.protobuf.ByteString getHash() {
        return hash_;
      }
      /**
       * <code>required bytes hash = 1;</code>
       */
      public Builder setHash(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        hash_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes hash = 1;</code>
       */
      public Builder clearHash() {
        bitField0_ = (bitField0_ & ~0x00000001);
        hash_ = getDefaultInstance().getHash();
        onChanged();
        return this;
      }

      private int index_ ;
      /**
       * <code>required uint32 index = 2;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 index = 2;</code>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required uint32 index = 2;</code>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000002;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 index = 2;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        index_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.point)
    }

    static {
      defaultInstance = new point(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.point)
  }

  public interface tx_inputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.tx_input)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .libbitcoin.protocol.point previous_output = 1;</code>
     */
    boolean hasPreviousOutput();
    /**
     * <code>required .libbitcoin.protocol.point previous_output = 1;</code>
     */
    libbitcoin.protocol.Interface.point getPreviousOutput();
    /**
     * <code>required .libbitcoin.protocol.point previous_output = 1;</code>
     */
    libbitcoin.protocol.Interface.pointOrBuilder getPreviousOutputOrBuilder();

    /**
     * <code>required bytes script = 2;</code>
     */
    boolean hasScript();
    /**
     * <code>required bytes script = 2;</code>
     */
    com.google.protobuf.ByteString getScript();

    /**
     * <code>required uint32 sequence = 3;</code>
     */
    boolean hasSequence();
    /**
     * <code>required uint32 sequence = 3;</code>
     */
    int getSequence();
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.tx_input}
   *
   * <pre>
   *
   * TxIn corresponding object.
   *
   * </pre>
   */
  public static final class tx_input extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.tx_input)
      tx_inputOrBuilder {
    // Use tx_input.newBuilder() to construct.
    private tx_input(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private tx_input(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final tx_input defaultInstance;
    public static tx_input getDefaultInstance() {
      return defaultInstance;
    }

    public tx_input getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private tx_input(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              libbitcoin.protocol.Interface.point.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = previousOutput_.toBuilder();
              }
              previousOutput_ = input.readMessage(libbitcoin.protocol.Interface.point.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(previousOutput_);
                previousOutput_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              script_ = input.readBytes();
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              sequence_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_input_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_input_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.tx_input.class, libbitcoin.protocol.Interface.tx_input.Builder.class);
    }

    public static com.google.protobuf.Parser<tx_input> PARSER =
        new com.google.protobuf.AbstractParser<tx_input>() {
      public tx_input parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new tx_input(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<tx_input> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int PREVIOUS_OUTPUT_FIELD_NUMBER = 1;
    private libbitcoin.protocol.Interface.point previousOutput_;
    /**
     * <code>required .libbitcoin.protocol.point previous_output = 1;</code>
     */
    public boolean hasPreviousOutput() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .libbitcoin.protocol.point previous_output = 1;</code>
     */
    public libbitcoin.protocol.Interface.point getPreviousOutput() {
      return previousOutput_;
    }
    /**
     * <code>required .libbitcoin.protocol.point previous_output = 1;</code>
     */
    public libbitcoin.protocol.Interface.pointOrBuilder getPreviousOutputOrBuilder() {
      return previousOutput_;
    }

    public static final int SCRIPT_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString script_;
    /**
     * <code>required bytes script = 2;</code>
     */
    public boolean hasScript() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bytes script = 2;</code>
     */
    public com.google.protobuf.ByteString getScript() {
      return script_;
    }

    public static final int SEQUENCE_FIELD_NUMBER = 3;
    private int sequence_;
    /**
     * <code>required uint32 sequence = 3;</code>
     */
    public boolean hasSequence() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required uint32 sequence = 3;</code>
     */
    public int getSequence() {
      return sequence_;
    }

    private void initFields() {
      previousOutput_ = libbitcoin.protocol.Interface.point.getDefaultInstance();
      script_ = com.google.protobuf.ByteString.EMPTY;
      sequence_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasPreviousOutput()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasScript()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSequence()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getPreviousOutput().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, previousOutput_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, script_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeUInt32(3, sequence_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, previousOutput_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, script_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(3, sequence_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.tx_input parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.tx_input parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx_input parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.tx_input parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx_input parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.tx_input parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx_input parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.tx_input parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx_input parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.tx_input parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.tx_input prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.tx_input}
     *
     * <pre>
     *
     * TxIn corresponding object.
     *
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.tx_input)
        libbitcoin.protocol.Interface.tx_inputOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_input_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_input_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.tx_input.class, libbitcoin.protocol.Interface.tx_input.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.tx_input.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getPreviousOutputFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (previousOutputBuilder_ == null) {
          previousOutput_ = libbitcoin.protocol.Interface.point.getDefaultInstance();
        } else {
          previousOutputBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        script_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        sequence_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_input_descriptor;
      }

      public libbitcoin.protocol.Interface.tx_input getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.tx_input.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.tx_input build() {
        libbitcoin.protocol.Interface.tx_input result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.tx_input buildPartial() {
        libbitcoin.protocol.Interface.tx_input result = new libbitcoin.protocol.Interface.tx_input(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (previousOutputBuilder_ == null) {
          result.previousOutput_ = previousOutput_;
        } else {
          result.previousOutput_ = previousOutputBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.script_ = script_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.sequence_ = sequence_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.tx_input) {
          return mergeFrom((libbitcoin.protocol.Interface.tx_input)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.tx_input other) {
        if (other == libbitcoin.protocol.Interface.tx_input.getDefaultInstance()) return this;
        if (other.hasPreviousOutput()) {
          mergePreviousOutput(other.getPreviousOutput());
        }
        if (other.hasScript()) {
          setScript(other.getScript());
        }
        if (other.hasSequence()) {
          setSequence(other.getSequence());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasPreviousOutput()) {
          
          return false;
        }
        if (!hasScript()) {
          
          return false;
        }
        if (!hasSequence()) {
          
          return false;
        }
        if (!getPreviousOutput().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.tx_input parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.tx_input) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private libbitcoin.protocol.Interface.point previousOutput_ = libbitcoin.protocol.Interface.point.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.point, libbitcoin.protocol.Interface.point.Builder, libbitcoin.protocol.Interface.pointOrBuilder> previousOutputBuilder_;
      /**
       * <code>required .libbitcoin.protocol.point previous_output = 1;</code>
       */
      public boolean hasPreviousOutput() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .libbitcoin.protocol.point previous_output = 1;</code>
       */
      public libbitcoin.protocol.Interface.point getPreviousOutput() {
        if (previousOutputBuilder_ == null) {
          return previousOutput_;
        } else {
          return previousOutputBuilder_.getMessage();
        }
      }
      /**
       * <code>required .libbitcoin.protocol.point previous_output = 1;</code>
       */
      public Builder setPreviousOutput(libbitcoin.protocol.Interface.point value) {
        if (previousOutputBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          previousOutput_ = value;
          onChanged();
        } else {
          previousOutputBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.point previous_output = 1;</code>
       */
      public Builder setPreviousOutput(
          libbitcoin.protocol.Interface.point.Builder builderForValue) {
        if (previousOutputBuilder_ == null) {
          previousOutput_ = builderForValue.build();
          onChanged();
        } else {
          previousOutputBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.point previous_output = 1;</code>
       */
      public Builder mergePreviousOutput(libbitcoin.protocol.Interface.point value) {
        if (previousOutputBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              previousOutput_ != libbitcoin.protocol.Interface.point.getDefaultInstance()) {
            previousOutput_ =
              libbitcoin.protocol.Interface.point.newBuilder(previousOutput_).mergeFrom(value).buildPartial();
          } else {
            previousOutput_ = value;
          }
          onChanged();
        } else {
          previousOutputBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.point previous_output = 1;</code>
       */
      public Builder clearPreviousOutput() {
        if (previousOutputBuilder_ == null) {
          previousOutput_ = libbitcoin.protocol.Interface.point.getDefaultInstance();
          onChanged();
        } else {
          previousOutputBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.point previous_output = 1;</code>
       */
      public libbitcoin.protocol.Interface.point.Builder getPreviousOutputBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getPreviousOutputFieldBuilder().getBuilder();
      }
      /**
       * <code>required .libbitcoin.protocol.point previous_output = 1;</code>
       */
      public libbitcoin.protocol.Interface.pointOrBuilder getPreviousOutputOrBuilder() {
        if (previousOutputBuilder_ != null) {
          return previousOutputBuilder_.getMessageOrBuilder();
        } else {
          return previousOutput_;
        }
      }
      /**
       * <code>required .libbitcoin.protocol.point previous_output = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.point, libbitcoin.protocol.Interface.point.Builder, libbitcoin.protocol.Interface.pointOrBuilder> 
          getPreviousOutputFieldBuilder() {
        if (previousOutputBuilder_ == null) {
          previousOutputBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.point, libbitcoin.protocol.Interface.point.Builder, libbitcoin.protocol.Interface.pointOrBuilder>(
                  getPreviousOutput(),
                  getParentForChildren(),
                  isClean());
          previousOutput_ = null;
        }
        return previousOutputBuilder_;
      }

      private com.google.protobuf.ByteString script_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes script = 2;</code>
       */
      public boolean hasScript() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bytes script = 2;</code>
       */
      public com.google.protobuf.ByteString getScript() {
        return script_;
      }
      /**
       * <code>required bytes script = 2;</code>
       */
      public Builder setScript(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        script_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes script = 2;</code>
       */
      public Builder clearScript() {
        bitField0_ = (bitField0_ & ~0x00000002);
        script_ = getDefaultInstance().getScript();
        onChanged();
        return this;
      }

      private int sequence_ ;
      /**
       * <code>required uint32 sequence = 3;</code>
       */
      public boolean hasSequence() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required uint32 sequence = 3;</code>
       */
      public int getSequence() {
        return sequence_;
      }
      /**
       * <code>required uint32 sequence = 3;</code>
       */
      public Builder setSequence(int value) {
        bitField0_ |= 0x00000004;
        sequence_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 sequence = 3;</code>
       */
      public Builder clearSequence() {
        bitField0_ = (bitField0_ & ~0x00000004);
        sequence_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.tx_input)
    }

    static {
      defaultInstance = new tx_input(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.tx_input)
  }

  public interface tx_outputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.tx_output)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint64 value = 1;</code>
     */
    boolean hasValue();
    /**
     * <code>required uint64 value = 1;</code>
     */
    long getValue();

    /**
     * <code>required bytes script = 2;</code>
     */
    boolean hasScript();
    /**
     * <code>required bytes script = 2;</code>
     */
    com.google.protobuf.ByteString getScript();
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.tx_output}
   *
   * <pre>
   *
   * TxOut corresponding object.
   *
   * </pre>
   */
  public static final class tx_output extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.tx_output)
      tx_outputOrBuilder {
    // Use tx_output.newBuilder() to construct.
    private tx_output(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private tx_output(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final tx_output defaultInstance;
    public static tx_output getDefaultInstance() {
      return defaultInstance;
    }

    public tx_output getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private tx_output(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              value_ = input.readUInt64();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              script_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_output_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_output_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.tx_output.class, libbitcoin.protocol.Interface.tx_output.Builder.class);
    }

    public static com.google.protobuf.Parser<tx_output> PARSER =
        new com.google.protobuf.AbstractParser<tx_output>() {
      public tx_output parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new tx_output(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<tx_output> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int VALUE_FIELD_NUMBER = 1;
    private long value_;
    /**
     * <code>required uint64 value = 1;</code>
     */
    public boolean hasValue() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint64 value = 1;</code>
     */
    public long getValue() {
      return value_;
    }

    public static final int SCRIPT_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString script_;
    /**
     * <code>required bytes script = 2;</code>
     */
    public boolean hasScript() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required bytes script = 2;</code>
     */
    public com.google.protobuf.ByteString getScript() {
      return script_;
    }

    private void initFields() {
      value_ = 0L;
      script_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasValue()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasScript()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt64(1, value_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, script_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(1, value_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, script_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.tx_output parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.tx_output parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx_output parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.tx_output parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx_output parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.tx_output parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx_output parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.tx_output parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx_output parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.tx_output parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.tx_output prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.tx_output}
     *
     * <pre>
     *
     * TxOut corresponding object.
     *
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.tx_output)
        libbitcoin.protocol.Interface.tx_outputOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_output_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_output_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.tx_output.class, libbitcoin.protocol.Interface.tx_output.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.tx_output.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        value_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000001);
        script_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_output_descriptor;
      }

      public libbitcoin.protocol.Interface.tx_output getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.tx_output.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.tx_output build() {
        libbitcoin.protocol.Interface.tx_output result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.tx_output buildPartial() {
        libbitcoin.protocol.Interface.tx_output result = new libbitcoin.protocol.Interface.tx_output(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.value_ = value_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.script_ = script_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.tx_output) {
          return mergeFrom((libbitcoin.protocol.Interface.tx_output)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.tx_output other) {
        if (other == libbitcoin.protocol.Interface.tx_output.getDefaultInstance()) return this;
        if (other.hasValue()) {
          setValue(other.getValue());
        }
        if (other.hasScript()) {
          setScript(other.getScript());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasValue()) {
          
          return false;
        }
        if (!hasScript()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.tx_output parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.tx_output) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private long value_ ;
      /**
       * <code>required uint64 value = 1;</code>
       */
      public boolean hasValue() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint64 value = 1;</code>
       */
      public long getValue() {
        return value_;
      }
      /**
       * <code>required uint64 value = 1;</code>
       */
      public Builder setValue(long value) {
        bitField0_ |= 0x00000001;
        value_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 value = 1;</code>
       */
      public Builder clearValue() {
        bitField0_ = (bitField0_ & ~0x00000001);
        value_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString script_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes script = 2;</code>
       */
      public boolean hasScript() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required bytes script = 2;</code>
       */
      public com.google.protobuf.ByteString getScript() {
        return script_;
      }
      /**
       * <code>required bytes script = 2;</code>
       */
      public Builder setScript(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        script_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes script = 2;</code>
       */
      public Builder clearScript() {
        bitField0_ = (bitField0_ & ~0x00000002);
        script_ = getDefaultInstance().getScript();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.tx_output)
    }

    static {
      defaultInstance = new tx_output(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.tx_output)
  }

  public interface txOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.tx)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 version = 1;</code>
     */
    boolean hasVersion();
    /**
     * <code>required uint32 version = 1;</code>
     */
    int getVersion();

    /**
     * <code>required uint32 locktime = 2;</code>
     */
    boolean hasLocktime();
    /**
     * <code>required uint32 locktime = 2;</code>
     */
    int getLocktime();

    /**
     * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
     */
    java.util.List<libbitcoin.protocol.Interface.tx_input> 
        getInputsList();
    /**
     * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
     */
    libbitcoin.protocol.Interface.tx_input getInputs(int index);
    /**
     * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
     */
    int getInputsCount();
    /**
     * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
     */
    java.util.List<? extends libbitcoin.protocol.Interface.tx_inputOrBuilder> 
        getInputsOrBuilderList();
    /**
     * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
     */
    libbitcoin.protocol.Interface.tx_inputOrBuilder getInputsOrBuilder(
        int index);

    /**
     * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
     */
    java.util.List<libbitcoin.protocol.Interface.tx_output> 
        getOutputsList();
    /**
     * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
     */
    libbitcoin.protocol.Interface.tx_output getOutputs(int index);
    /**
     * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
     */
    int getOutputsCount();
    /**
     * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
     */
    java.util.List<? extends libbitcoin.protocol.Interface.tx_outputOrBuilder> 
        getOutputsOrBuilderList();
    /**
     * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
     */
    libbitcoin.protocol.Interface.tx_outputOrBuilder getOutputsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.tx}
   *
   * <pre>
   *
   * Transaction
   *
   * </pre>
   */
  public static final class tx extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.tx)
      txOrBuilder {
    // Use tx.newBuilder() to construct.
    private tx(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private tx(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final tx defaultInstance;
    public static tx getDefaultInstance() {
      return defaultInstance;
    }

    public tx getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private tx(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              version_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              locktime_ = input.readUInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                inputs_ = new java.util.ArrayList<libbitcoin.protocol.Interface.tx_input>();
                mutable_bitField0_ |= 0x00000004;
              }
              inputs_.add(input.readMessage(libbitcoin.protocol.Interface.tx_input.PARSER, extensionRegistry));
              break;
            }
            case 34: {
              if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                outputs_ = new java.util.ArrayList<libbitcoin.protocol.Interface.tx_output>();
                mutable_bitField0_ |= 0x00000008;
              }
              outputs_.add(input.readMessage(libbitcoin.protocol.Interface.tx_output.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          inputs_ = java.util.Collections.unmodifiableList(inputs_);
        }
        if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
          outputs_ = java.util.Collections.unmodifiableList(outputs_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.tx.class, libbitcoin.protocol.Interface.tx.Builder.class);
    }

    public static com.google.protobuf.Parser<tx> PARSER =
        new com.google.protobuf.AbstractParser<tx>() {
      public tx parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new tx(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<tx> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int VERSION_FIELD_NUMBER = 1;
    private int version_;
    /**
     * <code>required uint32 version = 1;</code>
     */
    public boolean hasVersion() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 version = 1;</code>
     */
    public int getVersion() {
      return version_;
    }

    public static final int LOCKTIME_FIELD_NUMBER = 2;
    private int locktime_;
    /**
     * <code>required uint32 locktime = 2;</code>
     */
    public boolean hasLocktime() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint32 locktime = 2;</code>
     */
    public int getLocktime() {
      return locktime_;
    }

    public static final int INPUTS_FIELD_NUMBER = 3;
    private java.util.List<libbitcoin.protocol.Interface.tx_input> inputs_;
    /**
     * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
     */
    public java.util.List<libbitcoin.protocol.Interface.tx_input> getInputsList() {
      return inputs_;
    }
    /**
     * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
     */
    public java.util.List<? extends libbitcoin.protocol.Interface.tx_inputOrBuilder> 
        getInputsOrBuilderList() {
      return inputs_;
    }
    /**
     * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
     */
    public int getInputsCount() {
      return inputs_.size();
    }
    /**
     * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
     */
    public libbitcoin.protocol.Interface.tx_input getInputs(int index) {
      return inputs_.get(index);
    }
    /**
     * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
     */
    public libbitcoin.protocol.Interface.tx_inputOrBuilder getInputsOrBuilder(
        int index) {
      return inputs_.get(index);
    }

    public static final int OUTPUTS_FIELD_NUMBER = 4;
    private java.util.List<libbitcoin.protocol.Interface.tx_output> outputs_;
    /**
     * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
     */
    public java.util.List<libbitcoin.protocol.Interface.tx_output> getOutputsList() {
      return outputs_;
    }
    /**
     * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
     */
    public java.util.List<? extends libbitcoin.protocol.Interface.tx_outputOrBuilder> 
        getOutputsOrBuilderList() {
      return outputs_;
    }
    /**
     * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
     */
    public int getOutputsCount() {
      return outputs_.size();
    }
    /**
     * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
     */
    public libbitcoin.protocol.Interface.tx_output getOutputs(int index) {
      return outputs_.get(index);
    }
    /**
     * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
     */
    public libbitcoin.protocol.Interface.tx_outputOrBuilder getOutputsOrBuilder(
        int index) {
      return outputs_.get(index);
    }

    private void initFields() {
      version_ = 0;
      locktime_ = 0;
      inputs_ = java.util.Collections.emptyList();
      outputs_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasVersion()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLocktime()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getInputsCount(); i++) {
        if (!getInputs(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      for (int i = 0; i < getOutputsCount(); i++) {
        if (!getOutputs(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, version_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, locktime_);
      }
      for (int i = 0; i < inputs_.size(); i++) {
        output.writeMessage(3, inputs_.get(i));
      }
      for (int i = 0; i < outputs_.size(); i++) {
        output.writeMessage(4, outputs_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, version_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, locktime_);
      }
      for (int i = 0; i < inputs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, inputs_.get(i));
      }
      for (int i = 0; i < outputs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, outputs_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.tx parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.tx parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.tx parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.tx parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.tx parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.tx parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.tx prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.tx}
     *
     * <pre>
     *
     * Transaction
     *
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.tx)
        libbitcoin.protocol.Interface.txOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.tx.class, libbitcoin.protocol.Interface.tx.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.tx.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getInputsFieldBuilder();
          getOutputsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        version_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        locktime_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (inputsBuilder_ == null) {
          inputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          inputsBuilder_.clear();
        }
        if (outputsBuilder_ == null) {
          outputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
        } else {
          outputsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_descriptor;
      }

      public libbitcoin.protocol.Interface.tx getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.tx.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.tx build() {
        libbitcoin.protocol.Interface.tx result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.tx buildPartial() {
        libbitcoin.protocol.Interface.tx result = new libbitcoin.protocol.Interface.tx(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.version_ = version_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.locktime_ = locktime_;
        if (inputsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            inputs_ = java.util.Collections.unmodifiableList(inputs_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.inputs_ = inputs_;
        } else {
          result.inputs_ = inputsBuilder_.build();
        }
        if (outputsBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008)) {
            outputs_ = java.util.Collections.unmodifiableList(outputs_);
            bitField0_ = (bitField0_ & ~0x00000008);
          }
          result.outputs_ = outputs_;
        } else {
          result.outputs_ = outputsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.tx) {
          return mergeFrom((libbitcoin.protocol.Interface.tx)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.tx other) {
        if (other == libbitcoin.protocol.Interface.tx.getDefaultInstance()) return this;
        if (other.hasVersion()) {
          setVersion(other.getVersion());
        }
        if (other.hasLocktime()) {
          setLocktime(other.getLocktime());
        }
        if (inputsBuilder_ == null) {
          if (!other.inputs_.isEmpty()) {
            if (inputs_.isEmpty()) {
              inputs_ = other.inputs_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureInputsIsMutable();
              inputs_.addAll(other.inputs_);
            }
            onChanged();
          }
        } else {
          if (!other.inputs_.isEmpty()) {
            if (inputsBuilder_.isEmpty()) {
              inputsBuilder_.dispose();
              inputsBuilder_ = null;
              inputs_ = other.inputs_;
              bitField0_ = (bitField0_ & ~0x00000004);
              inputsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getInputsFieldBuilder() : null;
            } else {
              inputsBuilder_.addAllMessages(other.inputs_);
            }
          }
        }
        if (outputsBuilder_ == null) {
          if (!other.outputs_.isEmpty()) {
            if (outputs_.isEmpty()) {
              outputs_ = other.outputs_;
              bitField0_ = (bitField0_ & ~0x00000008);
            } else {
              ensureOutputsIsMutable();
              outputs_.addAll(other.outputs_);
            }
            onChanged();
          }
        } else {
          if (!other.outputs_.isEmpty()) {
            if (outputsBuilder_.isEmpty()) {
              outputsBuilder_.dispose();
              outputsBuilder_ = null;
              outputs_ = other.outputs_;
              bitField0_ = (bitField0_ & ~0x00000008);
              outputsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutputsFieldBuilder() : null;
            } else {
              outputsBuilder_.addAllMessages(other.outputs_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasVersion()) {
          
          return false;
        }
        if (!hasLocktime()) {
          
          return false;
        }
        for (int i = 0; i < getInputsCount(); i++) {
          if (!getInputs(i).isInitialized()) {
            
            return false;
          }
        }
        for (int i = 0; i < getOutputsCount(); i++) {
          if (!getOutputs(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.tx parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.tx) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int version_ ;
      /**
       * <code>required uint32 version = 1;</code>
       */
      public boolean hasVersion() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 version = 1;</code>
       */
      public int getVersion() {
        return version_;
      }
      /**
       * <code>required uint32 version = 1;</code>
       */
      public Builder setVersion(int value) {
        bitField0_ |= 0x00000001;
        version_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 version = 1;</code>
       */
      public Builder clearVersion() {
        bitField0_ = (bitField0_ & ~0x00000001);
        version_ = 0;
        onChanged();
        return this;
      }

      private int locktime_ ;
      /**
       * <code>required uint32 locktime = 2;</code>
       */
      public boolean hasLocktime() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint32 locktime = 2;</code>
       */
      public int getLocktime() {
        return locktime_;
      }
      /**
       * <code>required uint32 locktime = 2;</code>
       */
      public Builder setLocktime(int value) {
        bitField0_ |= 0x00000002;
        locktime_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 locktime = 2;</code>
       */
      public Builder clearLocktime() {
        bitField0_ = (bitField0_ & ~0x00000002);
        locktime_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<libbitcoin.protocol.Interface.tx_input> inputs_ =
        java.util.Collections.emptyList();
      private void ensureInputsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          inputs_ = new java.util.ArrayList<libbitcoin.protocol.Interface.tx_input>(inputs_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          libbitcoin.protocol.Interface.tx_input, libbitcoin.protocol.Interface.tx_input.Builder, libbitcoin.protocol.Interface.tx_inputOrBuilder> inputsBuilder_;

      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public java.util.List<libbitcoin.protocol.Interface.tx_input> getInputsList() {
        if (inputsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(inputs_);
        } else {
          return inputsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public int getInputsCount() {
        if (inputsBuilder_ == null) {
          return inputs_.size();
        } else {
          return inputsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public libbitcoin.protocol.Interface.tx_input getInputs(int index) {
        if (inputsBuilder_ == null) {
          return inputs_.get(index);
        } else {
          return inputsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public Builder setInputs(
          int index, libbitcoin.protocol.Interface.tx_input value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.set(index, value);
          onChanged();
        } else {
          inputsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public Builder setInputs(
          int index, libbitcoin.protocol.Interface.tx_input.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.set(index, builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public Builder addInputs(libbitcoin.protocol.Interface.tx_input value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.add(value);
          onChanged();
        } else {
          inputsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public Builder addInputs(
          int index, libbitcoin.protocol.Interface.tx_input value) {
        if (inputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureInputsIsMutable();
          inputs_.add(index, value);
          onChanged();
        } else {
          inputsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public Builder addInputs(
          libbitcoin.protocol.Interface.tx_input.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.add(builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public Builder addInputs(
          int index, libbitcoin.protocol.Interface.tx_input.Builder builderForValue) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.add(index, builderForValue.build());
          onChanged();
        } else {
          inputsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public Builder addAllInputs(
          java.lang.Iterable<? extends libbitcoin.protocol.Interface.tx_input> values) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, inputs_);
          onChanged();
        } else {
          inputsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public Builder clearInputs() {
        if (inputsBuilder_ == null) {
          inputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          inputsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public Builder removeInputs(int index) {
        if (inputsBuilder_ == null) {
          ensureInputsIsMutable();
          inputs_.remove(index);
          onChanged();
        } else {
          inputsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public libbitcoin.protocol.Interface.tx_input.Builder getInputsBuilder(
          int index) {
        return getInputsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public libbitcoin.protocol.Interface.tx_inputOrBuilder getInputsOrBuilder(
          int index) {
        if (inputsBuilder_ == null) {
          return inputs_.get(index);  } else {
          return inputsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public java.util.List<? extends libbitcoin.protocol.Interface.tx_inputOrBuilder> 
           getInputsOrBuilderList() {
        if (inputsBuilder_ != null) {
          return inputsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(inputs_);
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public libbitcoin.protocol.Interface.tx_input.Builder addInputsBuilder() {
        return getInputsFieldBuilder().addBuilder(
            libbitcoin.protocol.Interface.tx_input.getDefaultInstance());
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public libbitcoin.protocol.Interface.tx_input.Builder addInputsBuilder(
          int index) {
        return getInputsFieldBuilder().addBuilder(
            index, libbitcoin.protocol.Interface.tx_input.getDefaultInstance());
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_input inputs = 3;</code>
       */
      public java.util.List<libbitcoin.protocol.Interface.tx_input.Builder> 
           getInputsBuilderList() {
        return getInputsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          libbitcoin.protocol.Interface.tx_input, libbitcoin.protocol.Interface.tx_input.Builder, libbitcoin.protocol.Interface.tx_inputOrBuilder> 
          getInputsFieldBuilder() {
        if (inputsBuilder_ == null) {
          inputsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              libbitcoin.protocol.Interface.tx_input, libbitcoin.protocol.Interface.tx_input.Builder, libbitcoin.protocol.Interface.tx_inputOrBuilder>(
                  inputs_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          inputs_ = null;
        }
        return inputsBuilder_;
      }

      private java.util.List<libbitcoin.protocol.Interface.tx_output> outputs_ =
        java.util.Collections.emptyList();
      private void ensureOutputsIsMutable() {
        if (!((bitField0_ & 0x00000008) == 0x00000008)) {
          outputs_ = new java.util.ArrayList<libbitcoin.protocol.Interface.tx_output>(outputs_);
          bitField0_ |= 0x00000008;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          libbitcoin.protocol.Interface.tx_output, libbitcoin.protocol.Interface.tx_output.Builder, libbitcoin.protocol.Interface.tx_outputOrBuilder> outputsBuilder_;

      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public java.util.List<libbitcoin.protocol.Interface.tx_output> getOutputsList() {
        if (outputsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outputs_);
        } else {
          return outputsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public int getOutputsCount() {
        if (outputsBuilder_ == null) {
          return outputs_.size();
        } else {
          return outputsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public libbitcoin.protocol.Interface.tx_output getOutputs(int index) {
        if (outputsBuilder_ == null) {
          return outputs_.get(index);
        } else {
          return outputsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public Builder setOutputs(
          int index, libbitcoin.protocol.Interface.tx_output value) {
        if (outputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutputsIsMutable();
          outputs_.set(index, value);
          onChanged();
        } else {
          outputsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public Builder setOutputs(
          int index, libbitcoin.protocol.Interface.tx_output.Builder builderForValue) {
        if (outputsBuilder_ == null) {
          ensureOutputsIsMutable();
          outputs_.set(index, builderForValue.build());
          onChanged();
        } else {
          outputsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public Builder addOutputs(libbitcoin.protocol.Interface.tx_output value) {
        if (outputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutputsIsMutable();
          outputs_.add(value);
          onChanged();
        } else {
          outputsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public Builder addOutputs(
          int index, libbitcoin.protocol.Interface.tx_output value) {
        if (outputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutputsIsMutable();
          outputs_.add(index, value);
          onChanged();
        } else {
          outputsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public Builder addOutputs(
          libbitcoin.protocol.Interface.tx_output.Builder builderForValue) {
        if (outputsBuilder_ == null) {
          ensureOutputsIsMutable();
          outputs_.add(builderForValue.build());
          onChanged();
        } else {
          outputsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public Builder addOutputs(
          int index, libbitcoin.protocol.Interface.tx_output.Builder builderForValue) {
        if (outputsBuilder_ == null) {
          ensureOutputsIsMutable();
          outputs_.add(index, builderForValue.build());
          onChanged();
        } else {
          outputsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public Builder addAllOutputs(
          java.lang.Iterable<? extends libbitcoin.protocol.Interface.tx_output> values) {
        if (outputsBuilder_ == null) {
          ensureOutputsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, outputs_);
          onChanged();
        } else {
          outputsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public Builder clearOutputs() {
        if (outputsBuilder_ == null) {
          outputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000008);
          onChanged();
        } else {
          outputsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public Builder removeOutputs(int index) {
        if (outputsBuilder_ == null) {
          ensureOutputsIsMutable();
          outputs_.remove(index);
          onChanged();
        } else {
          outputsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public libbitcoin.protocol.Interface.tx_output.Builder getOutputsBuilder(
          int index) {
        return getOutputsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public libbitcoin.protocol.Interface.tx_outputOrBuilder getOutputsOrBuilder(
          int index) {
        if (outputsBuilder_ == null) {
          return outputs_.get(index);  } else {
          return outputsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public java.util.List<? extends libbitcoin.protocol.Interface.tx_outputOrBuilder> 
           getOutputsOrBuilderList() {
        if (outputsBuilder_ != null) {
          return outputsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outputs_);
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public libbitcoin.protocol.Interface.tx_output.Builder addOutputsBuilder() {
        return getOutputsFieldBuilder().addBuilder(
            libbitcoin.protocol.Interface.tx_output.getDefaultInstance());
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public libbitcoin.protocol.Interface.tx_output.Builder addOutputsBuilder(
          int index) {
        return getOutputsFieldBuilder().addBuilder(
            index, libbitcoin.protocol.Interface.tx_output.getDefaultInstance());
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_output outputs = 4;</code>
       */
      public java.util.List<libbitcoin.protocol.Interface.tx_output.Builder> 
           getOutputsBuilderList() {
        return getOutputsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          libbitcoin.protocol.Interface.tx_output, libbitcoin.protocol.Interface.tx_output.Builder, libbitcoin.protocol.Interface.tx_outputOrBuilder> 
          getOutputsFieldBuilder() {
        if (outputsBuilder_ == null) {
          outputsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              libbitcoin.protocol.Interface.tx_output, libbitcoin.protocol.Interface.tx_output.Builder, libbitcoin.protocol.Interface.tx_outputOrBuilder>(
                  outputs_,
                  ((bitField0_ & 0x00000008) == 0x00000008),
                  getParentForChildren(),
                  isClean());
          outputs_ = null;
        }
        return outputsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.tx)
    }

    static {
      defaultInstance = new tx(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.tx)
  }

  public interface blockOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.block)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .libbitcoin.protocol.block_header header = 1;</code>
     */
    boolean hasHeader();
    /**
     * <code>required .libbitcoin.protocol.block_header header = 1;</code>
     */
    libbitcoin.protocol.Interface.block_header getHeader();
    /**
     * <code>required .libbitcoin.protocol.block_header header = 1;</code>
     */
    libbitcoin.protocol.Interface.block_headerOrBuilder getHeaderOrBuilder();

    /**
     * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
     */
    java.util.List<libbitcoin.protocol.Interface.tx> 
        getTransactionsList();
    /**
     * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
     */
    libbitcoin.protocol.Interface.tx getTransactions(int index);
    /**
     * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
     */
    int getTransactionsCount();
    /**
     * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
     */
    java.util.List<? extends libbitcoin.protocol.Interface.txOrBuilder> 
        getTransactionsOrBuilderList();
    /**
     * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
     */
    libbitcoin.protocol.Interface.txOrBuilder getTransactionsOrBuilder(
        int index);

    /**
     * <code>repeated bytes tree = 3;</code>
     */
    java.util.List<com.google.protobuf.ByteString> getTreeList();
    /**
     * <code>repeated bytes tree = 3;</code>
     */
    int getTreeCount();
    /**
     * <code>repeated bytes tree = 3;</code>
     */
    com.google.protobuf.ByteString getTree(int index);
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.block}
   *
   * <pre>
   *
   * Block
   *
   * </pre>
   */
  public static final class block extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.block)
      blockOrBuilder {
    // Use block.newBuilder() to construct.
    private block(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private block(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final block defaultInstance;
    public static block getDefaultInstance() {
      return defaultInstance;
    }

    public block getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private block(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              libbitcoin.protocol.Interface.block_header.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = header_.toBuilder();
              }
              header_ = input.readMessage(libbitcoin.protocol.Interface.block_header.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(header_);
                header_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              if (!((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
                transactions_ = new java.util.ArrayList<libbitcoin.protocol.Interface.tx>();
                mutable_bitField0_ |= 0x00000002;
              }
              transactions_.add(input.readMessage(libbitcoin.protocol.Interface.tx.PARSER, extensionRegistry));
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                tree_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000004;
              }
              tree_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000002) == 0x00000002)) {
          transactions_ = java.util.Collections.unmodifiableList(transactions_);
        }
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          tree_ = java.util.Collections.unmodifiableList(tree_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.block.class, libbitcoin.protocol.Interface.block.Builder.class);
    }

    public static com.google.protobuf.Parser<block> PARSER =
        new com.google.protobuf.AbstractParser<block>() {
      public block parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new block(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<block> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int HEADER_FIELD_NUMBER = 1;
    private libbitcoin.protocol.Interface.block_header header_;
    /**
     * <code>required .libbitcoin.protocol.block_header header = 1;</code>
     */
    public boolean hasHeader() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .libbitcoin.protocol.block_header header = 1;</code>
     */
    public libbitcoin.protocol.Interface.block_header getHeader() {
      return header_;
    }
    /**
     * <code>required .libbitcoin.protocol.block_header header = 1;</code>
     */
    public libbitcoin.protocol.Interface.block_headerOrBuilder getHeaderOrBuilder() {
      return header_;
    }

    public static final int TRANSACTIONS_FIELD_NUMBER = 2;
    private java.util.List<libbitcoin.protocol.Interface.tx> transactions_;
    /**
     * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
     */
    public java.util.List<libbitcoin.protocol.Interface.tx> getTransactionsList() {
      return transactions_;
    }
    /**
     * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
     */
    public java.util.List<? extends libbitcoin.protocol.Interface.txOrBuilder> 
        getTransactionsOrBuilderList() {
      return transactions_;
    }
    /**
     * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
     */
    public int getTransactionsCount() {
      return transactions_.size();
    }
    /**
     * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
     */
    public libbitcoin.protocol.Interface.tx getTransactions(int index) {
      return transactions_.get(index);
    }
    /**
     * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
     */
    public libbitcoin.protocol.Interface.txOrBuilder getTransactionsOrBuilder(
        int index) {
      return transactions_.get(index);
    }

    public static final int TREE_FIELD_NUMBER = 3;
    private java.util.List<com.google.protobuf.ByteString> tree_;
    /**
     * <code>repeated bytes tree = 3;</code>
     */
    public java.util.List<com.google.protobuf.ByteString>
        getTreeList() {
      return tree_;
    }
    /**
     * <code>repeated bytes tree = 3;</code>
     */
    public int getTreeCount() {
      return tree_.size();
    }
    /**
     * <code>repeated bytes tree = 3;</code>
     */
    public com.google.protobuf.ByteString getTree(int index) {
      return tree_.get(index);
    }

    private void initFields() {
      header_ = libbitcoin.protocol.Interface.block_header.getDefaultInstance();
      transactions_ = java.util.Collections.emptyList();
      tree_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasHeader()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getHeader().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getTransactionsCount(); i++) {
        if (!getTransactions(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, header_);
      }
      for (int i = 0; i < transactions_.size(); i++) {
        output.writeMessage(2, transactions_.get(i));
      }
      for (int i = 0; i < tree_.size(); i++) {
        output.writeBytes(3, tree_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, header_);
      }
      for (int i = 0; i < transactions_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, transactions_.get(i));
      }
      {
        int dataSize = 0;
        for (int i = 0; i < tree_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(tree_.get(i));
        }
        size += dataSize;
        size += 1 * getTreeList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.block parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.block parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.block parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.block parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.block parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.block parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.block prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.block}
     *
     * <pre>
     *
     * Block
     *
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.block)
        libbitcoin.protocol.Interface.blockOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.block.class, libbitcoin.protocol.Interface.block.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.block.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getHeaderFieldBuilder();
          getTransactionsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (headerBuilder_ == null) {
          header_ = libbitcoin.protocol.Interface.block_header.getDefaultInstance();
        } else {
          headerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (transactionsBuilder_ == null) {
          transactions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
        } else {
          transactionsBuilder_.clear();
        }
        tree_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_descriptor;
      }

      public libbitcoin.protocol.Interface.block getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.block.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.block build() {
        libbitcoin.protocol.Interface.block result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.block buildPartial() {
        libbitcoin.protocol.Interface.block result = new libbitcoin.protocol.Interface.block(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (headerBuilder_ == null) {
          result.header_ = header_;
        } else {
          result.header_ = headerBuilder_.build();
        }
        if (transactionsBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002)) {
            transactions_ = java.util.Collections.unmodifiableList(transactions_);
            bitField0_ = (bitField0_ & ~0x00000002);
          }
          result.transactions_ = transactions_;
        } else {
          result.transactions_ = transactionsBuilder_.build();
        }
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          tree_ = java.util.Collections.unmodifiableList(tree_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.tree_ = tree_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.block) {
          return mergeFrom((libbitcoin.protocol.Interface.block)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.block other) {
        if (other == libbitcoin.protocol.Interface.block.getDefaultInstance()) return this;
        if (other.hasHeader()) {
          mergeHeader(other.getHeader());
        }
        if (transactionsBuilder_ == null) {
          if (!other.transactions_.isEmpty()) {
            if (transactions_.isEmpty()) {
              transactions_ = other.transactions_;
              bitField0_ = (bitField0_ & ~0x00000002);
            } else {
              ensureTransactionsIsMutable();
              transactions_.addAll(other.transactions_);
            }
            onChanged();
          }
        } else {
          if (!other.transactions_.isEmpty()) {
            if (transactionsBuilder_.isEmpty()) {
              transactionsBuilder_.dispose();
              transactionsBuilder_ = null;
              transactions_ = other.transactions_;
              bitField0_ = (bitField0_ & ~0x00000002);
              transactionsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getTransactionsFieldBuilder() : null;
            } else {
              transactionsBuilder_.addAllMessages(other.transactions_);
            }
          }
        }
        if (!other.tree_.isEmpty()) {
          if (tree_.isEmpty()) {
            tree_ = other.tree_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureTreeIsMutable();
            tree_.addAll(other.tree_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasHeader()) {
          
          return false;
        }
        if (!getHeader().isInitialized()) {
          
          return false;
        }
        for (int i = 0; i < getTransactionsCount(); i++) {
          if (!getTransactions(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.block parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.block) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private libbitcoin.protocol.Interface.block_header header_ = libbitcoin.protocol.Interface.block_header.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block_header, libbitcoin.protocol.Interface.block_header.Builder, libbitcoin.protocol.Interface.block_headerOrBuilder> headerBuilder_;
      /**
       * <code>required .libbitcoin.protocol.block_header header = 1;</code>
       */
      public boolean hasHeader() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .libbitcoin.protocol.block_header header = 1;</code>
       */
      public libbitcoin.protocol.Interface.block_header getHeader() {
        if (headerBuilder_ == null) {
          return header_;
        } else {
          return headerBuilder_.getMessage();
        }
      }
      /**
       * <code>required .libbitcoin.protocol.block_header header = 1;</code>
       */
      public Builder setHeader(libbitcoin.protocol.Interface.block_header value) {
        if (headerBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          header_ = value;
          onChanged();
        } else {
          headerBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.block_header header = 1;</code>
       */
      public Builder setHeader(
          libbitcoin.protocol.Interface.block_header.Builder builderForValue) {
        if (headerBuilder_ == null) {
          header_ = builderForValue.build();
          onChanged();
        } else {
          headerBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.block_header header = 1;</code>
       */
      public Builder mergeHeader(libbitcoin.protocol.Interface.block_header value) {
        if (headerBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              header_ != libbitcoin.protocol.Interface.block_header.getDefaultInstance()) {
            header_ =
              libbitcoin.protocol.Interface.block_header.newBuilder(header_).mergeFrom(value).buildPartial();
          } else {
            header_ = value;
          }
          onChanged();
        } else {
          headerBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.block_header header = 1;</code>
       */
      public Builder clearHeader() {
        if (headerBuilder_ == null) {
          header_ = libbitcoin.protocol.Interface.block_header.getDefaultInstance();
          onChanged();
        } else {
          headerBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.block_header header = 1;</code>
       */
      public libbitcoin.protocol.Interface.block_header.Builder getHeaderBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getHeaderFieldBuilder().getBuilder();
      }
      /**
       * <code>required .libbitcoin.protocol.block_header header = 1;</code>
       */
      public libbitcoin.protocol.Interface.block_headerOrBuilder getHeaderOrBuilder() {
        if (headerBuilder_ != null) {
          return headerBuilder_.getMessageOrBuilder();
        } else {
          return header_;
        }
      }
      /**
       * <code>required .libbitcoin.protocol.block_header header = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block_header, libbitcoin.protocol.Interface.block_header.Builder, libbitcoin.protocol.Interface.block_headerOrBuilder> 
          getHeaderFieldBuilder() {
        if (headerBuilder_ == null) {
          headerBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.block_header, libbitcoin.protocol.Interface.block_header.Builder, libbitcoin.protocol.Interface.block_headerOrBuilder>(
                  getHeader(),
                  getParentForChildren(),
                  isClean());
          header_ = null;
        }
        return headerBuilder_;
      }

      private java.util.List<libbitcoin.protocol.Interface.tx> transactions_ =
        java.util.Collections.emptyList();
      private void ensureTransactionsIsMutable() {
        if (!((bitField0_ & 0x00000002) == 0x00000002)) {
          transactions_ = new java.util.ArrayList<libbitcoin.protocol.Interface.tx>(transactions_);
          bitField0_ |= 0x00000002;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          libbitcoin.protocol.Interface.tx, libbitcoin.protocol.Interface.tx.Builder, libbitcoin.protocol.Interface.txOrBuilder> transactionsBuilder_;

      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public java.util.List<libbitcoin.protocol.Interface.tx> getTransactionsList() {
        if (transactionsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(transactions_);
        } else {
          return transactionsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public int getTransactionsCount() {
        if (transactionsBuilder_ == null) {
          return transactions_.size();
        } else {
          return transactionsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public libbitcoin.protocol.Interface.tx getTransactions(int index) {
        if (transactionsBuilder_ == null) {
          return transactions_.get(index);
        } else {
          return transactionsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public Builder setTransactions(
          int index, libbitcoin.protocol.Interface.tx value) {
        if (transactionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTransactionsIsMutable();
          transactions_.set(index, value);
          onChanged();
        } else {
          transactionsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public Builder setTransactions(
          int index, libbitcoin.protocol.Interface.tx.Builder builderForValue) {
        if (transactionsBuilder_ == null) {
          ensureTransactionsIsMutable();
          transactions_.set(index, builderForValue.build());
          onChanged();
        } else {
          transactionsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public Builder addTransactions(libbitcoin.protocol.Interface.tx value) {
        if (transactionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTransactionsIsMutable();
          transactions_.add(value);
          onChanged();
        } else {
          transactionsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public Builder addTransactions(
          int index, libbitcoin.protocol.Interface.tx value) {
        if (transactionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureTransactionsIsMutable();
          transactions_.add(index, value);
          onChanged();
        } else {
          transactionsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public Builder addTransactions(
          libbitcoin.protocol.Interface.tx.Builder builderForValue) {
        if (transactionsBuilder_ == null) {
          ensureTransactionsIsMutable();
          transactions_.add(builderForValue.build());
          onChanged();
        } else {
          transactionsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public Builder addTransactions(
          int index, libbitcoin.protocol.Interface.tx.Builder builderForValue) {
        if (transactionsBuilder_ == null) {
          ensureTransactionsIsMutable();
          transactions_.add(index, builderForValue.build());
          onChanged();
        } else {
          transactionsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public Builder addAllTransactions(
          java.lang.Iterable<? extends libbitcoin.protocol.Interface.tx> values) {
        if (transactionsBuilder_ == null) {
          ensureTransactionsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, transactions_);
          onChanged();
        } else {
          transactionsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public Builder clearTransactions() {
        if (transactionsBuilder_ == null) {
          transactions_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000002);
          onChanged();
        } else {
          transactionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public Builder removeTransactions(int index) {
        if (transactionsBuilder_ == null) {
          ensureTransactionsIsMutable();
          transactions_.remove(index);
          onChanged();
        } else {
          transactionsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public libbitcoin.protocol.Interface.tx.Builder getTransactionsBuilder(
          int index) {
        return getTransactionsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public libbitcoin.protocol.Interface.txOrBuilder getTransactionsOrBuilder(
          int index) {
        if (transactionsBuilder_ == null) {
          return transactions_.get(index);  } else {
          return transactionsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public java.util.List<? extends libbitcoin.protocol.Interface.txOrBuilder> 
           getTransactionsOrBuilderList() {
        if (transactionsBuilder_ != null) {
          return transactionsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(transactions_);
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public libbitcoin.protocol.Interface.tx.Builder addTransactionsBuilder() {
        return getTransactionsFieldBuilder().addBuilder(
            libbitcoin.protocol.Interface.tx.getDefaultInstance());
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public libbitcoin.protocol.Interface.tx.Builder addTransactionsBuilder(
          int index) {
        return getTransactionsFieldBuilder().addBuilder(
            index, libbitcoin.protocol.Interface.tx.getDefaultInstance());
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx transactions = 2;</code>
       */
      public java.util.List<libbitcoin.protocol.Interface.tx.Builder> 
           getTransactionsBuilderList() {
        return getTransactionsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          libbitcoin.protocol.Interface.tx, libbitcoin.protocol.Interface.tx.Builder, libbitcoin.protocol.Interface.txOrBuilder> 
          getTransactionsFieldBuilder() {
        if (transactionsBuilder_ == null) {
          transactionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              libbitcoin.protocol.Interface.tx, libbitcoin.protocol.Interface.tx.Builder, libbitcoin.protocol.Interface.txOrBuilder>(
                  transactions_,
                  ((bitField0_ & 0x00000002) == 0x00000002),
                  getParentForChildren(),
                  isClean());
          transactions_ = null;
        }
        return transactionsBuilder_;
      }

      private java.util.List<com.google.protobuf.ByteString> tree_ = java.util.Collections.emptyList();
      private void ensureTreeIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          tree_ = new java.util.ArrayList<com.google.protobuf.ByteString>(tree_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated bytes tree = 3;</code>
       */
      public java.util.List<com.google.protobuf.ByteString>
          getTreeList() {
        return java.util.Collections.unmodifiableList(tree_);
      }
      /**
       * <code>repeated bytes tree = 3;</code>
       */
      public int getTreeCount() {
        return tree_.size();
      }
      /**
       * <code>repeated bytes tree = 3;</code>
       */
      public com.google.protobuf.ByteString getTree(int index) {
        return tree_.get(index);
      }
      /**
       * <code>repeated bytes tree = 3;</code>
       */
      public Builder setTree(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTreeIsMutable();
        tree_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes tree = 3;</code>
       */
      public Builder addTree(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureTreeIsMutable();
        tree_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes tree = 3;</code>
       */
      public Builder addAllTree(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureTreeIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, tree_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes tree = 3;</code>
       */
      public Builder clearTree() {
        tree_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.block)
    }

    static {
      defaultInstance = new block(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.block)
  }

  public interface filterOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.filter)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .libbitcoin.protocol.filters filter_type = 1;</code>
     */
    boolean hasFilterType();
    /**
     * <code>required .libbitcoin.protocol.filters filter_type = 1;</code>
     */
    libbitcoin.protocol.Interface.filters getFilterType();

    /**
     * <code>optional uint32 bits = 2;</code>
     */
    boolean hasBits();
    /**
     * <code>optional uint32 bits = 2;</code>
     */
    int getBits();

    /**
     * <code>required bytes prefix = 3;</code>
     */
    boolean hasPrefix();
    /**
     * <code>required bytes prefix = 3;</code>
     */
    com.google.protobuf.ByteString getPrefix();
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.filter}
   *
   * <pre>
   *
   * Query filter type, allowing prefix matching against addresses,
   * transactions or stealth addresses.
   *
   * </pre>
   */
  public static final class filter extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.filter)
      filterOrBuilder {
    // Use filter.newBuilder() to construct.
    private filter(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private filter(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final filter defaultInstance;
    public static filter getDefaultInstance() {
      return defaultInstance;
    }

    public filter getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private filter(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              int rawValue = input.readEnum();
              libbitcoin.protocol.Interface.filters value = libbitcoin.protocol.Interface.filters.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(1, rawValue);
              } else {
                bitField0_ |= 0x00000001;
                filterType_ = value;
              }
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              bits_ = input.readUInt32();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              prefix_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_filter_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_filter_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.filter.class, libbitcoin.protocol.Interface.filter.Builder.class);
    }

    public static com.google.protobuf.Parser<filter> PARSER =
        new com.google.protobuf.AbstractParser<filter>() {
      public filter parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new filter(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<filter> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int FILTER_TYPE_FIELD_NUMBER = 1;
    private libbitcoin.protocol.Interface.filters filterType_;
    /**
     * <code>required .libbitcoin.protocol.filters filter_type = 1;</code>
     */
    public boolean hasFilterType() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .libbitcoin.protocol.filters filter_type = 1;</code>
     */
    public libbitcoin.protocol.Interface.filters getFilterType() {
      return filterType_;
    }

    public static final int BITS_FIELD_NUMBER = 2;
    private int bits_;
    /**
     * <code>optional uint32 bits = 2;</code>
     */
    public boolean hasBits() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 bits = 2;</code>
     */
    public int getBits() {
      return bits_;
    }

    public static final int PREFIX_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString prefix_;
    /**
     * <code>required bytes prefix = 3;</code>
     */
    public boolean hasPrefix() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bytes prefix = 3;</code>
     */
    public com.google.protobuf.ByteString getPrefix() {
      return prefix_;
    }

    private void initFields() {
      filterType_ = libbitcoin.protocol.Interface.filters.ADDRESS;
      bits_ = 0;
      prefix_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasFilterType()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasPrefix()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeEnum(1, filterType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, bits_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, prefix_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(1, filterType_.getNumber());
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, bits_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, prefix_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.filter parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.filter parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.filter parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.filter parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.filter parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.filter parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.filter parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.filter parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.filter parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.filter parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.filter prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.filter}
     *
     * <pre>
     *
     * Query filter type, allowing prefix matching against addresses,
     * transactions or stealth addresses.
     *
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.filter)
        libbitcoin.protocol.Interface.filterOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_filter_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_filter_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.filter.class, libbitcoin.protocol.Interface.filter.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.filter.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        filterType_ = libbitcoin.protocol.Interface.filters.ADDRESS;
        bitField0_ = (bitField0_ & ~0x00000001);
        bits_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        prefix_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_filter_descriptor;
      }

      public libbitcoin.protocol.Interface.filter getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.filter.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.filter build() {
        libbitcoin.protocol.Interface.filter result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.filter buildPartial() {
        libbitcoin.protocol.Interface.filter result = new libbitcoin.protocol.Interface.filter(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.filterType_ = filterType_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.bits_ = bits_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.prefix_ = prefix_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.filter) {
          return mergeFrom((libbitcoin.protocol.Interface.filter)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.filter other) {
        if (other == libbitcoin.protocol.Interface.filter.getDefaultInstance()) return this;
        if (other.hasFilterType()) {
          setFilterType(other.getFilterType());
        }
        if (other.hasBits()) {
          setBits(other.getBits());
        }
        if (other.hasPrefix()) {
          setPrefix(other.getPrefix());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasFilterType()) {
          
          return false;
        }
        if (!hasPrefix()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.filter parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.filter) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private libbitcoin.protocol.Interface.filters filterType_ = libbitcoin.protocol.Interface.filters.ADDRESS;
      /**
       * <code>required .libbitcoin.protocol.filters filter_type = 1;</code>
       */
      public boolean hasFilterType() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .libbitcoin.protocol.filters filter_type = 1;</code>
       */
      public libbitcoin.protocol.Interface.filters getFilterType() {
        return filterType_;
      }
      /**
       * <code>required .libbitcoin.protocol.filters filter_type = 1;</code>
       */
      public Builder setFilterType(libbitcoin.protocol.Interface.filters value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000001;
        filterType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.filters filter_type = 1;</code>
       */
      public Builder clearFilterType() {
        bitField0_ = (bitField0_ & ~0x00000001);
        filterType_ = libbitcoin.protocol.Interface.filters.ADDRESS;
        onChanged();
        return this;
      }

      private int bits_ ;
      /**
       * <code>optional uint32 bits = 2;</code>
       */
      public boolean hasBits() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 bits = 2;</code>
       */
      public int getBits() {
        return bits_;
      }
      /**
       * <code>optional uint32 bits = 2;</code>
       */
      public Builder setBits(int value) {
        bitField0_ |= 0x00000002;
        bits_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 bits = 2;</code>
       */
      public Builder clearBits() {
        bitField0_ = (bitField0_ & ~0x00000002);
        bits_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString prefix_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes prefix = 3;</code>
       */
      public boolean hasPrefix() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required bytes prefix = 3;</code>
       */
      public com.google.protobuf.ByteString getPrefix() {
        return prefix_;
      }
      /**
       * <code>required bytes prefix = 3;</code>
       */
      public Builder setPrefix(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        prefix_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes prefix = 3;</code>
       */
      public Builder clearPrefix() {
        bitField0_ = (bitField0_ & ~0x00000004);
        prefix_ = getDefaultInstance().getPrefix();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.filter)
    }

    static {
      defaultInstance = new filter(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.filter)
  }

  public interface block_idOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.block_id)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional uint32 height = 1;</code>
     */
    boolean hasHeight();
    /**
     * <code>optional uint32 height = 1;</code>
     */
    int getHeight();

    /**
     * <code>optional bytes hash = 2;</code>
     *
     * <pre>
     * 32-bytes
     * </pre>
     */
    boolean hasHash();
    /**
     * <code>optional bytes hash = 2;</code>
     *
     * <pre>
     * 32-bytes
     * </pre>
     */
    com.google.protobuf.ByteString getHash();
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.block_id}
   *
   * <pre>
   *
   * A block height, hash tuple.
   *
   * </pre>
   */
  public static final class block_id extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.block_id)
      block_idOrBuilder {
    // Use block_id.newBuilder() to construct.
    private block_id(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private block_id(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final block_id defaultInstance;
    public static block_id getDefaultInstance() {
      return defaultInstance;
    }

    public block_id getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private block_id(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              height_ = input.readUInt32();
              break;
            }
            case 18: {
              bitField0_ |= 0x00000002;
              hash_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_id_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_id_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.block_id.class, libbitcoin.protocol.Interface.block_id.Builder.class);
    }

    public static com.google.protobuf.Parser<block_id> PARSER =
        new com.google.protobuf.AbstractParser<block_id>() {
      public block_id parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new block_id(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<block_id> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int HEIGHT_FIELD_NUMBER = 1;
    private int height_;
    /**
     * <code>optional uint32 height = 1;</code>
     */
    public boolean hasHeight() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional uint32 height = 1;</code>
     */
    public int getHeight() {
      return height_;
    }

    public static final int HASH_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString hash_;
    /**
     * <code>optional bytes hash = 2;</code>
     *
     * <pre>
     * 32-bytes
     * </pre>
     */
    public boolean hasHash() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional bytes hash = 2;</code>
     *
     * <pre>
     * 32-bytes
     * </pre>
     */
    public com.google.protobuf.ByteString getHash() {
      return hash_;
    }

    private void initFields() {
      height_ = 0;
      hash_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, height_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, hash_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, height_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, hash_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.block_id parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.block_id parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block_id parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.block_id parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block_id parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.block_id parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block_id parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.block_id parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block_id parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.block_id parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.block_id prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.block_id}
     *
     * <pre>
     *
     * A block height, hash tuple.
     *
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.block_id)
        libbitcoin.protocol.Interface.block_idOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_id_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_id_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.block_id.class, libbitcoin.protocol.Interface.block_id.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.block_id.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        height_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        hash_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_id_descriptor;
      }

      public libbitcoin.protocol.Interface.block_id getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.block_id.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.block_id build() {
        libbitcoin.protocol.Interface.block_id result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.block_id buildPartial() {
        libbitcoin.protocol.Interface.block_id result = new libbitcoin.protocol.Interface.block_id(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.height_ = height_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.hash_ = hash_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.block_id) {
          return mergeFrom((libbitcoin.protocol.Interface.block_id)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.block_id other) {
        if (other == libbitcoin.protocol.Interface.block_id.getDefaultInstance()) return this;
        if (other.hasHeight()) {
          setHeight(other.getHeight());
        }
        if (other.hasHash()) {
          setHash(other.getHash());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.block_id parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.block_id) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int height_ ;
      /**
       * <code>optional uint32 height = 1;</code>
       */
      public boolean hasHeight() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional uint32 height = 1;</code>
       */
      public int getHeight() {
        return height_;
      }
      /**
       * <code>optional uint32 height = 1;</code>
       */
      public Builder setHeight(int value) {
        bitField0_ |= 0x00000001;
        height_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 height = 1;</code>
       */
      public Builder clearHeight() {
        bitField0_ = (bitField0_ & ~0x00000001);
        height_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString hash_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>optional bytes hash = 2;</code>
       *
       * <pre>
       * 32-bytes
       * </pre>
       */
      public boolean hasHash() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional bytes hash = 2;</code>
       *
       * <pre>
       * 32-bytes
       * </pre>
       */
      public com.google.protobuf.ByteString getHash() {
        return hash_;
      }
      /**
       * <code>optional bytes hash = 2;</code>
       *
       * <pre>
       * 32-bytes
       * </pre>
       */
      public Builder setHash(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        hash_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bytes hash = 2;</code>
       *
       * <pre>
       * 32-bytes
       * </pre>
       */
      public Builder clearHash() {
        bitField0_ = (bitField0_ & ~0x00000002);
        hash_ = getDefaultInstance().getHash();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.block_id)
    }

    static {
      defaultInstance = new block_id(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.block_id)
  }

  public interface block_locationOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.block_location)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .libbitcoin.protocol.block_id identity = 1;</code>
     */
    boolean hasIdentity();
    /**
     * <code>optional .libbitcoin.protocol.block_id identity = 1;</code>
     */
    libbitcoin.protocol.Interface.block_id getIdentity();
    /**
     * <code>optional .libbitcoin.protocol.block_id identity = 1;</code>
     */
    libbitcoin.protocol.Interface.block_idOrBuilder getIdentityOrBuilder();

    /**
     * <code>optional uint64 index = 2;</code>
     */
    boolean hasIndex();
    /**
     * <code>optional uint64 index = 2;</code>
     */
    long getIndex();

    /**
     * <code>repeated bytes branch = 3;</code>
     */
    java.util.List<com.google.protobuf.ByteString> getBranchList();
    /**
     * <code>repeated bytes branch = 3;</code>
     */
    int getBranchCount();
    /**
     * <code>repeated bytes branch = 3;</code>
     */
    com.google.protobuf.ByteString getBranch(int index);
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.block_location}
   *
   * <pre>
   *
   * A block identity, merkle branch tuple.
   *
   * </pre>
   */
  public static final class block_location extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.block_location)
      block_locationOrBuilder {
    // Use block_location.newBuilder() to construct.
    private block_location(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private block_location(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final block_location defaultInstance;
    public static block_location getDefaultInstance() {
      return defaultInstance;
    }

    public block_location getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private block_location(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              libbitcoin.protocol.Interface.block_id.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = identity_.toBuilder();
              }
              identity_ = input.readMessage(libbitcoin.protocol.Interface.block_id.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(identity_);
                identity_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              index_ = input.readUInt64();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                branch_ = new java.util.ArrayList<com.google.protobuf.ByteString>();
                mutable_bitField0_ |= 0x00000004;
              }
              branch_.add(input.readBytes());
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          branch_ = java.util.Collections.unmodifiableList(branch_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_location_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_location_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.block_location.class, libbitcoin.protocol.Interface.block_location.Builder.class);
    }

    public static com.google.protobuf.Parser<block_location> PARSER =
        new com.google.protobuf.AbstractParser<block_location>() {
      public block_location parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new block_location(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<block_location> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int IDENTITY_FIELD_NUMBER = 1;
    private libbitcoin.protocol.Interface.block_id identity_;
    /**
     * <code>optional .libbitcoin.protocol.block_id identity = 1;</code>
     */
    public boolean hasIdentity() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .libbitcoin.protocol.block_id identity = 1;</code>
     */
    public libbitcoin.protocol.Interface.block_id getIdentity() {
      return identity_;
    }
    /**
     * <code>optional .libbitcoin.protocol.block_id identity = 1;</code>
     */
    public libbitcoin.protocol.Interface.block_idOrBuilder getIdentityOrBuilder() {
      return identity_;
    }

    public static final int INDEX_FIELD_NUMBER = 2;
    private long index_;
    /**
     * <code>optional uint64 index = 2;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint64 index = 2;</code>
     */
    public long getIndex() {
      return index_;
    }

    public static final int BRANCH_FIELD_NUMBER = 3;
    private java.util.List<com.google.protobuf.ByteString> branch_;
    /**
     * <code>repeated bytes branch = 3;</code>
     */
    public java.util.List<com.google.protobuf.ByteString>
        getBranchList() {
      return branch_;
    }
    /**
     * <code>repeated bytes branch = 3;</code>
     */
    public int getBranchCount() {
      return branch_.size();
    }
    /**
     * <code>repeated bytes branch = 3;</code>
     */
    public com.google.protobuf.ByteString getBranch(int index) {
      return branch_.get(index);
    }

    private void initFields() {
      identity_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
      index_ = 0L;
      branch_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, identity_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, index_);
      }
      for (int i = 0; i < branch_.size(); i++) {
        output.writeBytes(3, branch_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, identity_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, index_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < branch_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeBytesSizeNoTag(branch_.get(i));
        }
        size += dataSize;
        size += 1 * getBranchList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.block_location parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.block_location parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block_location parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.block_location parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block_location parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.block_location parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block_location parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.block_location parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block_location parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.block_location parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.block_location prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.block_location}
     *
     * <pre>
     *
     * A block identity, merkle branch tuple.
     *
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.block_location)
        libbitcoin.protocol.Interface.block_locationOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_location_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_location_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.block_location.class, libbitcoin.protocol.Interface.block_location.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.block_location.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getIdentityFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (identityBuilder_ == null) {
          identity_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
        } else {
          identityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        branch_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_location_descriptor;
      }

      public libbitcoin.protocol.Interface.block_location getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.block_location.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.block_location build() {
        libbitcoin.protocol.Interface.block_location result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.block_location buildPartial() {
        libbitcoin.protocol.Interface.block_location result = new libbitcoin.protocol.Interface.block_location(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (identityBuilder_ == null) {
          result.identity_ = identity_;
        } else {
          result.identity_ = identityBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.index_ = index_;
        if (((bitField0_ & 0x00000004) == 0x00000004)) {
          branch_ = java.util.Collections.unmodifiableList(branch_);
          bitField0_ = (bitField0_ & ~0x00000004);
        }
        result.branch_ = branch_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.block_location) {
          return mergeFrom((libbitcoin.protocol.Interface.block_location)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.block_location other) {
        if (other == libbitcoin.protocol.Interface.block_location.getDefaultInstance()) return this;
        if (other.hasIdentity()) {
          mergeIdentity(other.getIdentity());
        }
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (!other.branch_.isEmpty()) {
          if (branch_.isEmpty()) {
            branch_ = other.branch_;
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            ensureBranchIsMutable();
            branch_.addAll(other.branch_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.block_location parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.block_location) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private libbitcoin.protocol.Interface.block_id identity_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder> identityBuilder_;
      /**
       * <code>optional .libbitcoin.protocol.block_id identity = 1;</code>
       */
      public boolean hasIdentity() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id identity = 1;</code>
       */
      public libbitcoin.protocol.Interface.block_id getIdentity() {
        if (identityBuilder_ == null) {
          return identity_;
        } else {
          return identityBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id identity = 1;</code>
       */
      public Builder setIdentity(libbitcoin.protocol.Interface.block_id value) {
        if (identityBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          identity_ = value;
          onChanged();
        } else {
          identityBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id identity = 1;</code>
       */
      public Builder setIdentity(
          libbitcoin.protocol.Interface.block_id.Builder builderForValue) {
        if (identityBuilder_ == null) {
          identity_ = builderForValue.build();
          onChanged();
        } else {
          identityBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id identity = 1;</code>
       */
      public Builder mergeIdentity(libbitcoin.protocol.Interface.block_id value) {
        if (identityBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              identity_ != libbitcoin.protocol.Interface.block_id.getDefaultInstance()) {
            identity_ =
              libbitcoin.protocol.Interface.block_id.newBuilder(identity_).mergeFrom(value).buildPartial();
          } else {
            identity_ = value;
          }
          onChanged();
        } else {
          identityBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id identity = 1;</code>
       */
      public Builder clearIdentity() {
        if (identityBuilder_ == null) {
          identity_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
          onChanged();
        } else {
          identityBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id identity = 1;</code>
       */
      public libbitcoin.protocol.Interface.block_id.Builder getIdentityBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getIdentityFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id identity = 1;</code>
       */
      public libbitcoin.protocol.Interface.block_idOrBuilder getIdentityOrBuilder() {
        if (identityBuilder_ != null) {
          return identityBuilder_.getMessageOrBuilder();
        } else {
          return identity_;
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id identity = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder> 
          getIdentityFieldBuilder() {
        if (identityBuilder_ == null) {
          identityBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder>(
                  getIdentity(),
                  getParentForChildren(),
                  isClean());
          identity_ = null;
        }
        return identityBuilder_;
      }

      private long index_ ;
      /**
       * <code>optional uint64 index = 2;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint64 index = 2;</code>
       */
      public long getIndex() {
        return index_;
      }
      /**
       * <code>optional uint64 index = 2;</code>
       */
      public Builder setIndex(long value) {
        bitField0_ |= 0x00000002;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint64 index = 2;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000002);
        index_ = 0L;
        onChanged();
        return this;
      }

      private java.util.List<com.google.protobuf.ByteString> branch_ = java.util.Collections.emptyList();
      private void ensureBranchIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          branch_ = new java.util.ArrayList<com.google.protobuf.ByteString>(branch_);
          bitField0_ |= 0x00000004;
         }
      }
      /**
       * <code>repeated bytes branch = 3;</code>
       */
      public java.util.List<com.google.protobuf.ByteString>
          getBranchList() {
        return java.util.Collections.unmodifiableList(branch_);
      }
      /**
       * <code>repeated bytes branch = 3;</code>
       */
      public int getBranchCount() {
        return branch_.size();
      }
      /**
       * <code>repeated bytes branch = 3;</code>
       */
      public com.google.protobuf.ByteString getBranch(int index) {
        return branch_.get(index);
      }
      /**
       * <code>repeated bytes branch = 3;</code>
       */
      public Builder setBranch(
          int index, com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBranchIsMutable();
        branch_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes branch = 3;</code>
       */
      public Builder addBranch(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBranchIsMutable();
        branch_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes branch = 3;</code>
       */
      public Builder addAllBranch(
          java.lang.Iterable<? extends com.google.protobuf.ByteString> values) {
        ensureBranchIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, branch_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated bytes branch = 3;</code>
       */
      public Builder clearBranch() {
        branch_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000004);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.block_location)
    }

    static {
      defaultInstance = new block_location(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.block_location)
  }

  public interface tx_hash_resultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.tx_hash_result)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required bytes hash = 1;</code>
     */
    boolean hasHash();
    /**
     * <code>required bytes hash = 1;</code>
     */
    com.google.protobuf.ByteString getHash();

    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    boolean hasLocation();
    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    libbitcoin.protocol.Interface.block_location getLocation();
    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    libbitcoin.protocol.Interface.block_locationOrBuilder getLocationOrBuilder();
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.tx_hash_result}
   *
   * <pre>
   *
   * Minimal transaction identification query response,
   * meant to correspond with request.transactions.results.TX_HASH
   * query result_type.
   *
   * </pre>
   */
  public static final class tx_hash_result extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.tx_hash_result)
      tx_hash_resultOrBuilder {
    // Use tx_hash_result.newBuilder() to construct.
    private tx_hash_result(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private tx_hash_result(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final tx_hash_result defaultInstance;
    public static tx_hash_result getDefaultInstance() {
      return defaultInstance;
    }

    public tx_hash_result getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private tx_hash_result(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              hash_ = input.readBytes();
              break;
            }
            case 18: {
              libbitcoin.protocol.Interface.block_location.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = location_.toBuilder();
              }
              location_ = input.readMessage(libbitcoin.protocol.Interface.block_location.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(location_);
                location_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_hash_result_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_hash_result_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.tx_hash_result.class, libbitcoin.protocol.Interface.tx_hash_result.Builder.class);
    }

    public static com.google.protobuf.Parser<tx_hash_result> PARSER =
        new com.google.protobuf.AbstractParser<tx_hash_result>() {
      public tx_hash_result parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new tx_hash_result(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<tx_hash_result> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int HASH_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString hash_;
    /**
     * <code>required bytes hash = 1;</code>
     */
    public boolean hasHash() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bytes hash = 1;</code>
     */
    public com.google.protobuf.ByteString getHash() {
      return hash_;
    }

    public static final int LOCATION_FIELD_NUMBER = 2;
    private libbitcoin.protocol.Interface.block_location location_;
    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    public libbitcoin.protocol.Interface.block_location getLocation() {
      return location_;
    }
    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    public libbitcoin.protocol.Interface.block_locationOrBuilder getLocationOrBuilder() {
      return location_;
    }

    private void initFields() {
      hash_ = com.google.protobuf.ByteString.EMPTY;
      location_ = libbitcoin.protocol.Interface.block_location.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasHash()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLocation()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, hash_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, location_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, hash_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, location_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.tx_hash_result parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.tx_hash_result parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx_hash_result parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.tx_hash_result parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx_hash_result parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.tx_hash_result parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx_hash_result parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.tx_hash_result parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx_hash_result parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.tx_hash_result parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.tx_hash_result prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.tx_hash_result}
     *
     * <pre>
     *
     * Minimal transaction identification query response,
     * meant to correspond with request.transactions.results.TX_HASH
     * query result_type.
     *
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.tx_hash_result)
        libbitcoin.protocol.Interface.tx_hash_resultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_hash_result_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_hash_result_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.tx_hash_result.class, libbitcoin.protocol.Interface.tx_hash_result.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.tx_hash_result.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLocationFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        hash_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (locationBuilder_ == null) {
          location_ = libbitcoin.protocol.Interface.block_location.getDefaultInstance();
        } else {
          locationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_hash_result_descriptor;
      }

      public libbitcoin.protocol.Interface.tx_hash_result getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.tx_hash_result.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.tx_hash_result build() {
        libbitcoin.protocol.Interface.tx_hash_result result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.tx_hash_result buildPartial() {
        libbitcoin.protocol.Interface.tx_hash_result result = new libbitcoin.protocol.Interface.tx_hash_result(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.hash_ = hash_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (locationBuilder_ == null) {
          result.location_ = location_;
        } else {
          result.location_ = locationBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.tx_hash_result) {
          return mergeFrom((libbitcoin.protocol.Interface.tx_hash_result)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.tx_hash_result other) {
        if (other == libbitcoin.protocol.Interface.tx_hash_result.getDefaultInstance()) return this;
        if (other.hasHash()) {
          setHash(other.getHash());
        }
        if (other.hasLocation()) {
          mergeLocation(other.getLocation());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasHash()) {
          
          return false;
        }
        if (!hasLocation()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.tx_hash_result parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.tx_hash_result) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString hash_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes hash = 1;</code>
       */
      public boolean hasHash() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bytes hash = 1;</code>
       */
      public com.google.protobuf.ByteString getHash() {
        return hash_;
      }
      /**
       * <code>required bytes hash = 1;</code>
       */
      public Builder setHash(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        hash_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes hash = 1;</code>
       */
      public Builder clearHash() {
        bitField0_ = (bitField0_ & ~0x00000001);
        hash_ = getDefaultInstance().getHash();
        onChanged();
        return this;
      }

      private libbitcoin.protocol.Interface.block_location location_ = libbitcoin.protocol.Interface.block_location.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block_location, libbitcoin.protocol.Interface.block_location.Builder, libbitcoin.protocol.Interface.block_locationOrBuilder> locationBuilder_;
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public boolean hasLocation() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public libbitcoin.protocol.Interface.block_location getLocation() {
        if (locationBuilder_ == null) {
          return location_;
        } else {
          return locationBuilder_.getMessage();
        }
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public Builder setLocation(libbitcoin.protocol.Interface.block_location value) {
        if (locationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          location_ = value;
          onChanged();
        } else {
          locationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public Builder setLocation(
          libbitcoin.protocol.Interface.block_location.Builder builderForValue) {
        if (locationBuilder_ == null) {
          location_ = builderForValue.build();
          onChanged();
        } else {
          locationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public Builder mergeLocation(libbitcoin.protocol.Interface.block_location value) {
        if (locationBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              location_ != libbitcoin.protocol.Interface.block_location.getDefaultInstance()) {
            location_ =
              libbitcoin.protocol.Interface.block_location.newBuilder(location_).mergeFrom(value).buildPartial();
          } else {
            location_ = value;
          }
          onChanged();
        } else {
          locationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public Builder clearLocation() {
        if (locationBuilder_ == null) {
          location_ = libbitcoin.protocol.Interface.block_location.getDefaultInstance();
          onChanged();
        } else {
          locationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public libbitcoin.protocol.Interface.block_location.Builder getLocationBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getLocationFieldBuilder().getBuilder();
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public libbitcoin.protocol.Interface.block_locationOrBuilder getLocationOrBuilder() {
        if (locationBuilder_ != null) {
          return locationBuilder_.getMessageOrBuilder();
        } else {
          return location_;
        }
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block_location, libbitcoin.protocol.Interface.block_location.Builder, libbitcoin.protocol.Interface.block_locationOrBuilder> 
          getLocationFieldBuilder() {
        if (locationBuilder_ == null) {
          locationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.block_location, libbitcoin.protocol.Interface.block_location.Builder, libbitcoin.protocol.Interface.block_locationOrBuilder>(
                  getLocation(),
                  getParentForChildren(),
                  isClean());
          location_ = null;
        }
        return locationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.tx_hash_result)
    }

    static {
      defaultInstance = new tx_hash_result(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.tx_hash_result)
  }

  public interface tx_resultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.tx_result)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required .libbitcoin.protocol.tx transaction = 1;</code>
     */
    boolean hasTransaction();
    /**
     * <code>required .libbitcoin.protocol.tx transaction = 1;</code>
     */
    libbitcoin.protocol.Interface.tx getTransaction();
    /**
     * <code>required .libbitcoin.protocol.tx transaction = 1;</code>
     */
    libbitcoin.protocol.Interface.txOrBuilder getTransactionOrBuilder();

    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    boolean hasLocation();
    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    libbitcoin.protocol.Interface.block_location getLocation();
    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    libbitcoin.protocol.Interface.block_locationOrBuilder getLocationOrBuilder();
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.tx_result}
   *
   * <pre>
   *
   * Full transaction instance query response,
   * meant to correspond with request.transactions.results.TX_RESULT
   * query result_type.
   *
   * </pre>
   */
  public static final class tx_result extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.tx_result)
      tx_resultOrBuilder {
    // Use tx_result.newBuilder() to construct.
    private tx_result(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private tx_result(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final tx_result defaultInstance;
    public static tx_result getDefaultInstance() {
      return defaultInstance;
    }

    public tx_result getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private tx_result(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              libbitcoin.protocol.Interface.tx.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = transaction_.toBuilder();
              }
              transaction_ = input.readMessage(libbitcoin.protocol.Interface.tx.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(transaction_);
                transaction_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              libbitcoin.protocol.Interface.block_location.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = location_.toBuilder();
              }
              location_ = input.readMessage(libbitcoin.protocol.Interface.block_location.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(location_);
                location_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_result_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_result_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.tx_result.class, libbitcoin.protocol.Interface.tx_result.Builder.class);
    }

    public static com.google.protobuf.Parser<tx_result> PARSER =
        new com.google.protobuf.AbstractParser<tx_result>() {
      public tx_result parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new tx_result(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<tx_result> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TRANSACTION_FIELD_NUMBER = 1;
    private libbitcoin.protocol.Interface.tx transaction_;
    /**
     * <code>required .libbitcoin.protocol.tx transaction = 1;</code>
     */
    public boolean hasTransaction() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required .libbitcoin.protocol.tx transaction = 1;</code>
     */
    public libbitcoin.protocol.Interface.tx getTransaction() {
      return transaction_;
    }
    /**
     * <code>required .libbitcoin.protocol.tx transaction = 1;</code>
     */
    public libbitcoin.protocol.Interface.txOrBuilder getTransactionOrBuilder() {
      return transaction_;
    }

    public static final int LOCATION_FIELD_NUMBER = 2;
    private libbitcoin.protocol.Interface.block_location location_;
    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    public libbitcoin.protocol.Interface.block_location getLocation() {
      return location_;
    }
    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    public libbitcoin.protocol.Interface.block_locationOrBuilder getLocationOrBuilder() {
      return location_;
    }

    private void initFields() {
      transaction_ = libbitcoin.protocol.Interface.tx.getDefaultInstance();
      location_ = libbitcoin.protocol.Interface.block_location.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTransaction()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLocation()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!getTransaction().isInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, transaction_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, location_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, transaction_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, location_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.tx_result parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.tx_result parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx_result parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.tx_result parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx_result parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.tx_result parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx_result parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.tx_result parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.tx_result parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.tx_result parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.tx_result prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.tx_result}
     *
     * <pre>
     *
     * Full transaction instance query response,
     * meant to correspond with request.transactions.results.TX_RESULT
     * query result_type.
     *
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.tx_result)
        libbitcoin.protocol.Interface.tx_resultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_result_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_result_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.tx_result.class, libbitcoin.protocol.Interface.tx_result.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.tx_result.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getTransactionFieldBuilder();
          getLocationFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (transactionBuilder_ == null) {
          transaction_ = libbitcoin.protocol.Interface.tx.getDefaultInstance();
        } else {
          transactionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (locationBuilder_ == null) {
          location_ = libbitcoin.protocol.Interface.block_location.getDefaultInstance();
        } else {
          locationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_tx_result_descriptor;
      }

      public libbitcoin.protocol.Interface.tx_result getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.tx_result.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.tx_result build() {
        libbitcoin.protocol.Interface.tx_result result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.tx_result buildPartial() {
        libbitcoin.protocol.Interface.tx_result result = new libbitcoin.protocol.Interface.tx_result(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (transactionBuilder_ == null) {
          result.transaction_ = transaction_;
        } else {
          result.transaction_ = transactionBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (locationBuilder_ == null) {
          result.location_ = location_;
        } else {
          result.location_ = locationBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.tx_result) {
          return mergeFrom((libbitcoin.protocol.Interface.tx_result)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.tx_result other) {
        if (other == libbitcoin.protocol.Interface.tx_result.getDefaultInstance()) return this;
        if (other.hasTransaction()) {
          mergeTransaction(other.getTransaction());
        }
        if (other.hasLocation()) {
          mergeLocation(other.getLocation());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTransaction()) {
          
          return false;
        }
        if (!hasLocation()) {
          
          return false;
        }
        if (!getTransaction().isInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.tx_result parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.tx_result) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private libbitcoin.protocol.Interface.tx transaction_ = libbitcoin.protocol.Interface.tx.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.tx, libbitcoin.protocol.Interface.tx.Builder, libbitcoin.protocol.Interface.txOrBuilder> transactionBuilder_;
      /**
       * <code>required .libbitcoin.protocol.tx transaction = 1;</code>
       */
      public boolean hasTransaction() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required .libbitcoin.protocol.tx transaction = 1;</code>
       */
      public libbitcoin.protocol.Interface.tx getTransaction() {
        if (transactionBuilder_ == null) {
          return transaction_;
        } else {
          return transactionBuilder_.getMessage();
        }
      }
      /**
       * <code>required .libbitcoin.protocol.tx transaction = 1;</code>
       */
      public Builder setTransaction(libbitcoin.protocol.Interface.tx value) {
        if (transactionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          transaction_ = value;
          onChanged();
        } else {
          transactionBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.tx transaction = 1;</code>
       */
      public Builder setTransaction(
          libbitcoin.protocol.Interface.tx.Builder builderForValue) {
        if (transactionBuilder_ == null) {
          transaction_ = builderForValue.build();
          onChanged();
        } else {
          transactionBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.tx transaction = 1;</code>
       */
      public Builder mergeTransaction(libbitcoin.protocol.Interface.tx value) {
        if (transactionBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              transaction_ != libbitcoin.protocol.Interface.tx.getDefaultInstance()) {
            transaction_ =
              libbitcoin.protocol.Interface.tx.newBuilder(transaction_).mergeFrom(value).buildPartial();
          } else {
            transaction_ = value;
          }
          onChanged();
        } else {
          transactionBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.tx transaction = 1;</code>
       */
      public Builder clearTransaction() {
        if (transactionBuilder_ == null) {
          transaction_ = libbitcoin.protocol.Interface.tx.getDefaultInstance();
          onChanged();
        } else {
          transactionBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.tx transaction = 1;</code>
       */
      public libbitcoin.protocol.Interface.tx.Builder getTransactionBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getTransactionFieldBuilder().getBuilder();
      }
      /**
       * <code>required .libbitcoin.protocol.tx transaction = 1;</code>
       */
      public libbitcoin.protocol.Interface.txOrBuilder getTransactionOrBuilder() {
        if (transactionBuilder_ != null) {
          return transactionBuilder_.getMessageOrBuilder();
        } else {
          return transaction_;
        }
      }
      /**
       * <code>required .libbitcoin.protocol.tx transaction = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.tx, libbitcoin.protocol.Interface.tx.Builder, libbitcoin.protocol.Interface.txOrBuilder> 
          getTransactionFieldBuilder() {
        if (transactionBuilder_ == null) {
          transactionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.tx, libbitcoin.protocol.Interface.tx.Builder, libbitcoin.protocol.Interface.txOrBuilder>(
                  getTransaction(),
                  getParentForChildren(),
                  isClean());
          transaction_ = null;
        }
        return transactionBuilder_;
      }

      private libbitcoin.protocol.Interface.block_location location_ = libbitcoin.protocol.Interface.block_location.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block_location, libbitcoin.protocol.Interface.block_location.Builder, libbitcoin.protocol.Interface.block_locationOrBuilder> locationBuilder_;
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public boolean hasLocation() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public libbitcoin.protocol.Interface.block_location getLocation() {
        if (locationBuilder_ == null) {
          return location_;
        } else {
          return locationBuilder_.getMessage();
        }
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public Builder setLocation(libbitcoin.protocol.Interface.block_location value) {
        if (locationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          location_ = value;
          onChanged();
        } else {
          locationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public Builder setLocation(
          libbitcoin.protocol.Interface.block_location.Builder builderForValue) {
        if (locationBuilder_ == null) {
          location_ = builderForValue.build();
          onChanged();
        } else {
          locationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public Builder mergeLocation(libbitcoin.protocol.Interface.block_location value) {
        if (locationBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              location_ != libbitcoin.protocol.Interface.block_location.getDefaultInstance()) {
            location_ =
              libbitcoin.protocol.Interface.block_location.newBuilder(location_).mergeFrom(value).buildPartial();
          } else {
            location_ = value;
          }
          onChanged();
        } else {
          locationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public Builder clearLocation() {
        if (locationBuilder_ == null) {
          location_ = libbitcoin.protocol.Interface.block_location.getDefaultInstance();
          onChanged();
        } else {
          locationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public libbitcoin.protocol.Interface.block_location.Builder getLocationBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getLocationFieldBuilder().getBuilder();
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public libbitcoin.protocol.Interface.block_locationOrBuilder getLocationOrBuilder() {
        if (locationBuilder_ != null) {
          return locationBuilder_.getMessageOrBuilder();
        } else {
          return location_;
        }
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block_location, libbitcoin.protocol.Interface.block_location.Builder, libbitcoin.protocol.Interface.block_locationOrBuilder> 
          getLocationFieldBuilder() {
        if (locationBuilder_ == null) {
          locationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.block_location, libbitcoin.protocol.Interface.block_location.Builder, libbitcoin.protocol.Interface.block_locationOrBuilder>(
                  getLocation(),
                  getParentForChildren(),
                  isClean());
          location_ = null;
        }
        return locationBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.tx_result)
    }

    static {
      defaultInstance = new tx_result(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.tx_result)
  }

  public interface outputOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.output)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required uint32 index = 1;</code>
     */
    boolean hasIndex();
    /**
     * <code>required uint32 index = 1;</code>
     */
    int getIndex();

    /**
     * <code>required uint64 satoshis = 2;</code>
     */
    boolean hasSatoshis();
    /**
     * <code>required uint64 satoshis = 2;</code>
     */
    long getSatoshis();

    /**
     * <code>required bytes script = 3;</code>
     */
    boolean hasScript();
    /**
     * <code>required bytes script = 3;</code>
     */
    com.google.protobuf.ByteString getScript();
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.output}
   *
   * <pre>
   *
   * A transaction output.
   *
   * </pre>
   */
  public static final class output extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.output)
      outputOrBuilder {
    // Use output.newBuilder() to construct.
    private output(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private output(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final output defaultInstance;
    public static output getDefaultInstance() {
      return defaultInstance;
    }

    public output getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private output(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              index_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              satoshis_ = input.readUInt64();
              break;
            }
            case 26: {
              bitField0_ |= 0x00000004;
              script_ = input.readBytes();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_output_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_output_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.output.class, libbitcoin.protocol.Interface.output.Builder.class);
    }

    public static com.google.protobuf.Parser<output> PARSER =
        new com.google.protobuf.AbstractParser<output>() {
      public output parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new output(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<output> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int INDEX_FIELD_NUMBER = 1;
    private int index_;
    /**
     * <code>required uint32 index = 1;</code>
     */
    public boolean hasIndex() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 index = 1;</code>
     */
    public int getIndex() {
      return index_;
    }

    public static final int SATOSHIS_FIELD_NUMBER = 2;
    private long satoshis_;
    /**
     * <code>required uint64 satoshis = 2;</code>
     */
    public boolean hasSatoshis() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required uint64 satoshis = 2;</code>
     */
    public long getSatoshis() {
      return satoshis_;
    }

    public static final int SCRIPT_FIELD_NUMBER = 3;
    private com.google.protobuf.ByteString script_;
    /**
     * <code>required bytes script = 3;</code>
     */
    public boolean hasScript() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>required bytes script = 3;</code>
     */
    public com.google.protobuf.ByteString getScript() {
      return script_;
    }

    private void initFields() {
      index_ = 0;
      satoshis_ = 0L;
      script_ = com.google.protobuf.ByteString.EMPTY;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasIndex()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasSatoshis()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasScript()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt64(2, satoshis_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeBytes(3, script_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, index_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt64Size(2, satoshis_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(3, script_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.output parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.output parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.output parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.output parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.output parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.output parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.output parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.output parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.output parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.output parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.output prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.output}
     *
     * <pre>
     *
     * A transaction output.
     *
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.output)
        libbitcoin.protocol.Interface.outputOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_output_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_output_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.output.class, libbitcoin.protocol.Interface.output.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.output.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        index_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        satoshis_ = 0L;
        bitField0_ = (bitField0_ & ~0x00000002);
        script_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_output_descriptor;
      }

      public libbitcoin.protocol.Interface.output getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.output.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.output build() {
        libbitcoin.protocol.Interface.output result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.output buildPartial() {
        libbitcoin.protocol.Interface.output result = new libbitcoin.protocol.Interface.output(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.index_ = index_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.satoshis_ = satoshis_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.script_ = script_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.output) {
          return mergeFrom((libbitcoin.protocol.Interface.output)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.output other) {
        if (other == libbitcoin.protocol.Interface.output.getDefaultInstance()) return this;
        if (other.hasIndex()) {
          setIndex(other.getIndex());
        }
        if (other.hasSatoshis()) {
          setSatoshis(other.getSatoshis());
        }
        if (other.hasScript()) {
          setScript(other.getScript());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasIndex()) {
          
          return false;
        }
        if (!hasSatoshis()) {
          
          return false;
        }
        if (!hasScript()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.output parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.output) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int index_ ;
      /**
       * <code>required uint32 index = 1;</code>
       */
      public boolean hasIndex() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 index = 1;</code>
       */
      public int getIndex() {
        return index_;
      }
      /**
       * <code>required uint32 index = 1;</code>
       */
      public Builder setIndex(int value) {
        bitField0_ |= 0x00000001;
        index_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 index = 1;</code>
       */
      public Builder clearIndex() {
        bitField0_ = (bitField0_ & ~0x00000001);
        index_ = 0;
        onChanged();
        return this;
      }

      private long satoshis_ ;
      /**
       * <code>required uint64 satoshis = 2;</code>
       */
      public boolean hasSatoshis() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required uint64 satoshis = 2;</code>
       */
      public long getSatoshis() {
        return satoshis_;
      }
      /**
       * <code>required uint64 satoshis = 2;</code>
       */
      public Builder setSatoshis(long value) {
        bitField0_ |= 0x00000002;
        satoshis_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint64 satoshis = 2;</code>
       */
      public Builder clearSatoshis() {
        bitField0_ = (bitField0_ & ~0x00000002);
        satoshis_ = 0L;
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString script_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes script = 3;</code>
       */
      public boolean hasScript() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>required bytes script = 3;</code>
       */
      public com.google.protobuf.ByteString getScript() {
        return script_;
      }
      /**
       * <code>required bytes script = 3;</code>
       */
      public Builder setScript(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000004;
        script_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes script = 3;</code>
       */
      public Builder clearScript() {
        bitField0_ = (bitField0_ & ~0x00000004);
        script_ = getDefaultInstance().getScript();
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.output)
    }

    static {
      defaultInstance = new output(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.output)
  }

  public interface utxo_resultOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.utxo_result)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>required bytes tx_hash = 1;</code>
     */
    boolean hasTxHash();
    /**
     * <code>required bytes tx_hash = 1;</code>
     */
    com.google.protobuf.ByteString getTxHash();

    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    boolean hasLocation();
    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    libbitcoin.protocol.Interface.block_location getLocation();
    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    libbitcoin.protocol.Interface.block_locationOrBuilder getLocationOrBuilder();

    /**
     * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
     */
    java.util.List<libbitcoin.protocol.Interface.output> 
        getOutputsList();
    /**
     * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
     */
    libbitcoin.protocol.Interface.output getOutputs(int index);
    /**
     * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
     */
    int getOutputsCount();
    /**
     * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
     */
    java.util.List<? extends libbitcoin.protocol.Interface.outputOrBuilder> 
        getOutputsOrBuilderList();
    /**
     * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
     */
    libbitcoin.protocol.Interface.outputOrBuilder getOutputsOrBuilder(
        int index);
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.utxo_result}
   *
   * <pre>
   *
   * Unspent transaction output query response,
   * meant to correspond with request.transactions.results.UTXO_RESULT
   * query result_type.
   *
   * </pre>
   */
  public static final class utxo_result extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.utxo_result)
      utxo_resultOrBuilder {
    // Use utxo_result.newBuilder() to construct.
    private utxo_result(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private utxo_result(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final utxo_result defaultInstance;
    public static utxo_result getDefaultInstance() {
      return defaultInstance;
    }

    public utxo_result getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private utxo_result(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              bitField0_ |= 0x00000001;
              txHash_ = input.readBytes();
              break;
            }
            case 18: {
              libbitcoin.protocol.Interface.block_location.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = location_.toBuilder();
              }
              location_ = input.readMessage(libbitcoin.protocol.Interface.block_location.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(location_);
                location_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                outputs_ = new java.util.ArrayList<libbitcoin.protocol.Interface.output>();
                mutable_bitField0_ |= 0x00000004;
              }
              outputs_.add(input.readMessage(libbitcoin.protocol.Interface.output.PARSER, extensionRegistry));
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          outputs_ = java.util.Collections.unmodifiableList(outputs_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_utxo_result_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_utxo_result_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.utxo_result.class, libbitcoin.protocol.Interface.utxo_result.Builder.class);
    }

    public static com.google.protobuf.Parser<utxo_result> PARSER =
        new com.google.protobuf.AbstractParser<utxo_result>() {
      public utxo_result parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new utxo_result(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<utxo_result> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int TX_HASH_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString txHash_;
    /**
     * <code>required bytes tx_hash = 1;</code>
     */
    public boolean hasTxHash() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required bytes tx_hash = 1;</code>
     */
    public com.google.protobuf.ByteString getTxHash() {
      return txHash_;
    }

    public static final int LOCATION_FIELD_NUMBER = 2;
    private libbitcoin.protocol.Interface.block_location location_;
    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    public boolean hasLocation() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    public libbitcoin.protocol.Interface.block_location getLocation() {
      return location_;
    }
    /**
     * <code>required .libbitcoin.protocol.block_location location = 2;</code>
     */
    public libbitcoin.protocol.Interface.block_locationOrBuilder getLocationOrBuilder() {
      return location_;
    }

    public static final int OUTPUTS_FIELD_NUMBER = 3;
    private java.util.List<libbitcoin.protocol.Interface.output> outputs_;
    /**
     * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
     */
    public java.util.List<libbitcoin.protocol.Interface.output> getOutputsList() {
      return outputs_;
    }
    /**
     * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
     */
    public java.util.List<? extends libbitcoin.protocol.Interface.outputOrBuilder> 
        getOutputsOrBuilderList() {
      return outputs_;
    }
    /**
     * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
     */
    public int getOutputsCount() {
      return outputs_.size();
    }
    /**
     * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
     */
    public libbitcoin.protocol.Interface.output getOutputs(int index) {
      return outputs_.get(index);
    }
    /**
     * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
     */
    public libbitcoin.protocol.Interface.outputOrBuilder getOutputsOrBuilder(
        int index) {
      return outputs_.get(index);
    }

    private void initFields() {
      txHash_ = com.google.protobuf.ByteString.EMPTY;
      location_ = libbitcoin.protocol.Interface.block_location.getDefaultInstance();
      outputs_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasTxHash()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (!hasLocation()) {
        memoizedIsInitialized = 0;
        return false;
      }
      for (int i = 0; i < getOutputsCount(); i++) {
        if (!getOutputs(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeBytes(1, txHash_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, location_);
      }
      for (int i = 0; i < outputs_.size(); i++) {
        output.writeMessage(3, outputs_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, txHash_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, location_);
      }
      for (int i = 0; i < outputs_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, outputs_.get(i));
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.utxo_result parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.utxo_result parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.utxo_result parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.utxo_result parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.utxo_result parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.utxo_result parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.utxo_result parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.utxo_result parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.utxo_result parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.utxo_result parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.utxo_result prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.utxo_result}
     *
     * <pre>
     *
     * Unspent transaction output query response,
     * meant to correspond with request.transactions.results.UTXO_RESULT
     * query result_type.
     *
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.utxo_result)
        libbitcoin.protocol.Interface.utxo_resultOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_utxo_result_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_utxo_result_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.utxo_result.class, libbitcoin.protocol.Interface.utxo_result.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.utxo_result.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getLocationFieldBuilder();
          getOutputsFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        txHash_ = com.google.protobuf.ByteString.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        if (locationBuilder_ == null) {
          location_ = libbitcoin.protocol.Interface.block_location.getDefaultInstance();
        } else {
          locationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (outputsBuilder_ == null) {
          outputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          outputsBuilder_.clear();
        }
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_utxo_result_descriptor;
      }

      public libbitcoin.protocol.Interface.utxo_result getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.utxo_result.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.utxo_result build() {
        libbitcoin.protocol.Interface.utxo_result result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.utxo_result buildPartial() {
        libbitcoin.protocol.Interface.utxo_result result = new libbitcoin.protocol.Interface.utxo_result(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.txHash_ = txHash_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (locationBuilder_ == null) {
          result.location_ = location_;
        } else {
          result.location_ = locationBuilder_.build();
        }
        if (outputsBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            outputs_ = java.util.Collections.unmodifiableList(outputs_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.outputs_ = outputs_;
        } else {
          result.outputs_ = outputsBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.utxo_result) {
          return mergeFrom((libbitcoin.protocol.Interface.utxo_result)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.utxo_result other) {
        if (other == libbitcoin.protocol.Interface.utxo_result.getDefaultInstance()) return this;
        if (other.hasTxHash()) {
          setTxHash(other.getTxHash());
        }
        if (other.hasLocation()) {
          mergeLocation(other.getLocation());
        }
        if (outputsBuilder_ == null) {
          if (!other.outputs_.isEmpty()) {
            if (outputs_.isEmpty()) {
              outputs_ = other.outputs_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureOutputsIsMutable();
              outputs_.addAll(other.outputs_);
            }
            onChanged();
          }
        } else {
          if (!other.outputs_.isEmpty()) {
            if (outputsBuilder_.isEmpty()) {
              outputsBuilder_.dispose();
              outputsBuilder_ = null;
              outputs_ = other.outputs_;
              bitField0_ = (bitField0_ & ~0x00000004);
              outputsBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getOutputsFieldBuilder() : null;
            } else {
              outputsBuilder_.addAllMessages(other.outputs_);
            }
          }
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasTxHash()) {
          
          return false;
        }
        if (!hasLocation()) {
          
          return false;
        }
        for (int i = 0; i < getOutputsCount(); i++) {
          if (!getOutputs(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.utxo_result parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.utxo_result) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private com.google.protobuf.ByteString txHash_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <code>required bytes tx_hash = 1;</code>
       */
      public boolean hasTxHash() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required bytes tx_hash = 1;</code>
       */
      public com.google.protobuf.ByteString getTxHash() {
        return txHash_;
      }
      /**
       * <code>required bytes tx_hash = 1;</code>
       */
      public Builder setTxHash(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000001;
        txHash_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required bytes tx_hash = 1;</code>
       */
      public Builder clearTxHash() {
        bitField0_ = (bitField0_ & ~0x00000001);
        txHash_ = getDefaultInstance().getTxHash();
        onChanged();
        return this;
      }

      private libbitcoin.protocol.Interface.block_location location_ = libbitcoin.protocol.Interface.block_location.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block_location, libbitcoin.protocol.Interface.block_location.Builder, libbitcoin.protocol.Interface.block_locationOrBuilder> locationBuilder_;
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public boolean hasLocation() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public libbitcoin.protocol.Interface.block_location getLocation() {
        if (locationBuilder_ == null) {
          return location_;
        } else {
          return locationBuilder_.getMessage();
        }
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public Builder setLocation(libbitcoin.protocol.Interface.block_location value) {
        if (locationBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          location_ = value;
          onChanged();
        } else {
          locationBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public Builder setLocation(
          libbitcoin.protocol.Interface.block_location.Builder builderForValue) {
        if (locationBuilder_ == null) {
          location_ = builderForValue.build();
          onChanged();
        } else {
          locationBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public Builder mergeLocation(libbitcoin.protocol.Interface.block_location value) {
        if (locationBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              location_ != libbitcoin.protocol.Interface.block_location.getDefaultInstance()) {
            location_ =
              libbitcoin.protocol.Interface.block_location.newBuilder(location_).mergeFrom(value).buildPartial();
          } else {
            location_ = value;
          }
          onChanged();
        } else {
          locationBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public Builder clearLocation() {
        if (locationBuilder_ == null) {
          location_ = libbitcoin.protocol.Interface.block_location.getDefaultInstance();
          onChanged();
        } else {
          locationBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public libbitcoin.protocol.Interface.block_location.Builder getLocationBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getLocationFieldBuilder().getBuilder();
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      public libbitcoin.protocol.Interface.block_locationOrBuilder getLocationOrBuilder() {
        if (locationBuilder_ != null) {
          return locationBuilder_.getMessageOrBuilder();
        } else {
          return location_;
        }
      }
      /**
       * <code>required .libbitcoin.protocol.block_location location = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block_location, libbitcoin.protocol.Interface.block_location.Builder, libbitcoin.protocol.Interface.block_locationOrBuilder> 
          getLocationFieldBuilder() {
        if (locationBuilder_ == null) {
          locationBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.block_location, libbitcoin.protocol.Interface.block_location.Builder, libbitcoin.protocol.Interface.block_locationOrBuilder>(
                  getLocation(),
                  getParentForChildren(),
                  isClean());
          location_ = null;
        }
        return locationBuilder_;
      }

      private java.util.List<libbitcoin.protocol.Interface.output> outputs_ =
        java.util.Collections.emptyList();
      private void ensureOutputsIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          outputs_ = new java.util.ArrayList<libbitcoin.protocol.Interface.output>(outputs_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          libbitcoin.protocol.Interface.output, libbitcoin.protocol.Interface.output.Builder, libbitcoin.protocol.Interface.outputOrBuilder> outputsBuilder_;

      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public java.util.List<libbitcoin.protocol.Interface.output> getOutputsList() {
        if (outputsBuilder_ == null) {
          return java.util.Collections.unmodifiableList(outputs_);
        } else {
          return outputsBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public int getOutputsCount() {
        if (outputsBuilder_ == null) {
          return outputs_.size();
        } else {
          return outputsBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public libbitcoin.protocol.Interface.output getOutputs(int index) {
        if (outputsBuilder_ == null) {
          return outputs_.get(index);
        } else {
          return outputsBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public Builder setOutputs(
          int index, libbitcoin.protocol.Interface.output value) {
        if (outputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutputsIsMutable();
          outputs_.set(index, value);
          onChanged();
        } else {
          outputsBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public Builder setOutputs(
          int index, libbitcoin.protocol.Interface.output.Builder builderForValue) {
        if (outputsBuilder_ == null) {
          ensureOutputsIsMutable();
          outputs_.set(index, builderForValue.build());
          onChanged();
        } else {
          outputsBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public Builder addOutputs(libbitcoin.protocol.Interface.output value) {
        if (outputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutputsIsMutable();
          outputs_.add(value);
          onChanged();
        } else {
          outputsBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public Builder addOutputs(
          int index, libbitcoin.protocol.Interface.output value) {
        if (outputsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureOutputsIsMutable();
          outputs_.add(index, value);
          onChanged();
        } else {
          outputsBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public Builder addOutputs(
          libbitcoin.protocol.Interface.output.Builder builderForValue) {
        if (outputsBuilder_ == null) {
          ensureOutputsIsMutable();
          outputs_.add(builderForValue.build());
          onChanged();
        } else {
          outputsBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public Builder addOutputs(
          int index, libbitcoin.protocol.Interface.output.Builder builderForValue) {
        if (outputsBuilder_ == null) {
          ensureOutputsIsMutable();
          outputs_.add(index, builderForValue.build());
          onChanged();
        } else {
          outputsBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public Builder addAllOutputs(
          java.lang.Iterable<? extends libbitcoin.protocol.Interface.output> values) {
        if (outputsBuilder_ == null) {
          ensureOutputsIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, outputs_);
          onChanged();
        } else {
          outputsBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public Builder clearOutputs() {
        if (outputsBuilder_ == null) {
          outputs_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          outputsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public Builder removeOutputs(int index) {
        if (outputsBuilder_ == null) {
          ensureOutputsIsMutable();
          outputs_.remove(index);
          onChanged();
        } else {
          outputsBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public libbitcoin.protocol.Interface.output.Builder getOutputsBuilder(
          int index) {
        return getOutputsFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public libbitcoin.protocol.Interface.outputOrBuilder getOutputsOrBuilder(
          int index) {
        if (outputsBuilder_ == null) {
          return outputs_.get(index);  } else {
          return outputsBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public java.util.List<? extends libbitcoin.protocol.Interface.outputOrBuilder> 
           getOutputsOrBuilderList() {
        if (outputsBuilder_ != null) {
          return outputsBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(outputs_);
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public libbitcoin.protocol.Interface.output.Builder addOutputsBuilder() {
        return getOutputsFieldBuilder().addBuilder(
            libbitcoin.protocol.Interface.output.getDefaultInstance());
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public libbitcoin.protocol.Interface.output.Builder addOutputsBuilder(
          int index) {
        return getOutputsFieldBuilder().addBuilder(
            index, libbitcoin.protocol.Interface.output.getDefaultInstance());
      }
      /**
       * <code>repeated .libbitcoin.protocol.output outputs = 3;</code>
       */
      public java.util.List<libbitcoin.protocol.Interface.output.Builder> 
           getOutputsBuilderList() {
        return getOutputsFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          libbitcoin.protocol.Interface.output, libbitcoin.protocol.Interface.output.Builder, libbitcoin.protocol.Interface.outputOrBuilder> 
          getOutputsFieldBuilder() {
        if (outputsBuilder_ == null) {
          outputsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              libbitcoin.protocol.Interface.output, libbitcoin.protocol.Interface.output.Builder, libbitcoin.protocol.Interface.outputOrBuilder>(
                  outputs_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          outputs_ = null;
        }
        return outputsBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.utxo_result)
    }

    static {
      defaultInstance = new utxo_result(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.utxo_result)
  }

  public interface block_headers_requestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.block_headers_request)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
     */
    boolean hasStart();
    /**
     * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
     */
    libbitcoin.protocol.Interface.block_id getStart();
    /**
     * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
     */
    libbitcoin.protocol.Interface.block_idOrBuilder getStartOrBuilder();

    /**
     * <code>optional uint32 results_per_page = 2;</code>
     */
    boolean hasResultsPerPage();
    /**
     * <code>optional uint32 results_per_page = 2;</code>
     */
    int getResultsPerPage();
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.block_headers_request}
   */
  public static final class block_headers_request extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.block_headers_request)
      block_headers_requestOrBuilder {
    // Use block_headers_request.newBuilder() to construct.
    private block_headers_request(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private block_headers_request(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final block_headers_request defaultInstance;
    public static block_headers_request getDefaultInstance() {
      return defaultInstance;
    }

    public block_headers_request getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private block_headers_request(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              libbitcoin.protocol.Interface.block_id.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = start_.toBuilder();
              }
              start_ = input.readMessage(libbitcoin.protocol.Interface.block_id.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(start_);
                start_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              resultsPerPage_ = input.readUInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_headers_request_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_headers_request_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.block_headers_request.class, libbitcoin.protocol.Interface.block_headers_request.Builder.class);
    }

    public static com.google.protobuf.Parser<block_headers_request> PARSER =
        new com.google.protobuf.AbstractParser<block_headers_request>() {
      public block_headers_request parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new block_headers_request(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<block_headers_request> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int START_FIELD_NUMBER = 1;
    private libbitcoin.protocol.Interface.block_id start_;
    /**
     * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
     */
    public boolean hasStart() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
     */
    public libbitcoin.protocol.Interface.block_id getStart() {
      return start_;
    }
    /**
     * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
     */
    public libbitcoin.protocol.Interface.block_idOrBuilder getStartOrBuilder() {
      return start_;
    }

    public static final int RESULTS_PER_PAGE_FIELD_NUMBER = 2;
    private int resultsPerPage_;
    /**
     * <code>optional uint32 results_per_page = 2;</code>
     */
    public boolean hasResultsPerPage() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 results_per_page = 2;</code>
     */
    public int getResultsPerPage() {
      return resultsPerPage_;
    }

    private void initFields() {
      start_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
      resultsPerPage_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, start_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, resultsPerPage_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, start_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, resultsPerPage_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.block_headers_request parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.block_headers_request parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block_headers_request parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.block_headers_request parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block_headers_request parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.block_headers_request parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block_headers_request parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.block_headers_request parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.block_headers_request parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.block_headers_request parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.block_headers_request prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.block_headers_request}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.block_headers_request)
        libbitcoin.protocol.Interface.block_headers_requestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_headers_request_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_headers_request_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.block_headers_request.class, libbitcoin.protocol.Interface.block_headers_request.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.block_headers_request.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getStartFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (startBuilder_ == null) {
          start_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
        } else {
          startBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        resultsPerPage_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_block_headers_request_descriptor;
      }

      public libbitcoin.protocol.Interface.block_headers_request getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.block_headers_request.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.block_headers_request build() {
        libbitcoin.protocol.Interface.block_headers_request result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.block_headers_request buildPartial() {
        libbitcoin.protocol.Interface.block_headers_request result = new libbitcoin.protocol.Interface.block_headers_request(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (startBuilder_ == null) {
          result.start_ = start_;
        } else {
          result.start_ = startBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.resultsPerPage_ = resultsPerPage_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.block_headers_request) {
          return mergeFrom((libbitcoin.protocol.Interface.block_headers_request)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.block_headers_request other) {
        if (other == libbitcoin.protocol.Interface.block_headers_request.getDefaultInstance()) return this;
        if (other.hasStart()) {
          mergeStart(other.getStart());
        }
        if (other.hasResultsPerPage()) {
          setResultsPerPage(other.getResultsPerPage());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.block_headers_request parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.block_headers_request) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private libbitcoin.protocol.Interface.block_id start_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder> startBuilder_;
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      public boolean hasStart() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      public libbitcoin.protocol.Interface.block_id getStart() {
        if (startBuilder_ == null) {
          return start_;
        } else {
          return startBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      public Builder setStart(libbitcoin.protocol.Interface.block_id value) {
        if (startBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          start_ = value;
          onChanged();
        } else {
          startBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      public Builder setStart(
          libbitcoin.protocol.Interface.block_id.Builder builderForValue) {
        if (startBuilder_ == null) {
          start_ = builderForValue.build();
          onChanged();
        } else {
          startBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      public Builder mergeStart(libbitcoin.protocol.Interface.block_id value) {
        if (startBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              start_ != libbitcoin.protocol.Interface.block_id.getDefaultInstance()) {
            start_ =
              libbitcoin.protocol.Interface.block_id.newBuilder(start_).mergeFrom(value).buildPartial();
          } else {
            start_ = value;
          }
          onChanged();
        } else {
          startBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      public Builder clearStart() {
        if (startBuilder_ == null) {
          start_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
          onChanged();
        } else {
          startBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      public libbitcoin.protocol.Interface.block_id.Builder getStartBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getStartFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      public libbitcoin.protocol.Interface.block_idOrBuilder getStartOrBuilder() {
        if (startBuilder_ != null) {
          return startBuilder_.getMessageOrBuilder();
        } else {
          return start_;
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder> 
          getStartFieldBuilder() {
        if (startBuilder_ == null) {
          startBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder>(
                  getStart(),
                  getParentForChildren(),
                  isClean());
          start_ = null;
        }
        return startBuilder_;
      }

      private int resultsPerPage_ ;
      /**
       * <code>optional uint32 results_per_page = 2;</code>
       */
      public boolean hasResultsPerPage() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 results_per_page = 2;</code>
       */
      public int getResultsPerPage() {
        return resultsPerPage_;
      }
      /**
       * <code>optional uint32 results_per_page = 2;</code>
       */
      public Builder setResultsPerPage(int value) {
        bitField0_ |= 0x00000002;
        resultsPerPage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 results_per_page = 2;</code>
       */
      public Builder clearResultsPerPage() {
        bitField0_ = (bitField0_ & ~0x00000002);
        resultsPerPage_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.block_headers_request)
    }

    static {
      defaultInstance = new block_headers_request(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.block_headers_request)
  }

  public interface transactions_requestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.transactions_request)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
     */
    boolean hasStart();
    /**
     * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
     */
    libbitcoin.protocol.Interface.block_id getStart();
    /**
     * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
     */
    libbitcoin.protocol.Interface.block_idOrBuilder getStartOrBuilder();

    /**
     * <code>optional uint32 results_per_page = 2;</code>
     */
    boolean hasResultsPerPage();
    /**
     * <code>optional uint32 results_per_page = 2;</code>
     */
    int getResultsPerPage();

    /**
     * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
     */
    java.util.List<libbitcoin.protocol.Interface.filter> 
        getQueryList();
    /**
     * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
     */
    libbitcoin.protocol.Interface.filter getQuery(int index);
    /**
     * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
     */
    int getQueryCount();
    /**
     * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
     */
    java.util.List<? extends libbitcoin.protocol.Interface.filterOrBuilder> 
        getQueryOrBuilderList();
    /**
     * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
     */
    libbitcoin.protocol.Interface.filterOrBuilder getQueryOrBuilder(
        int index);

    /**
     * <code>optional .libbitcoin.protocol.transaction_results result_type = 4 [default = TX_HASH];</code>
     */
    boolean hasResultType();
    /**
     * <code>optional .libbitcoin.protocol.transaction_results result_type = 4 [default = TX_HASH];</code>
     */
    libbitcoin.protocol.Interface.transaction_results getResultType();

    /**
     * <code>optional .libbitcoin.protocol.locations location_type = 5 [default = NONE];</code>
     */
    boolean hasLocationType();
    /**
     * <code>optional .libbitcoin.protocol.locations location_type = 5 [default = NONE];</code>
     */
    libbitcoin.protocol.Interface.locations getLocationType();
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.transactions_request}
   */
  public static final class transactions_request extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.transactions_request)
      transactions_requestOrBuilder {
    // Use transactions_request.newBuilder() to construct.
    private transactions_request(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private transactions_request(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final transactions_request defaultInstance;
    public static transactions_request getDefaultInstance() {
      return defaultInstance;
    }

    public transactions_request getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private transactions_request(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              libbitcoin.protocol.Interface.block_id.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = start_.toBuilder();
              }
              start_ = input.readMessage(libbitcoin.protocol.Interface.block_id.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(start_);
                start_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              resultsPerPage_ = input.readUInt32();
              break;
            }
            case 26: {
              if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                query_ = new java.util.ArrayList<libbitcoin.protocol.Interface.filter>();
                mutable_bitField0_ |= 0x00000004;
              }
              query_.add(input.readMessage(libbitcoin.protocol.Interface.filter.PARSER, extensionRegistry));
              break;
            }
            case 32: {
              int rawValue = input.readEnum();
              libbitcoin.protocol.Interface.transaction_results value = libbitcoin.protocol.Interface.transaction_results.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(4, rawValue);
              } else {
                bitField0_ |= 0x00000004;
                resultType_ = value;
              }
              break;
            }
            case 40: {
              int rawValue = input.readEnum();
              libbitcoin.protocol.Interface.locations value = libbitcoin.protocol.Interface.locations.valueOf(rawValue);
              if (value == null) {
                unknownFields.mergeVarintField(5, rawValue);
              } else {
                bitField0_ |= 0x00000008;
                locationType_ = value;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
          query_ = java.util.Collections.unmodifiableList(query_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_transactions_request_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_transactions_request_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.transactions_request.class, libbitcoin.protocol.Interface.transactions_request.Builder.class);
    }

    public static com.google.protobuf.Parser<transactions_request> PARSER =
        new com.google.protobuf.AbstractParser<transactions_request>() {
      public transactions_request parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new transactions_request(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<transactions_request> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int START_FIELD_NUMBER = 1;
    private libbitcoin.protocol.Interface.block_id start_;
    /**
     * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
     */
    public boolean hasStart() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
     */
    public libbitcoin.protocol.Interface.block_id getStart() {
      return start_;
    }
    /**
     * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
     */
    public libbitcoin.protocol.Interface.block_idOrBuilder getStartOrBuilder() {
      return start_;
    }

    public static final int RESULTS_PER_PAGE_FIELD_NUMBER = 2;
    private int resultsPerPage_;
    /**
     * <code>optional uint32 results_per_page = 2;</code>
     */
    public boolean hasResultsPerPage() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional uint32 results_per_page = 2;</code>
     */
    public int getResultsPerPage() {
      return resultsPerPage_;
    }

    public static final int QUERY_FIELD_NUMBER = 3;
    private java.util.List<libbitcoin.protocol.Interface.filter> query_;
    /**
     * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
     */
    public java.util.List<libbitcoin.protocol.Interface.filter> getQueryList() {
      return query_;
    }
    /**
     * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
     */
    public java.util.List<? extends libbitcoin.protocol.Interface.filterOrBuilder> 
        getQueryOrBuilderList() {
      return query_;
    }
    /**
     * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
     */
    public int getQueryCount() {
      return query_.size();
    }
    /**
     * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
     */
    public libbitcoin.protocol.Interface.filter getQuery(int index) {
      return query_.get(index);
    }
    /**
     * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
     */
    public libbitcoin.protocol.Interface.filterOrBuilder getQueryOrBuilder(
        int index) {
      return query_.get(index);
    }

    public static final int RESULT_TYPE_FIELD_NUMBER = 4;
    private libbitcoin.protocol.Interface.transaction_results resultType_;
    /**
     * <code>optional .libbitcoin.protocol.transaction_results result_type = 4 [default = TX_HASH];</code>
     */
    public boolean hasResultType() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .libbitcoin.protocol.transaction_results result_type = 4 [default = TX_HASH];</code>
     */
    public libbitcoin.protocol.Interface.transaction_results getResultType() {
      return resultType_;
    }

    public static final int LOCATION_TYPE_FIELD_NUMBER = 5;
    private libbitcoin.protocol.Interface.locations locationType_;
    /**
     * <code>optional .libbitcoin.protocol.locations location_type = 5 [default = NONE];</code>
     */
    public boolean hasLocationType() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .libbitcoin.protocol.locations location_type = 5 [default = NONE];</code>
     */
    public libbitcoin.protocol.Interface.locations getLocationType() {
      return locationType_;
    }

    private void initFields() {
      start_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
      resultsPerPage_ = 0;
      query_ = java.util.Collections.emptyList();
      resultType_ = libbitcoin.protocol.Interface.transaction_results.TX_HASH;
      locationType_ = libbitcoin.protocol.Interface.locations.NONE;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      for (int i = 0; i < getQueryCount(); i++) {
        if (!getQuery(i).isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, start_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeUInt32(2, resultsPerPage_);
      }
      for (int i = 0; i < query_.size(); i++) {
        output.writeMessage(3, query_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeEnum(4, resultType_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeEnum(5, locationType_.getNumber());
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, start_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(2, resultsPerPage_);
      }
      for (int i = 0; i < query_.size(); i++) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, query_.get(i));
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, resultType_.getNumber());
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(5, locationType_.getNumber());
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.transactions_request parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.transactions_request parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.transactions_request parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.transactions_request parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.transactions_request parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.transactions_request parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.transactions_request parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.transactions_request parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.transactions_request parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.transactions_request parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.transactions_request prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.transactions_request}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.transactions_request)
        libbitcoin.protocol.Interface.transactions_requestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_transactions_request_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_transactions_request_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.transactions_request.class, libbitcoin.protocol.Interface.transactions_request.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.transactions_request.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getStartFieldBuilder();
          getQueryFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (startBuilder_ == null) {
          start_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
        } else {
          startBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        resultsPerPage_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        if (queryBuilder_ == null) {
          query_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
        } else {
          queryBuilder_.clear();
        }
        resultType_ = libbitcoin.protocol.Interface.transaction_results.TX_HASH;
        bitField0_ = (bitField0_ & ~0x00000008);
        locationType_ = libbitcoin.protocol.Interface.locations.NONE;
        bitField0_ = (bitField0_ & ~0x00000010);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_transactions_request_descriptor;
      }

      public libbitcoin.protocol.Interface.transactions_request getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.transactions_request.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.transactions_request build() {
        libbitcoin.protocol.Interface.transactions_request result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.transactions_request buildPartial() {
        libbitcoin.protocol.Interface.transactions_request result = new libbitcoin.protocol.Interface.transactions_request(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (startBuilder_ == null) {
          result.start_ = start_;
        } else {
          result.start_ = startBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.resultsPerPage_ = resultsPerPage_;
        if (queryBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004)) {
            query_ = java.util.Collections.unmodifiableList(query_);
            bitField0_ = (bitField0_ & ~0x00000004);
          }
          result.query_ = query_;
        } else {
          result.query_ = queryBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000004;
        }
        result.resultType_ = resultType_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000008;
        }
        result.locationType_ = locationType_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.transactions_request) {
          return mergeFrom((libbitcoin.protocol.Interface.transactions_request)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.transactions_request other) {
        if (other == libbitcoin.protocol.Interface.transactions_request.getDefaultInstance()) return this;
        if (other.hasStart()) {
          mergeStart(other.getStart());
        }
        if (other.hasResultsPerPage()) {
          setResultsPerPage(other.getResultsPerPage());
        }
        if (queryBuilder_ == null) {
          if (!other.query_.isEmpty()) {
            if (query_.isEmpty()) {
              query_ = other.query_;
              bitField0_ = (bitField0_ & ~0x00000004);
            } else {
              ensureQueryIsMutable();
              query_.addAll(other.query_);
            }
            onChanged();
          }
        } else {
          if (!other.query_.isEmpty()) {
            if (queryBuilder_.isEmpty()) {
              queryBuilder_.dispose();
              queryBuilder_ = null;
              query_ = other.query_;
              bitField0_ = (bitField0_ & ~0x00000004);
              queryBuilder_ = 
                com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                   getQueryFieldBuilder() : null;
            } else {
              queryBuilder_.addAllMessages(other.query_);
            }
          }
        }
        if (other.hasResultType()) {
          setResultType(other.getResultType());
        }
        if (other.hasLocationType()) {
          setLocationType(other.getLocationType());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        for (int i = 0; i < getQueryCount(); i++) {
          if (!getQuery(i).isInitialized()) {
            
            return false;
          }
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.transactions_request parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.transactions_request) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private libbitcoin.protocol.Interface.block_id start_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder> startBuilder_;
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      public boolean hasStart() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      public libbitcoin.protocol.Interface.block_id getStart() {
        if (startBuilder_ == null) {
          return start_;
        } else {
          return startBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      public Builder setStart(libbitcoin.protocol.Interface.block_id value) {
        if (startBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          start_ = value;
          onChanged();
        } else {
          startBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      public Builder setStart(
          libbitcoin.protocol.Interface.block_id.Builder builderForValue) {
        if (startBuilder_ == null) {
          start_ = builderForValue.build();
          onChanged();
        } else {
          startBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      public Builder mergeStart(libbitcoin.protocol.Interface.block_id value) {
        if (startBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              start_ != libbitcoin.protocol.Interface.block_id.getDefaultInstance()) {
            start_ =
              libbitcoin.protocol.Interface.block_id.newBuilder(start_).mergeFrom(value).buildPartial();
          } else {
            start_ = value;
          }
          onChanged();
        } else {
          startBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      public Builder clearStart() {
        if (startBuilder_ == null) {
          start_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
          onChanged();
        } else {
          startBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      public libbitcoin.protocol.Interface.block_id.Builder getStartBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getStartFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      public libbitcoin.protocol.Interface.block_idOrBuilder getStartOrBuilder() {
        if (startBuilder_ != null) {
          return startBuilder_.getMessageOrBuilder();
        } else {
          return start_;
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id start = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder> 
          getStartFieldBuilder() {
        if (startBuilder_ == null) {
          startBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder>(
                  getStart(),
                  getParentForChildren(),
                  isClean());
          start_ = null;
        }
        return startBuilder_;
      }

      private int resultsPerPage_ ;
      /**
       * <code>optional uint32 results_per_page = 2;</code>
       */
      public boolean hasResultsPerPage() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional uint32 results_per_page = 2;</code>
       */
      public int getResultsPerPage() {
        return resultsPerPage_;
      }
      /**
       * <code>optional uint32 results_per_page = 2;</code>
       */
      public Builder setResultsPerPage(int value) {
        bitField0_ |= 0x00000002;
        resultsPerPage_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional uint32 results_per_page = 2;</code>
       */
      public Builder clearResultsPerPage() {
        bitField0_ = (bitField0_ & ~0x00000002);
        resultsPerPage_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<libbitcoin.protocol.Interface.filter> query_ =
        java.util.Collections.emptyList();
      private void ensureQueryIsMutable() {
        if (!((bitField0_ & 0x00000004) == 0x00000004)) {
          query_ = new java.util.ArrayList<libbitcoin.protocol.Interface.filter>(query_);
          bitField0_ |= 0x00000004;
         }
      }

      private com.google.protobuf.RepeatedFieldBuilder<
          libbitcoin.protocol.Interface.filter, libbitcoin.protocol.Interface.filter.Builder, libbitcoin.protocol.Interface.filterOrBuilder> queryBuilder_;

      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public java.util.List<libbitcoin.protocol.Interface.filter> getQueryList() {
        if (queryBuilder_ == null) {
          return java.util.Collections.unmodifiableList(query_);
        } else {
          return queryBuilder_.getMessageList();
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public int getQueryCount() {
        if (queryBuilder_ == null) {
          return query_.size();
        } else {
          return queryBuilder_.getCount();
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public libbitcoin.protocol.Interface.filter getQuery(int index) {
        if (queryBuilder_ == null) {
          return query_.get(index);
        } else {
          return queryBuilder_.getMessage(index);
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public Builder setQuery(
          int index, libbitcoin.protocol.Interface.filter value) {
        if (queryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQueryIsMutable();
          query_.set(index, value);
          onChanged();
        } else {
          queryBuilder_.setMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public Builder setQuery(
          int index, libbitcoin.protocol.Interface.filter.Builder builderForValue) {
        if (queryBuilder_ == null) {
          ensureQueryIsMutable();
          query_.set(index, builderForValue.build());
          onChanged();
        } else {
          queryBuilder_.setMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public Builder addQuery(libbitcoin.protocol.Interface.filter value) {
        if (queryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQueryIsMutable();
          query_.add(value);
          onChanged();
        } else {
          queryBuilder_.addMessage(value);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public Builder addQuery(
          int index, libbitcoin.protocol.Interface.filter value) {
        if (queryBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ensureQueryIsMutable();
          query_.add(index, value);
          onChanged();
        } else {
          queryBuilder_.addMessage(index, value);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public Builder addQuery(
          libbitcoin.protocol.Interface.filter.Builder builderForValue) {
        if (queryBuilder_ == null) {
          ensureQueryIsMutable();
          query_.add(builderForValue.build());
          onChanged();
        } else {
          queryBuilder_.addMessage(builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public Builder addQuery(
          int index, libbitcoin.protocol.Interface.filter.Builder builderForValue) {
        if (queryBuilder_ == null) {
          ensureQueryIsMutable();
          query_.add(index, builderForValue.build());
          onChanged();
        } else {
          queryBuilder_.addMessage(index, builderForValue.build());
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public Builder addAllQuery(
          java.lang.Iterable<? extends libbitcoin.protocol.Interface.filter> values) {
        if (queryBuilder_ == null) {
          ensureQueryIsMutable();
          com.google.protobuf.AbstractMessageLite.Builder.addAll(
              values, query_);
          onChanged();
        } else {
          queryBuilder_.addAllMessages(values);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public Builder clearQuery() {
        if (queryBuilder_ == null) {
          query_ = java.util.Collections.emptyList();
          bitField0_ = (bitField0_ & ~0x00000004);
          onChanged();
        } else {
          queryBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public Builder removeQuery(int index) {
        if (queryBuilder_ == null) {
          ensureQueryIsMutable();
          query_.remove(index);
          onChanged();
        } else {
          queryBuilder_.remove(index);
        }
        return this;
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public libbitcoin.protocol.Interface.filter.Builder getQueryBuilder(
          int index) {
        return getQueryFieldBuilder().getBuilder(index);
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public libbitcoin.protocol.Interface.filterOrBuilder getQueryOrBuilder(
          int index) {
        if (queryBuilder_ == null) {
          return query_.get(index);  } else {
          return queryBuilder_.getMessageOrBuilder(index);
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public java.util.List<? extends libbitcoin.protocol.Interface.filterOrBuilder> 
           getQueryOrBuilderList() {
        if (queryBuilder_ != null) {
          return queryBuilder_.getMessageOrBuilderList();
        } else {
          return java.util.Collections.unmodifiableList(query_);
        }
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public libbitcoin.protocol.Interface.filter.Builder addQueryBuilder() {
        return getQueryFieldBuilder().addBuilder(
            libbitcoin.protocol.Interface.filter.getDefaultInstance());
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public libbitcoin.protocol.Interface.filter.Builder addQueryBuilder(
          int index) {
        return getQueryFieldBuilder().addBuilder(
            index, libbitcoin.protocol.Interface.filter.getDefaultInstance());
      }
      /**
       * <code>repeated .libbitcoin.protocol.filter query = 3;</code>
       */
      public java.util.List<libbitcoin.protocol.Interface.filter.Builder> 
           getQueryBuilderList() {
        return getQueryFieldBuilder().getBuilderList();
      }
      private com.google.protobuf.RepeatedFieldBuilder<
          libbitcoin.protocol.Interface.filter, libbitcoin.protocol.Interface.filter.Builder, libbitcoin.protocol.Interface.filterOrBuilder> 
          getQueryFieldBuilder() {
        if (queryBuilder_ == null) {
          queryBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
              libbitcoin.protocol.Interface.filter, libbitcoin.protocol.Interface.filter.Builder, libbitcoin.protocol.Interface.filterOrBuilder>(
                  query_,
                  ((bitField0_ & 0x00000004) == 0x00000004),
                  getParentForChildren(),
                  isClean());
          query_ = null;
        }
        return queryBuilder_;
      }

      private libbitcoin.protocol.Interface.transaction_results resultType_ = libbitcoin.protocol.Interface.transaction_results.TX_HASH;
      /**
       * <code>optional .libbitcoin.protocol.transaction_results result_type = 4 [default = TX_HASH];</code>
       */
      public boolean hasResultType() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .libbitcoin.protocol.transaction_results result_type = 4 [default = TX_HASH];</code>
       */
      public libbitcoin.protocol.Interface.transaction_results getResultType() {
        return resultType_;
      }
      /**
       * <code>optional .libbitcoin.protocol.transaction_results result_type = 4 [default = TX_HASH];</code>
       */
      public Builder setResultType(libbitcoin.protocol.Interface.transaction_results value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000008;
        resultType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.transaction_results result_type = 4 [default = TX_HASH];</code>
       */
      public Builder clearResultType() {
        bitField0_ = (bitField0_ & ~0x00000008);
        resultType_ = libbitcoin.protocol.Interface.transaction_results.TX_HASH;
        onChanged();
        return this;
      }

      private libbitcoin.protocol.Interface.locations locationType_ = libbitcoin.protocol.Interface.locations.NONE;
      /**
       * <code>optional .libbitcoin.protocol.locations location_type = 5 [default = NONE];</code>
       */
      public boolean hasLocationType() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional .libbitcoin.protocol.locations location_type = 5 [default = NONE];</code>
       */
      public libbitcoin.protocol.Interface.locations getLocationType() {
        return locationType_;
      }
      /**
       * <code>optional .libbitcoin.protocol.locations location_type = 5 [default = NONE];</code>
       */
      public Builder setLocationType(libbitcoin.protocol.Interface.locations value) {
        if (value == null) {
          throw new NullPointerException();
        }
        bitField0_ |= 0x00000010;
        locationType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.locations location_type = 5 [default = NONE];</code>
       */
      public Builder clearLocationType() {
        bitField0_ = (bitField0_ & ~0x00000010);
        locationType_ = libbitcoin.protocol.Interface.locations.NONE;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.transactions_request)
    }

    static {
      defaultInstance = new transactions_request(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.transactions_request)
  }

  public interface requestOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.request)
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<request> {

    /**
     * <code>required uint32 id = 1;</code>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     */
    int getId();

    /**
     * <code>optional .libbitcoin.protocol.block_headers_request get_block_headers = 2;</code>
     */
    boolean hasGetBlockHeaders();
    /**
     * <code>optional .libbitcoin.protocol.block_headers_request get_block_headers = 2;</code>
     */
    libbitcoin.protocol.Interface.block_headers_request getGetBlockHeaders();
    /**
     * <code>optional .libbitcoin.protocol.block_headers_request get_block_headers = 2;</code>
     */
    libbitcoin.protocol.Interface.block_headers_requestOrBuilder getGetBlockHeadersOrBuilder();

    /**
     * <code>optional .libbitcoin.protocol.transactions_request get_transactions = 3;</code>
     */
    boolean hasGetTransactions();
    /**
     * <code>optional .libbitcoin.protocol.transactions_request get_transactions = 3;</code>
     */
    libbitcoin.protocol.Interface.transactions_request getGetTransactions();
    /**
     * <code>optional .libbitcoin.protocol.transactions_request get_transactions = 3;</code>
     */
    libbitcoin.protocol.Interface.transactions_requestOrBuilder getGetTransactionsOrBuilder();

    /**
     * <code>optional .libbitcoin.protocol.tx post_transaction = 4;</code>
     */
    boolean hasPostTransaction();
    /**
     * <code>optional .libbitcoin.protocol.tx post_transaction = 4;</code>
     */
    libbitcoin.protocol.Interface.tx getPostTransaction();
    /**
     * <code>optional .libbitcoin.protocol.tx post_transaction = 4;</code>
     */
    libbitcoin.protocol.Interface.txOrBuilder getPostTransactionOrBuilder();

    /**
     * <code>optional .libbitcoin.protocol.tx validate_transaction = 5;</code>
     */
    boolean hasValidateTransaction();
    /**
     * <code>optional .libbitcoin.protocol.tx validate_transaction = 5;</code>
     */
    libbitcoin.protocol.Interface.tx getValidateTransaction();
    /**
     * <code>optional .libbitcoin.protocol.tx validate_transaction = 5;</code>
     */
    libbitcoin.protocol.Interface.txOrBuilder getValidateTransactionOrBuilder();

    /**
     * <code>optional .libbitcoin.protocol.block post_block = 6;</code>
     */
    boolean hasPostBlock();
    /**
     * <code>optional .libbitcoin.protocol.block post_block = 6;</code>
     */
    libbitcoin.protocol.Interface.block getPostBlock();
    /**
     * <code>optional .libbitcoin.protocol.block post_block = 6;</code>
     */
    libbitcoin.protocol.Interface.blockOrBuilder getPostBlockOrBuilder();

    /**
     * <code>optional .libbitcoin.protocol.block validate_block = 7;</code>
     */
    boolean hasValidateBlock();
    /**
     * <code>optional .libbitcoin.protocol.block validate_block = 7;</code>
     */
    libbitcoin.protocol.Interface.block getValidateBlock();
    /**
     * <code>optional .libbitcoin.protocol.block validate_block = 7;</code>
     */
    libbitcoin.protocol.Interface.blockOrBuilder getValidateBlockOrBuilder();
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.request}
   */
  public static final class request extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        request> implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.request)
      requestOrBuilder {
    // Use request.newBuilder() to construct.
    private request(com.google.protobuf.GeneratedMessage.ExtendableBuilder<libbitcoin.protocol.Interface.request, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private request(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final request defaultInstance;
    public static request getDefaultInstance() {
      return defaultInstance;
    }

    public request getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private request(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 18: {
              libbitcoin.protocol.Interface.block_headers_request.Builder subBuilder = null;
              if (requestTypeCase_ == 2) {
                subBuilder = ((libbitcoin.protocol.Interface.block_headers_request) requestType_).toBuilder();
              }
              requestType_ = input.readMessage(libbitcoin.protocol.Interface.block_headers_request.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((libbitcoin.protocol.Interface.block_headers_request) requestType_);
                requestType_ = subBuilder.buildPartial();
              }
              requestTypeCase_ = 2;
              break;
            }
            case 26: {
              libbitcoin.protocol.Interface.transactions_request.Builder subBuilder = null;
              if (requestTypeCase_ == 3) {
                subBuilder = ((libbitcoin.protocol.Interface.transactions_request) requestType_).toBuilder();
              }
              requestType_ = input.readMessage(libbitcoin.protocol.Interface.transactions_request.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((libbitcoin.protocol.Interface.transactions_request) requestType_);
                requestType_ = subBuilder.buildPartial();
              }
              requestTypeCase_ = 3;
              break;
            }
            case 34: {
              libbitcoin.protocol.Interface.tx.Builder subBuilder = null;
              if (requestTypeCase_ == 4) {
                subBuilder = ((libbitcoin.protocol.Interface.tx) requestType_).toBuilder();
              }
              requestType_ = input.readMessage(libbitcoin.protocol.Interface.tx.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((libbitcoin.protocol.Interface.tx) requestType_);
                requestType_ = subBuilder.buildPartial();
              }
              requestTypeCase_ = 4;
              break;
            }
            case 42: {
              libbitcoin.protocol.Interface.tx.Builder subBuilder = null;
              if (requestTypeCase_ == 5) {
                subBuilder = ((libbitcoin.protocol.Interface.tx) requestType_).toBuilder();
              }
              requestType_ = input.readMessage(libbitcoin.protocol.Interface.tx.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((libbitcoin.protocol.Interface.tx) requestType_);
                requestType_ = subBuilder.buildPartial();
              }
              requestTypeCase_ = 5;
              break;
            }
            case 50: {
              libbitcoin.protocol.Interface.block.Builder subBuilder = null;
              if (requestTypeCase_ == 6) {
                subBuilder = ((libbitcoin.protocol.Interface.block) requestType_).toBuilder();
              }
              requestType_ = input.readMessage(libbitcoin.protocol.Interface.block.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((libbitcoin.protocol.Interface.block) requestType_);
                requestType_ = subBuilder.buildPartial();
              }
              requestTypeCase_ = 6;
              break;
            }
            case 58: {
              libbitcoin.protocol.Interface.block.Builder subBuilder = null;
              if (requestTypeCase_ == 7) {
                subBuilder = ((libbitcoin.protocol.Interface.block) requestType_).toBuilder();
              }
              requestType_ = input.readMessage(libbitcoin.protocol.Interface.block.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((libbitcoin.protocol.Interface.block) requestType_);
                requestType_ = subBuilder.buildPartial();
              }
              requestTypeCase_ = 7;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_request_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_request_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.request.class, libbitcoin.protocol.Interface.request.Builder.class);
    }

    public static com.google.protobuf.Parser<request> PARSER =
        new com.google.protobuf.AbstractParser<request>() {
      public request parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new request(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<request> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    private int requestTypeCase_ = 0;
    private java.lang.Object requestType_;
    public enum RequestTypeCase
        implements com.google.protobuf.Internal.EnumLite {
      GET_BLOCK_HEADERS(2),
      GET_TRANSACTIONS(3),
      POST_TRANSACTION(4),
      VALIDATE_TRANSACTION(5),
      POST_BLOCK(6),
      VALIDATE_BLOCK(7),
      REQUESTTYPE_NOT_SET(0);
      private int value = 0;
      private RequestTypeCase(int value) {
        this.value = value;
      }
      public static RequestTypeCase valueOf(int value) {
        switch (value) {
          case 2: return GET_BLOCK_HEADERS;
          case 3: return GET_TRANSACTIONS;
          case 4: return POST_TRANSACTION;
          case 5: return VALIDATE_TRANSACTION;
          case 6: return POST_BLOCK;
          case 7: return VALIDATE_BLOCK;
          case 0: return REQUESTTYPE_NOT_SET;
          default: throw new java.lang.IllegalArgumentException(
            "Value is undefined for this oneof enum.");
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public RequestTypeCase
    getRequestTypeCase() {
      return RequestTypeCase.valueOf(
          requestTypeCase_);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     */
    public int getId() {
      return id_;
    }

    public static final int GET_BLOCK_HEADERS_FIELD_NUMBER = 2;
    /**
     * <code>optional .libbitcoin.protocol.block_headers_request get_block_headers = 2;</code>
     */
    public boolean hasGetBlockHeaders() {
      return requestTypeCase_ == 2;
    }
    /**
     * <code>optional .libbitcoin.protocol.block_headers_request get_block_headers = 2;</code>
     */
    public libbitcoin.protocol.Interface.block_headers_request getGetBlockHeaders() {
      if (requestTypeCase_ == 2) {
         return (libbitcoin.protocol.Interface.block_headers_request) requestType_;
      }
      return libbitcoin.protocol.Interface.block_headers_request.getDefaultInstance();
    }
    /**
     * <code>optional .libbitcoin.protocol.block_headers_request get_block_headers = 2;</code>
     */
    public libbitcoin.protocol.Interface.block_headers_requestOrBuilder getGetBlockHeadersOrBuilder() {
      if (requestTypeCase_ == 2) {
         return (libbitcoin.protocol.Interface.block_headers_request) requestType_;
      }
      return libbitcoin.protocol.Interface.block_headers_request.getDefaultInstance();
    }

    public static final int GET_TRANSACTIONS_FIELD_NUMBER = 3;
    /**
     * <code>optional .libbitcoin.protocol.transactions_request get_transactions = 3;</code>
     */
    public boolean hasGetTransactions() {
      return requestTypeCase_ == 3;
    }
    /**
     * <code>optional .libbitcoin.protocol.transactions_request get_transactions = 3;</code>
     */
    public libbitcoin.protocol.Interface.transactions_request getGetTransactions() {
      if (requestTypeCase_ == 3) {
         return (libbitcoin.protocol.Interface.transactions_request) requestType_;
      }
      return libbitcoin.protocol.Interface.transactions_request.getDefaultInstance();
    }
    /**
     * <code>optional .libbitcoin.protocol.transactions_request get_transactions = 3;</code>
     */
    public libbitcoin.protocol.Interface.transactions_requestOrBuilder getGetTransactionsOrBuilder() {
      if (requestTypeCase_ == 3) {
         return (libbitcoin.protocol.Interface.transactions_request) requestType_;
      }
      return libbitcoin.protocol.Interface.transactions_request.getDefaultInstance();
    }

    public static final int POST_TRANSACTION_FIELD_NUMBER = 4;
    /**
     * <code>optional .libbitcoin.protocol.tx post_transaction = 4;</code>
     */
    public boolean hasPostTransaction() {
      return requestTypeCase_ == 4;
    }
    /**
     * <code>optional .libbitcoin.protocol.tx post_transaction = 4;</code>
     */
    public libbitcoin.protocol.Interface.tx getPostTransaction() {
      if (requestTypeCase_ == 4) {
         return (libbitcoin.protocol.Interface.tx) requestType_;
      }
      return libbitcoin.protocol.Interface.tx.getDefaultInstance();
    }
    /**
     * <code>optional .libbitcoin.protocol.tx post_transaction = 4;</code>
     */
    public libbitcoin.protocol.Interface.txOrBuilder getPostTransactionOrBuilder() {
      if (requestTypeCase_ == 4) {
         return (libbitcoin.protocol.Interface.tx) requestType_;
      }
      return libbitcoin.protocol.Interface.tx.getDefaultInstance();
    }

    public static final int VALIDATE_TRANSACTION_FIELD_NUMBER = 5;
    /**
     * <code>optional .libbitcoin.protocol.tx validate_transaction = 5;</code>
     */
    public boolean hasValidateTransaction() {
      return requestTypeCase_ == 5;
    }
    /**
     * <code>optional .libbitcoin.protocol.tx validate_transaction = 5;</code>
     */
    public libbitcoin.protocol.Interface.tx getValidateTransaction() {
      if (requestTypeCase_ == 5) {
         return (libbitcoin.protocol.Interface.tx) requestType_;
      }
      return libbitcoin.protocol.Interface.tx.getDefaultInstance();
    }
    /**
     * <code>optional .libbitcoin.protocol.tx validate_transaction = 5;</code>
     */
    public libbitcoin.protocol.Interface.txOrBuilder getValidateTransactionOrBuilder() {
      if (requestTypeCase_ == 5) {
         return (libbitcoin.protocol.Interface.tx) requestType_;
      }
      return libbitcoin.protocol.Interface.tx.getDefaultInstance();
    }

    public static final int POST_BLOCK_FIELD_NUMBER = 6;
    /**
     * <code>optional .libbitcoin.protocol.block post_block = 6;</code>
     */
    public boolean hasPostBlock() {
      return requestTypeCase_ == 6;
    }
    /**
     * <code>optional .libbitcoin.protocol.block post_block = 6;</code>
     */
    public libbitcoin.protocol.Interface.block getPostBlock() {
      if (requestTypeCase_ == 6) {
         return (libbitcoin.protocol.Interface.block) requestType_;
      }
      return libbitcoin.protocol.Interface.block.getDefaultInstance();
    }
    /**
     * <code>optional .libbitcoin.protocol.block post_block = 6;</code>
     */
    public libbitcoin.protocol.Interface.blockOrBuilder getPostBlockOrBuilder() {
      if (requestTypeCase_ == 6) {
         return (libbitcoin.protocol.Interface.block) requestType_;
      }
      return libbitcoin.protocol.Interface.block.getDefaultInstance();
    }

    public static final int VALIDATE_BLOCK_FIELD_NUMBER = 7;
    /**
     * <code>optional .libbitcoin.protocol.block validate_block = 7;</code>
     */
    public boolean hasValidateBlock() {
      return requestTypeCase_ == 7;
    }
    /**
     * <code>optional .libbitcoin.protocol.block validate_block = 7;</code>
     */
    public libbitcoin.protocol.Interface.block getValidateBlock() {
      if (requestTypeCase_ == 7) {
         return (libbitcoin.protocol.Interface.block) requestType_;
      }
      return libbitcoin.protocol.Interface.block.getDefaultInstance();
    }
    /**
     * <code>optional .libbitcoin.protocol.block validate_block = 7;</code>
     */
    public libbitcoin.protocol.Interface.blockOrBuilder getValidateBlockOrBuilder() {
      if (requestTypeCase_ == 7) {
         return (libbitcoin.protocol.Interface.block) requestType_;
      }
      return libbitcoin.protocol.Interface.block.getDefaultInstance();
    }

    private void initFields() {
      id_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasGetTransactions()) {
        if (!getGetTransactions().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPostTransaction()) {
        if (!getPostTransaction().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasValidateTransaction()) {
        if (!getValidateTransaction().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasPostBlock()) {
        if (!getPostBlock().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasValidateBlock()) {
        if (!getValidateBlock().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<libbitcoin.protocol.Interface.request>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (requestTypeCase_ == 2) {
        output.writeMessage(2, (libbitcoin.protocol.Interface.block_headers_request) requestType_);
      }
      if (requestTypeCase_ == 3) {
        output.writeMessage(3, (libbitcoin.protocol.Interface.transactions_request) requestType_);
      }
      if (requestTypeCase_ == 4) {
        output.writeMessage(4, (libbitcoin.protocol.Interface.tx) requestType_);
      }
      if (requestTypeCase_ == 5) {
        output.writeMessage(5, (libbitcoin.protocol.Interface.tx) requestType_);
      }
      if (requestTypeCase_ == 6) {
        output.writeMessage(6, (libbitcoin.protocol.Interface.block) requestType_);
      }
      if (requestTypeCase_ == 7) {
        output.writeMessage(7, (libbitcoin.protocol.Interface.block) requestType_);
      }
      extensionWriter.writeUntil(200, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (requestTypeCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, (libbitcoin.protocol.Interface.block_headers_request) requestType_);
      }
      if (requestTypeCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (libbitcoin.protocol.Interface.transactions_request) requestType_);
      }
      if (requestTypeCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (libbitcoin.protocol.Interface.tx) requestType_);
      }
      if (requestTypeCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(5, (libbitcoin.protocol.Interface.tx) requestType_);
      }
      if (requestTypeCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(6, (libbitcoin.protocol.Interface.block) requestType_);
      }
      if (requestTypeCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(7, (libbitcoin.protocol.Interface.block) requestType_);
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.request parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.request parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.request parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.request parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.request parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.request parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.request parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.request parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.request parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.request parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.request prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.request}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          libbitcoin.protocol.Interface.request, Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.request)
        libbitcoin.protocol.Interface.requestOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_request_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_request_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.request.class, libbitcoin.protocol.Interface.request.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.request.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        requestTypeCase_ = 0;
        requestType_ = null;
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_request_descriptor;
      }

      public libbitcoin.protocol.Interface.request getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.request.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.request build() {
        libbitcoin.protocol.Interface.request result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.request buildPartial() {
        libbitcoin.protocol.Interface.request result = new libbitcoin.protocol.Interface.request(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (requestTypeCase_ == 2) {
          if (getBlockHeadersBuilder_ == null) {
            result.requestType_ = requestType_;
          } else {
            result.requestType_ = getBlockHeadersBuilder_.build();
          }
        }
        if (requestTypeCase_ == 3) {
          if (getTransactionsBuilder_ == null) {
            result.requestType_ = requestType_;
          } else {
            result.requestType_ = getTransactionsBuilder_.build();
          }
        }
        if (requestTypeCase_ == 4) {
          if (postTransactionBuilder_ == null) {
            result.requestType_ = requestType_;
          } else {
            result.requestType_ = postTransactionBuilder_.build();
          }
        }
        if (requestTypeCase_ == 5) {
          if (validateTransactionBuilder_ == null) {
            result.requestType_ = requestType_;
          } else {
            result.requestType_ = validateTransactionBuilder_.build();
          }
        }
        if (requestTypeCase_ == 6) {
          if (postBlockBuilder_ == null) {
            result.requestType_ = requestType_;
          } else {
            result.requestType_ = postBlockBuilder_.build();
          }
        }
        if (requestTypeCase_ == 7) {
          if (validateBlockBuilder_ == null) {
            result.requestType_ = requestType_;
          } else {
            result.requestType_ = validateBlockBuilder_.build();
          }
        }
        result.bitField0_ = to_bitField0_;
        result.requestTypeCase_ = requestTypeCase_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.request) {
          return mergeFrom((libbitcoin.protocol.Interface.request)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.request other) {
        if (other == libbitcoin.protocol.Interface.request.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        switch (other.getRequestTypeCase()) {
          case GET_BLOCK_HEADERS: {
            mergeGetBlockHeaders(other.getGetBlockHeaders());
            break;
          }
          case GET_TRANSACTIONS: {
            mergeGetTransactions(other.getGetTransactions());
            break;
          }
          case POST_TRANSACTION: {
            mergePostTransaction(other.getPostTransaction());
            break;
          }
          case VALIDATE_TRANSACTION: {
            mergeValidateTransaction(other.getValidateTransaction());
            break;
          }
          case POST_BLOCK: {
            mergePostBlock(other.getPostBlock());
            break;
          }
          case VALIDATE_BLOCK: {
            mergeValidateBlock(other.getValidateBlock());
            break;
          }
          case REQUESTTYPE_NOT_SET: {
            break;
          }
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (hasGetTransactions()) {
          if (!getGetTransactions().isInitialized()) {
            
            return false;
          }
        }
        if (hasPostTransaction()) {
          if (!getPostTransaction().isInitialized()) {
            
            return false;
          }
        }
        if (hasValidateTransaction()) {
          if (!getValidateTransaction().isInitialized()) {
            
            return false;
          }
        }
        if (hasPostBlock()) {
          if (!getPostBlock().isInitialized()) {
            
            return false;
          }
        }
        if (hasValidateBlock()) {
          if (!getValidateBlock().isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.request parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.request) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int requestTypeCase_ = 0;
      private java.lang.Object requestType_;
      public RequestTypeCase
          getRequestTypeCase() {
        return RequestTypeCase.valueOf(
            requestTypeCase_);
      }

      public Builder clearRequestType() {
        requestTypeCase_ = 0;
        requestType_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block_headers_request, libbitcoin.protocol.Interface.block_headers_request.Builder, libbitcoin.protocol.Interface.block_headers_requestOrBuilder> getBlockHeadersBuilder_;
      /**
       * <code>optional .libbitcoin.protocol.block_headers_request get_block_headers = 2;</code>
       */
      public boolean hasGetBlockHeaders() {
        return requestTypeCase_ == 2;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_headers_request get_block_headers = 2;</code>
       */
      public libbitcoin.protocol.Interface.block_headers_request getGetBlockHeaders() {
        if (getBlockHeadersBuilder_ == null) {
          if (requestTypeCase_ == 2) {
            return (libbitcoin.protocol.Interface.block_headers_request) requestType_;
          }
          return libbitcoin.protocol.Interface.block_headers_request.getDefaultInstance();
        } else {
          if (requestTypeCase_ == 2) {
            return getBlockHeadersBuilder_.getMessage();
          }
          return libbitcoin.protocol.Interface.block_headers_request.getDefaultInstance();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.block_headers_request get_block_headers = 2;</code>
       */
      public Builder setGetBlockHeaders(libbitcoin.protocol.Interface.block_headers_request value) {
        if (getBlockHeadersBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          requestType_ = value;
          onChanged();
        } else {
          getBlockHeadersBuilder_.setMessage(value);
        }
        requestTypeCase_ = 2;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_headers_request get_block_headers = 2;</code>
       */
      public Builder setGetBlockHeaders(
          libbitcoin.protocol.Interface.block_headers_request.Builder builderForValue) {
        if (getBlockHeadersBuilder_ == null) {
          requestType_ = builderForValue.build();
          onChanged();
        } else {
          getBlockHeadersBuilder_.setMessage(builderForValue.build());
        }
        requestTypeCase_ = 2;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_headers_request get_block_headers = 2;</code>
       */
      public Builder mergeGetBlockHeaders(libbitcoin.protocol.Interface.block_headers_request value) {
        if (getBlockHeadersBuilder_ == null) {
          if (requestTypeCase_ == 2 &&
              requestType_ != libbitcoin.protocol.Interface.block_headers_request.getDefaultInstance()) {
            requestType_ = libbitcoin.protocol.Interface.block_headers_request.newBuilder((libbitcoin.protocol.Interface.block_headers_request) requestType_)
                .mergeFrom(value).buildPartial();
          } else {
            requestType_ = value;
          }
          onChanged();
        } else {
          if (requestTypeCase_ == 2) {
            getBlockHeadersBuilder_.mergeFrom(value);
          }
          getBlockHeadersBuilder_.setMessage(value);
        }
        requestTypeCase_ = 2;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_headers_request get_block_headers = 2;</code>
       */
      public Builder clearGetBlockHeaders() {
        if (getBlockHeadersBuilder_ == null) {
          if (requestTypeCase_ == 2) {
            requestTypeCase_ = 0;
            requestType_ = null;
            onChanged();
          }
        } else {
          if (requestTypeCase_ == 2) {
            requestTypeCase_ = 0;
            requestType_ = null;
          }
          getBlockHeadersBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_headers_request get_block_headers = 2;</code>
       */
      public libbitcoin.protocol.Interface.block_headers_request.Builder getGetBlockHeadersBuilder() {
        return getGetBlockHeadersFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .libbitcoin.protocol.block_headers_request get_block_headers = 2;</code>
       */
      public libbitcoin.protocol.Interface.block_headers_requestOrBuilder getGetBlockHeadersOrBuilder() {
        if ((requestTypeCase_ == 2) && (getBlockHeadersBuilder_ != null)) {
          return getBlockHeadersBuilder_.getMessageOrBuilder();
        } else {
          if (requestTypeCase_ == 2) {
            return (libbitcoin.protocol.Interface.block_headers_request) requestType_;
          }
          return libbitcoin.protocol.Interface.block_headers_request.getDefaultInstance();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.block_headers_request get_block_headers = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block_headers_request, libbitcoin.protocol.Interface.block_headers_request.Builder, libbitcoin.protocol.Interface.block_headers_requestOrBuilder> 
          getGetBlockHeadersFieldBuilder() {
        if (getBlockHeadersBuilder_ == null) {
          if (!(requestTypeCase_ == 2)) {
            requestType_ = libbitcoin.protocol.Interface.block_headers_request.getDefaultInstance();
          }
          getBlockHeadersBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.block_headers_request, libbitcoin.protocol.Interface.block_headers_request.Builder, libbitcoin.protocol.Interface.block_headers_requestOrBuilder>(
                  (libbitcoin.protocol.Interface.block_headers_request) requestType_,
                  getParentForChildren(),
                  isClean());
          requestType_ = null;
        }
        requestTypeCase_ = 2;
        return getBlockHeadersBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.transactions_request, libbitcoin.protocol.Interface.transactions_request.Builder, libbitcoin.protocol.Interface.transactions_requestOrBuilder> getTransactionsBuilder_;
      /**
       * <code>optional .libbitcoin.protocol.transactions_request get_transactions = 3;</code>
       */
      public boolean hasGetTransactions() {
        return requestTypeCase_ == 3;
      }
      /**
       * <code>optional .libbitcoin.protocol.transactions_request get_transactions = 3;</code>
       */
      public libbitcoin.protocol.Interface.transactions_request getGetTransactions() {
        if (getTransactionsBuilder_ == null) {
          if (requestTypeCase_ == 3) {
            return (libbitcoin.protocol.Interface.transactions_request) requestType_;
          }
          return libbitcoin.protocol.Interface.transactions_request.getDefaultInstance();
        } else {
          if (requestTypeCase_ == 3) {
            return getTransactionsBuilder_.getMessage();
          }
          return libbitcoin.protocol.Interface.transactions_request.getDefaultInstance();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.transactions_request get_transactions = 3;</code>
       */
      public Builder setGetTransactions(libbitcoin.protocol.Interface.transactions_request value) {
        if (getTransactionsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          requestType_ = value;
          onChanged();
        } else {
          getTransactionsBuilder_.setMessage(value);
        }
        requestTypeCase_ = 3;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.transactions_request get_transactions = 3;</code>
       */
      public Builder setGetTransactions(
          libbitcoin.protocol.Interface.transactions_request.Builder builderForValue) {
        if (getTransactionsBuilder_ == null) {
          requestType_ = builderForValue.build();
          onChanged();
        } else {
          getTransactionsBuilder_.setMessage(builderForValue.build());
        }
        requestTypeCase_ = 3;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.transactions_request get_transactions = 3;</code>
       */
      public Builder mergeGetTransactions(libbitcoin.protocol.Interface.transactions_request value) {
        if (getTransactionsBuilder_ == null) {
          if (requestTypeCase_ == 3 &&
              requestType_ != libbitcoin.protocol.Interface.transactions_request.getDefaultInstance()) {
            requestType_ = libbitcoin.protocol.Interface.transactions_request.newBuilder((libbitcoin.protocol.Interface.transactions_request) requestType_)
                .mergeFrom(value).buildPartial();
          } else {
            requestType_ = value;
          }
          onChanged();
        } else {
          if (requestTypeCase_ == 3) {
            getTransactionsBuilder_.mergeFrom(value);
          }
          getTransactionsBuilder_.setMessage(value);
        }
        requestTypeCase_ = 3;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.transactions_request get_transactions = 3;</code>
       */
      public Builder clearGetTransactions() {
        if (getTransactionsBuilder_ == null) {
          if (requestTypeCase_ == 3) {
            requestTypeCase_ = 0;
            requestType_ = null;
            onChanged();
          }
        } else {
          if (requestTypeCase_ == 3) {
            requestTypeCase_ = 0;
            requestType_ = null;
          }
          getTransactionsBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.transactions_request get_transactions = 3;</code>
       */
      public libbitcoin.protocol.Interface.transactions_request.Builder getGetTransactionsBuilder() {
        return getGetTransactionsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .libbitcoin.protocol.transactions_request get_transactions = 3;</code>
       */
      public libbitcoin.protocol.Interface.transactions_requestOrBuilder getGetTransactionsOrBuilder() {
        if ((requestTypeCase_ == 3) && (getTransactionsBuilder_ != null)) {
          return getTransactionsBuilder_.getMessageOrBuilder();
        } else {
          if (requestTypeCase_ == 3) {
            return (libbitcoin.protocol.Interface.transactions_request) requestType_;
          }
          return libbitcoin.protocol.Interface.transactions_request.getDefaultInstance();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.transactions_request get_transactions = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.transactions_request, libbitcoin.protocol.Interface.transactions_request.Builder, libbitcoin.protocol.Interface.transactions_requestOrBuilder> 
          getGetTransactionsFieldBuilder() {
        if (getTransactionsBuilder_ == null) {
          if (!(requestTypeCase_ == 3)) {
            requestType_ = libbitcoin.protocol.Interface.transactions_request.getDefaultInstance();
          }
          getTransactionsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.transactions_request, libbitcoin.protocol.Interface.transactions_request.Builder, libbitcoin.protocol.Interface.transactions_requestOrBuilder>(
                  (libbitcoin.protocol.Interface.transactions_request) requestType_,
                  getParentForChildren(),
                  isClean());
          requestType_ = null;
        }
        requestTypeCase_ = 3;
        return getTransactionsBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.tx, libbitcoin.protocol.Interface.tx.Builder, libbitcoin.protocol.Interface.txOrBuilder> postTransactionBuilder_;
      /**
       * <code>optional .libbitcoin.protocol.tx post_transaction = 4;</code>
       */
      public boolean hasPostTransaction() {
        return requestTypeCase_ == 4;
      }
      /**
       * <code>optional .libbitcoin.protocol.tx post_transaction = 4;</code>
       */
      public libbitcoin.protocol.Interface.tx getPostTransaction() {
        if (postTransactionBuilder_ == null) {
          if (requestTypeCase_ == 4) {
            return (libbitcoin.protocol.Interface.tx) requestType_;
          }
          return libbitcoin.protocol.Interface.tx.getDefaultInstance();
        } else {
          if (requestTypeCase_ == 4) {
            return postTransactionBuilder_.getMessage();
          }
          return libbitcoin.protocol.Interface.tx.getDefaultInstance();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.tx post_transaction = 4;</code>
       */
      public Builder setPostTransaction(libbitcoin.protocol.Interface.tx value) {
        if (postTransactionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          requestType_ = value;
          onChanged();
        } else {
          postTransactionBuilder_.setMessage(value);
        }
        requestTypeCase_ = 4;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.tx post_transaction = 4;</code>
       */
      public Builder setPostTransaction(
          libbitcoin.protocol.Interface.tx.Builder builderForValue) {
        if (postTransactionBuilder_ == null) {
          requestType_ = builderForValue.build();
          onChanged();
        } else {
          postTransactionBuilder_.setMessage(builderForValue.build());
        }
        requestTypeCase_ = 4;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.tx post_transaction = 4;</code>
       */
      public Builder mergePostTransaction(libbitcoin.protocol.Interface.tx value) {
        if (postTransactionBuilder_ == null) {
          if (requestTypeCase_ == 4 &&
              requestType_ != libbitcoin.protocol.Interface.tx.getDefaultInstance()) {
            requestType_ = libbitcoin.protocol.Interface.tx.newBuilder((libbitcoin.protocol.Interface.tx) requestType_)
                .mergeFrom(value).buildPartial();
          } else {
            requestType_ = value;
          }
          onChanged();
        } else {
          if (requestTypeCase_ == 4) {
            postTransactionBuilder_.mergeFrom(value);
          }
          postTransactionBuilder_.setMessage(value);
        }
        requestTypeCase_ = 4;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.tx post_transaction = 4;</code>
       */
      public Builder clearPostTransaction() {
        if (postTransactionBuilder_ == null) {
          if (requestTypeCase_ == 4) {
            requestTypeCase_ = 0;
            requestType_ = null;
            onChanged();
          }
        } else {
          if (requestTypeCase_ == 4) {
            requestTypeCase_ = 0;
            requestType_ = null;
          }
          postTransactionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.tx post_transaction = 4;</code>
       */
      public libbitcoin.protocol.Interface.tx.Builder getPostTransactionBuilder() {
        return getPostTransactionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .libbitcoin.protocol.tx post_transaction = 4;</code>
       */
      public libbitcoin.protocol.Interface.txOrBuilder getPostTransactionOrBuilder() {
        if ((requestTypeCase_ == 4) && (postTransactionBuilder_ != null)) {
          return postTransactionBuilder_.getMessageOrBuilder();
        } else {
          if (requestTypeCase_ == 4) {
            return (libbitcoin.protocol.Interface.tx) requestType_;
          }
          return libbitcoin.protocol.Interface.tx.getDefaultInstance();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.tx post_transaction = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.tx, libbitcoin.protocol.Interface.tx.Builder, libbitcoin.protocol.Interface.txOrBuilder> 
          getPostTransactionFieldBuilder() {
        if (postTransactionBuilder_ == null) {
          if (!(requestTypeCase_ == 4)) {
            requestType_ = libbitcoin.protocol.Interface.tx.getDefaultInstance();
          }
          postTransactionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.tx, libbitcoin.protocol.Interface.tx.Builder, libbitcoin.protocol.Interface.txOrBuilder>(
                  (libbitcoin.protocol.Interface.tx) requestType_,
                  getParentForChildren(),
                  isClean());
          requestType_ = null;
        }
        requestTypeCase_ = 4;
        return postTransactionBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.tx, libbitcoin.protocol.Interface.tx.Builder, libbitcoin.protocol.Interface.txOrBuilder> validateTransactionBuilder_;
      /**
       * <code>optional .libbitcoin.protocol.tx validate_transaction = 5;</code>
       */
      public boolean hasValidateTransaction() {
        return requestTypeCase_ == 5;
      }
      /**
       * <code>optional .libbitcoin.protocol.tx validate_transaction = 5;</code>
       */
      public libbitcoin.protocol.Interface.tx getValidateTransaction() {
        if (validateTransactionBuilder_ == null) {
          if (requestTypeCase_ == 5) {
            return (libbitcoin.protocol.Interface.tx) requestType_;
          }
          return libbitcoin.protocol.Interface.tx.getDefaultInstance();
        } else {
          if (requestTypeCase_ == 5) {
            return validateTransactionBuilder_.getMessage();
          }
          return libbitcoin.protocol.Interface.tx.getDefaultInstance();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.tx validate_transaction = 5;</code>
       */
      public Builder setValidateTransaction(libbitcoin.protocol.Interface.tx value) {
        if (validateTransactionBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          requestType_ = value;
          onChanged();
        } else {
          validateTransactionBuilder_.setMessage(value);
        }
        requestTypeCase_ = 5;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.tx validate_transaction = 5;</code>
       */
      public Builder setValidateTransaction(
          libbitcoin.protocol.Interface.tx.Builder builderForValue) {
        if (validateTransactionBuilder_ == null) {
          requestType_ = builderForValue.build();
          onChanged();
        } else {
          validateTransactionBuilder_.setMessage(builderForValue.build());
        }
        requestTypeCase_ = 5;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.tx validate_transaction = 5;</code>
       */
      public Builder mergeValidateTransaction(libbitcoin.protocol.Interface.tx value) {
        if (validateTransactionBuilder_ == null) {
          if (requestTypeCase_ == 5 &&
              requestType_ != libbitcoin.protocol.Interface.tx.getDefaultInstance()) {
            requestType_ = libbitcoin.protocol.Interface.tx.newBuilder((libbitcoin.protocol.Interface.tx) requestType_)
                .mergeFrom(value).buildPartial();
          } else {
            requestType_ = value;
          }
          onChanged();
        } else {
          if (requestTypeCase_ == 5) {
            validateTransactionBuilder_.mergeFrom(value);
          }
          validateTransactionBuilder_.setMessage(value);
        }
        requestTypeCase_ = 5;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.tx validate_transaction = 5;</code>
       */
      public Builder clearValidateTransaction() {
        if (validateTransactionBuilder_ == null) {
          if (requestTypeCase_ == 5) {
            requestTypeCase_ = 0;
            requestType_ = null;
            onChanged();
          }
        } else {
          if (requestTypeCase_ == 5) {
            requestTypeCase_ = 0;
            requestType_ = null;
          }
          validateTransactionBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.tx validate_transaction = 5;</code>
       */
      public libbitcoin.protocol.Interface.tx.Builder getValidateTransactionBuilder() {
        return getValidateTransactionFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .libbitcoin.protocol.tx validate_transaction = 5;</code>
       */
      public libbitcoin.protocol.Interface.txOrBuilder getValidateTransactionOrBuilder() {
        if ((requestTypeCase_ == 5) && (validateTransactionBuilder_ != null)) {
          return validateTransactionBuilder_.getMessageOrBuilder();
        } else {
          if (requestTypeCase_ == 5) {
            return (libbitcoin.protocol.Interface.tx) requestType_;
          }
          return libbitcoin.protocol.Interface.tx.getDefaultInstance();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.tx validate_transaction = 5;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.tx, libbitcoin.protocol.Interface.tx.Builder, libbitcoin.protocol.Interface.txOrBuilder> 
          getValidateTransactionFieldBuilder() {
        if (validateTransactionBuilder_ == null) {
          if (!(requestTypeCase_ == 5)) {
            requestType_ = libbitcoin.protocol.Interface.tx.getDefaultInstance();
          }
          validateTransactionBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.tx, libbitcoin.protocol.Interface.tx.Builder, libbitcoin.protocol.Interface.txOrBuilder>(
                  (libbitcoin.protocol.Interface.tx) requestType_,
                  getParentForChildren(),
                  isClean());
          requestType_ = null;
        }
        requestTypeCase_ = 5;
        return validateTransactionBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block, libbitcoin.protocol.Interface.block.Builder, libbitcoin.protocol.Interface.blockOrBuilder> postBlockBuilder_;
      /**
       * <code>optional .libbitcoin.protocol.block post_block = 6;</code>
       */
      public boolean hasPostBlock() {
        return requestTypeCase_ == 6;
      }
      /**
       * <code>optional .libbitcoin.protocol.block post_block = 6;</code>
       */
      public libbitcoin.protocol.Interface.block getPostBlock() {
        if (postBlockBuilder_ == null) {
          if (requestTypeCase_ == 6) {
            return (libbitcoin.protocol.Interface.block) requestType_;
          }
          return libbitcoin.protocol.Interface.block.getDefaultInstance();
        } else {
          if (requestTypeCase_ == 6) {
            return postBlockBuilder_.getMessage();
          }
          return libbitcoin.protocol.Interface.block.getDefaultInstance();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.block post_block = 6;</code>
       */
      public Builder setPostBlock(libbitcoin.protocol.Interface.block value) {
        if (postBlockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          requestType_ = value;
          onChanged();
        } else {
          postBlockBuilder_.setMessage(value);
        }
        requestTypeCase_ = 6;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block post_block = 6;</code>
       */
      public Builder setPostBlock(
          libbitcoin.protocol.Interface.block.Builder builderForValue) {
        if (postBlockBuilder_ == null) {
          requestType_ = builderForValue.build();
          onChanged();
        } else {
          postBlockBuilder_.setMessage(builderForValue.build());
        }
        requestTypeCase_ = 6;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block post_block = 6;</code>
       */
      public Builder mergePostBlock(libbitcoin.protocol.Interface.block value) {
        if (postBlockBuilder_ == null) {
          if (requestTypeCase_ == 6 &&
              requestType_ != libbitcoin.protocol.Interface.block.getDefaultInstance()) {
            requestType_ = libbitcoin.protocol.Interface.block.newBuilder((libbitcoin.protocol.Interface.block) requestType_)
                .mergeFrom(value).buildPartial();
          } else {
            requestType_ = value;
          }
          onChanged();
        } else {
          if (requestTypeCase_ == 6) {
            postBlockBuilder_.mergeFrom(value);
          }
          postBlockBuilder_.setMessage(value);
        }
        requestTypeCase_ = 6;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block post_block = 6;</code>
       */
      public Builder clearPostBlock() {
        if (postBlockBuilder_ == null) {
          if (requestTypeCase_ == 6) {
            requestTypeCase_ = 0;
            requestType_ = null;
            onChanged();
          }
        } else {
          if (requestTypeCase_ == 6) {
            requestTypeCase_ = 0;
            requestType_ = null;
          }
          postBlockBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block post_block = 6;</code>
       */
      public libbitcoin.protocol.Interface.block.Builder getPostBlockBuilder() {
        return getPostBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .libbitcoin.protocol.block post_block = 6;</code>
       */
      public libbitcoin.protocol.Interface.blockOrBuilder getPostBlockOrBuilder() {
        if ((requestTypeCase_ == 6) && (postBlockBuilder_ != null)) {
          return postBlockBuilder_.getMessageOrBuilder();
        } else {
          if (requestTypeCase_ == 6) {
            return (libbitcoin.protocol.Interface.block) requestType_;
          }
          return libbitcoin.protocol.Interface.block.getDefaultInstance();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.block post_block = 6;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block, libbitcoin.protocol.Interface.block.Builder, libbitcoin.protocol.Interface.blockOrBuilder> 
          getPostBlockFieldBuilder() {
        if (postBlockBuilder_ == null) {
          if (!(requestTypeCase_ == 6)) {
            requestType_ = libbitcoin.protocol.Interface.block.getDefaultInstance();
          }
          postBlockBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.block, libbitcoin.protocol.Interface.block.Builder, libbitcoin.protocol.Interface.blockOrBuilder>(
                  (libbitcoin.protocol.Interface.block) requestType_,
                  getParentForChildren(),
                  isClean());
          requestType_ = null;
        }
        requestTypeCase_ = 6;
        return postBlockBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block, libbitcoin.protocol.Interface.block.Builder, libbitcoin.protocol.Interface.blockOrBuilder> validateBlockBuilder_;
      /**
       * <code>optional .libbitcoin.protocol.block validate_block = 7;</code>
       */
      public boolean hasValidateBlock() {
        return requestTypeCase_ == 7;
      }
      /**
       * <code>optional .libbitcoin.protocol.block validate_block = 7;</code>
       */
      public libbitcoin.protocol.Interface.block getValidateBlock() {
        if (validateBlockBuilder_ == null) {
          if (requestTypeCase_ == 7) {
            return (libbitcoin.protocol.Interface.block) requestType_;
          }
          return libbitcoin.protocol.Interface.block.getDefaultInstance();
        } else {
          if (requestTypeCase_ == 7) {
            return validateBlockBuilder_.getMessage();
          }
          return libbitcoin.protocol.Interface.block.getDefaultInstance();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.block validate_block = 7;</code>
       */
      public Builder setValidateBlock(libbitcoin.protocol.Interface.block value) {
        if (validateBlockBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          requestType_ = value;
          onChanged();
        } else {
          validateBlockBuilder_.setMessage(value);
        }
        requestTypeCase_ = 7;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block validate_block = 7;</code>
       */
      public Builder setValidateBlock(
          libbitcoin.protocol.Interface.block.Builder builderForValue) {
        if (validateBlockBuilder_ == null) {
          requestType_ = builderForValue.build();
          onChanged();
        } else {
          validateBlockBuilder_.setMessage(builderForValue.build());
        }
        requestTypeCase_ = 7;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block validate_block = 7;</code>
       */
      public Builder mergeValidateBlock(libbitcoin.protocol.Interface.block value) {
        if (validateBlockBuilder_ == null) {
          if (requestTypeCase_ == 7 &&
              requestType_ != libbitcoin.protocol.Interface.block.getDefaultInstance()) {
            requestType_ = libbitcoin.protocol.Interface.block.newBuilder((libbitcoin.protocol.Interface.block) requestType_)
                .mergeFrom(value).buildPartial();
          } else {
            requestType_ = value;
          }
          onChanged();
        } else {
          if (requestTypeCase_ == 7) {
            validateBlockBuilder_.mergeFrom(value);
          }
          validateBlockBuilder_.setMessage(value);
        }
        requestTypeCase_ = 7;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block validate_block = 7;</code>
       */
      public Builder clearValidateBlock() {
        if (validateBlockBuilder_ == null) {
          if (requestTypeCase_ == 7) {
            requestTypeCase_ = 0;
            requestType_ = null;
            onChanged();
          }
        } else {
          if (requestTypeCase_ == 7) {
            requestTypeCase_ = 0;
            requestType_ = null;
          }
          validateBlockBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.block validate_block = 7;</code>
       */
      public libbitcoin.protocol.Interface.block.Builder getValidateBlockBuilder() {
        return getValidateBlockFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .libbitcoin.protocol.block validate_block = 7;</code>
       */
      public libbitcoin.protocol.Interface.blockOrBuilder getValidateBlockOrBuilder() {
        if ((requestTypeCase_ == 7) && (validateBlockBuilder_ != null)) {
          return validateBlockBuilder_.getMessageOrBuilder();
        } else {
          if (requestTypeCase_ == 7) {
            return (libbitcoin.protocol.Interface.block) requestType_;
          }
          return libbitcoin.protocol.Interface.block.getDefaultInstance();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.block validate_block = 7;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.block, libbitcoin.protocol.Interface.block.Builder, libbitcoin.protocol.Interface.blockOrBuilder> 
          getValidateBlockFieldBuilder() {
        if (validateBlockBuilder_ == null) {
          if (!(requestTypeCase_ == 7)) {
            requestType_ = libbitcoin.protocol.Interface.block.getDefaultInstance();
          }
          validateBlockBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.block, libbitcoin.protocol.Interface.block.Builder, libbitcoin.protocol.Interface.blockOrBuilder>(
                  (libbitcoin.protocol.Interface.block) requestType_,
                  getParentForChildren(),
                  isClean());
          requestType_ = null;
        }
        requestTypeCase_ = 7;
        return validateBlockBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.request)
    }

    static {
      defaultInstance = new request(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.request)
  }

  public interface responseOrBuilder extends
      // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.response)
      com.google.protobuf.GeneratedMessage.
          ExtendableMessageOrBuilder<response> {

    /**
     * <code>required uint32 id = 1;</code>
     */
    boolean hasId();
    /**
     * <code>required uint32 id = 1;</code>
     */
    int getId();

    /**
     * <code>optional sint32 status = 2;</code>
     *
     * <pre>
     * can encode error codes for calls
     * </pre>
     */
    boolean hasStatus();
    /**
     * <code>optional sint32 status = 2;</code>
     *
     * <pre>
     * can encode error codes for calls
     * </pre>
     */
    int getStatus();

    /**
     * <code>optional .libbitcoin.protocol.response.block_headers get_block_headers_response = 3;</code>
     */
    boolean hasGetBlockHeadersResponse();
    /**
     * <code>optional .libbitcoin.protocol.response.block_headers get_block_headers_response = 3;</code>
     */
    libbitcoin.protocol.Interface.response.block_headers getGetBlockHeadersResponse();
    /**
     * <code>optional .libbitcoin.protocol.response.block_headers get_block_headers_response = 3;</code>
     */
    libbitcoin.protocol.Interface.response.block_headersOrBuilder getGetBlockHeadersResponseOrBuilder();

    /**
     * <code>optional .libbitcoin.protocol.response.transactions get_transactions_response = 4;</code>
     */
    boolean hasGetTransactionsResponse();
    /**
     * <code>optional .libbitcoin.protocol.response.transactions get_transactions_response = 4;</code>
     */
    libbitcoin.protocol.Interface.response.transactions getGetTransactionsResponse();
    /**
     * <code>optional .libbitcoin.protocol.response.transactions get_transactions_response = 4;</code>
     */
    libbitcoin.protocol.Interface.response.transactionsOrBuilder getGetTransactionsResponseOrBuilder();

    /**
     * <code>optional bool post_transaction_succeeded = 5;</code>
     */
    boolean hasPostTransactionSucceeded();
    /**
     * <code>optional bool post_transaction_succeeded = 5;</code>
     */
    boolean getPostTransactionSucceeded();

    /**
     * <code>optional bool validate_transaction_succeeded = 6;</code>
     */
    boolean hasValidateTransactionSucceeded();
    /**
     * <code>optional bool validate_transaction_succeeded = 6;</code>
     */
    boolean getValidateTransactionSucceeded();

    /**
     * <code>optional bool post_block_succeeded = 7;</code>
     */
    boolean hasPostBlockSucceeded();
    /**
     * <code>optional bool post_block_succeeded = 7;</code>
     */
    boolean getPostBlockSucceeded();

    /**
     * <code>optional bool validate_block_succeeded = 8;</code>
     */
    boolean hasValidateBlockSucceeded();
    /**
     * <code>optional bool validate_block_succeeded = 8;</code>
     */
    boolean getValidateBlockSucceeded();
  }
  /**
   * Protobuf type {@code libbitcoin.protocol.response}
   *
   * <pre>
   *
   * Server response
   *
   * </pre>
   */
  public static final class response extends
      com.google.protobuf.GeneratedMessage.ExtendableMessage<
        response> implements
      // @@protoc_insertion_point(message_implements:libbitcoin.protocol.response)
      responseOrBuilder {
    // Use response.newBuilder() to construct.
    private response(com.google.protobuf.GeneratedMessage.ExtendableBuilder<libbitcoin.protocol.Interface.response, ?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private response(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final response defaultInstance;
    public static response getDefaultInstance() {
      return defaultInstance;
    }

    public response getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private response(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              id_ = input.readUInt32();
              break;
            }
            case 16: {
              bitField0_ |= 0x00000002;
              status_ = input.readSInt32();
              break;
            }
            case 26: {
              libbitcoin.protocol.Interface.response.block_headers.Builder subBuilder = null;
              if (responseTypeCase_ == 3) {
                subBuilder = ((libbitcoin.protocol.Interface.response.block_headers) responseType_).toBuilder();
              }
              responseType_ = input.readMessage(libbitcoin.protocol.Interface.response.block_headers.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((libbitcoin.protocol.Interface.response.block_headers) responseType_);
                responseType_ = subBuilder.buildPartial();
              }
              responseTypeCase_ = 3;
              break;
            }
            case 34: {
              libbitcoin.protocol.Interface.response.transactions.Builder subBuilder = null;
              if (responseTypeCase_ == 4) {
                subBuilder = ((libbitcoin.protocol.Interface.response.transactions) responseType_).toBuilder();
              }
              responseType_ = input.readMessage(libbitcoin.protocol.Interface.response.transactions.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((libbitcoin.protocol.Interface.response.transactions) responseType_);
                responseType_ = subBuilder.buildPartial();
              }
              responseTypeCase_ = 4;
              break;
            }
            case 40: {
              responseTypeCase_ = 5;
              responseType_ = input.readBool();
              break;
            }
            case 48: {
              responseTypeCase_ = 6;
              responseType_ = input.readBool();
              break;
            }
            case 56: {
              responseTypeCase_ = 7;
              responseType_ = input.readBool();
              break;
            }
            case 64: {
              responseTypeCase_ = 8;
              responseType_ = input.readBool();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_response_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_response_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              libbitcoin.protocol.Interface.response.class, libbitcoin.protocol.Interface.response.Builder.class);
    }

    public static com.google.protobuf.Parser<response> PARSER =
        new com.google.protobuf.AbstractParser<response>() {
      public response parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new response(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<response> getParserForType() {
      return PARSER;
    }

    public interface block_headersOrBuilder extends
        // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.response.block_headers)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
       */
      boolean hasNext();
      /**
       * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
       */
      libbitcoin.protocol.Interface.block_id getNext();
      /**
       * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
       */
      libbitcoin.protocol.Interface.block_idOrBuilder getNextOrBuilder();

      /**
       * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
       */
      boolean hasTop();
      /**
       * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
       */
      libbitcoin.protocol.Interface.block_id getTop();
      /**
       * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
       */
      libbitcoin.protocol.Interface.block_idOrBuilder getTopOrBuilder();

      /**
       * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
       */
      java.util.List<libbitcoin.protocol.Interface.block_header> 
          getHeadersList();
      /**
       * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
       */
      libbitcoin.protocol.Interface.block_header getHeaders(int index);
      /**
       * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
       */
      int getHeadersCount();
      /**
       * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
       */
      java.util.List<? extends libbitcoin.protocol.Interface.block_headerOrBuilder> 
          getHeadersOrBuilderList();
      /**
       * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
       */
      libbitcoin.protocol.Interface.block_headerOrBuilder getHeadersOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.response.block_headers}
     */
    public static final class block_headers extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:libbitcoin.protocol.response.block_headers)
        block_headersOrBuilder {
      // Use block_headers.newBuilder() to construct.
      private block_headers(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private block_headers(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final block_headers defaultInstance;
      public static block_headers getDefaultInstance() {
        return defaultInstance;
      }

      public block_headers getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private block_headers(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                libbitcoin.protocol.Interface.block_id.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = next_.toBuilder();
                }
                next_ = input.readMessage(libbitcoin.protocol.Interface.block_id.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(next_);
                  next_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
              case 18: {
                libbitcoin.protocol.Interface.block_id.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = top_.toBuilder();
                }
                top_ = input.readMessage(libbitcoin.protocol.Interface.block_id.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(top_);
                  top_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 26: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  headers_ = new java.util.ArrayList<libbitcoin.protocol.Interface.block_header>();
                  mutable_bitField0_ |= 0x00000004;
                }
                headers_.add(input.readMessage(libbitcoin.protocol.Interface.block_header.PARSER, extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            headers_ = java.util.Collections.unmodifiableList(headers_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_response_block_headers_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_response_block_headers_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.response.block_headers.class, libbitcoin.protocol.Interface.response.block_headers.Builder.class);
      }

      public static com.google.protobuf.Parser<block_headers> PARSER =
          new com.google.protobuf.AbstractParser<block_headers>() {
        public block_headers parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new block_headers(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<block_headers> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      public static final int NEXT_FIELD_NUMBER = 1;
      private libbitcoin.protocol.Interface.block_id next_;
      /**
       * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
       */
      public boolean hasNext() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
       */
      public libbitcoin.protocol.Interface.block_id getNext() {
        return next_;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
       */
      public libbitcoin.protocol.Interface.block_idOrBuilder getNextOrBuilder() {
        return next_;
      }

      public static final int TOP_FIELD_NUMBER = 2;
      private libbitcoin.protocol.Interface.block_id top_;
      /**
       * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
       */
      public boolean hasTop() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
       */
      public libbitcoin.protocol.Interface.block_id getTop() {
        return top_;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
       */
      public libbitcoin.protocol.Interface.block_idOrBuilder getTopOrBuilder() {
        return top_;
      }

      public static final int HEADERS_FIELD_NUMBER = 3;
      private java.util.List<libbitcoin.protocol.Interface.block_header> headers_;
      /**
       * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
       */
      public java.util.List<libbitcoin.protocol.Interface.block_header> getHeadersList() {
        return headers_;
      }
      /**
       * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
       */
      public java.util.List<? extends libbitcoin.protocol.Interface.block_headerOrBuilder> 
          getHeadersOrBuilderList() {
        return headers_;
      }
      /**
       * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
       */
      public int getHeadersCount() {
        return headers_.size();
      }
      /**
       * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
       */
      public libbitcoin.protocol.Interface.block_header getHeaders(int index) {
        return headers_.get(index);
      }
      /**
       * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
       */
      public libbitcoin.protocol.Interface.block_headerOrBuilder getHeadersOrBuilder(
          int index) {
        return headers_.get(index);
      }

      private void initFields() {
        next_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
        top_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
        headers_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        for (int i = 0; i < getHeadersCount(); i++) {
          if (!getHeaders(i).isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, next_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, top_);
        }
        for (int i = 0; i < headers_.size(); i++) {
          output.writeMessage(3, headers_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, next_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, top_);
        }
        for (int i = 0; i < headers_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, headers_.get(i));
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static libbitcoin.protocol.Interface.response.block_headers parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static libbitcoin.protocol.Interface.response.block_headers parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static libbitcoin.protocol.Interface.response.block_headers parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static libbitcoin.protocol.Interface.response.block_headers parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static libbitcoin.protocol.Interface.response.block_headers parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static libbitcoin.protocol.Interface.response.block_headers parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static libbitcoin.protocol.Interface.response.block_headers parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static libbitcoin.protocol.Interface.response.block_headers parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static libbitcoin.protocol.Interface.response.block_headers parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static libbitcoin.protocol.Interface.response.block_headers parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(libbitcoin.protocol.Interface.response.block_headers prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code libbitcoin.protocol.response.block_headers}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.response.block_headers)
          libbitcoin.protocol.Interface.response.block_headersOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_response_block_headers_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_response_block_headers_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  libbitcoin.protocol.Interface.response.block_headers.class, libbitcoin.protocol.Interface.response.block_headers.Builder.class);
        }

        // Construct using libbitcoin.protocol.Interface.response.block_headers.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getNextFieldBuilder();
            getTopFieldBuilder();
            getHeadersFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (nextBuilder_ == null) {
            next_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
          } else {
            nextBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          if (topBuilder_ == null) {
            top_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
          } else {
            topBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          if (headersBuilder_ == null) {
            headers_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            headersBuilder_.clear();
          }
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_response_block_headers_descriptor;
        }

        public libbitcoin.protocol.Interface.response.block_headers getDefaultInstanceForType() {
          return libbitcoin.protocol.Interface.response.block_headers.getDefaultInstance();
        }

        public libbitcoin.protocol.Interface.response.block_headers build() {
          libbitcoin.protocol.Interface.response.block_headers result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public libbitcoin.protocol.Interface.response.block_headers buildPartial() {
          libbitcoin.protocol.Interface.response.block_headers result = new libbitcoin.protocol.Interface.response.block_headers(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (nextBuilder_ == null) {
            result.next_ = next_;
          } else {
            result.next_ = nextBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (topBuilder_ == null) {
            result.top_ = top_;
          } else {
            result.top_ = topBuilder_.build();
          }
          if (headersBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
              headers_ = java.util.Collections.unmodifiableList(headers_);
              bitField0_ = (bitField0_ & ~0x00000004);
            }
            result.headers_ = headers_;
          } else {
            result.headers_ = headersBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof libbitcoin.protocol.Interface.response.block_headers) {
            return mergeFrom((libbitcoin.protocol.Interface.response.block_headers)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(libbitcoin.protocol.Interface.response.block_headers other) {
          if (other == libbitcoin.protocol.Interface.response.block_headers.getDefaultInstance()) return this;
          if (other.hasNext()) {
            mergeNext(other.getNext());
          }
          if (other.hasTop()) {
            mergeTop(other.getTop());
          }
          if (headersBuilder_ == null) {
            if (!other.headers_.isEmpty()) {
              if (headers_.isEmpty()) {
                headers_ = other.headers_;
                bitField0_ = (bitField0_ & ~0x00000004);
              } else {
                ensureHeadersIsMutable();
                headers_.addAll(other.headers_);
              }
              onChanged();
            }
          } else {
            if (!other.headers_.isEmpty()) {
              if (headersBuilder_.isEmpty()) {
                headersBuilder_.dispose();
                headersBuilder_ = null;
                headers_ = other.headers_;
                bitField0_ = (bitField0_ & ~0x00000004);
                headersBuilder_ = 
                  com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getHeadersFieldBuilder() : null;
              } else {
                headersBuilder_.addAllMessages(other.headers_);
              }
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          for (int i = 0; i < getHeadersCount(); i++) {
            if (!getHeaders(i).isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          libbitcoin.protocol.Interface.response.block_headers parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (libbitcoin.protocol.Interface.response.block_headers) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private libbitcoin.protocol.Interface.block_id next_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder> nextBuilder_;
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        public boolean hasNext() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        public libbitcoin.protocol.Interface.block_id getNext() {
          if (nextBuilder_ == null) {
            return next_;
          } else {
            return nextBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        public Builder setNext(libbitcoin.protocol.Interface.block_id value) {
          if (nextBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            next_ = value;
            onChanged();
          } else {
            nextBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        public Builder setNext(
            libbitcoin.protocol.Interface.block_id.Builder builderForValue) {
          if (nextBuilder_ == null) {
            next_ = builderForValue.build();
            onChanged();
          } else {
            nextBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        public Builder mergeNext(libbitcoin.protocol.Interface.block_id value) {
          if (nextBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                next_ != libbitcoin.protocol.Interface.block_id.getDefaultInstance()) {
              next_ =
                libbitcoin.protocol.Interface.block_id.newBuilder(next_).mergeFrom(value).buildPartial();
            } else {
              next_ = value;
            }
            onChanged();
          } else {
            nextBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        public Builder clearNext() {
          if (nextBuilder_ == null) {
            next_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
            onChanged();
          } else {
            nextBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        public libbitcoin.protocol.Interface.block_id.Builder getNextBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getNextFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        public libbitcoin.protocol.Interface.block_idOrBuilder getNextOrBuilder() {
          if (nextBuilder_ != null) {
            return nextBuilder_.getMessageOrBuilder();
          } else {
            return next_;
          }
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder> 
            getNextFieldBuilder() {
          if (nextBuilder_ == null) {
            nextBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder>(
                    getNext(),
                    getParentForChildren(),
                    isClean());
            next_ = null;
          }
          return nextBuilder_;
        }

        private libbitcoin.protocol.Interface.block_id top_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder> topBuilder_;
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        public boolean hasTop() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        public libbitcoin.protocol.Interface.block_id getTop() {
          if (topBuilder_ == null) {
            return top_;
          } else {
            return topBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        public Builder setTop(libbitcoin.protocol.Interface.block_id value) {
          if (topBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            top_ = value;
            onChanged();
          } else {
            topBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        public Builder setTop(
            libbitcoin.protocol.Interface.block_id.Builder builderForValue) {
          if (topBuilder_ == null) {
            top_ = builderForValue.build();
            onChanged();
          } else {
            topBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        public Builder mergeTop(libbitcoin.protocol.Interface.block_id value) {
          if (topBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                top_ != libbitcoin.protocol.Interface.block_id.getDefaultInstance()) {
              top_ =
                libbitcoin.protocol.Interface.block_id.newBuilder(top_).mergeFrom(value).buildPartial();
            } else {
              top_ = value;
            }
            onChanged();
          } else {
            topBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        public Builder clearTop() {
          if (topBuilder_ == null) {
            top_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
            onChanged();
          } else {
            topBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        public libbitcoin.protocol.Interface.block_id.Builder getTopBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getTopFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        public libbitcoin.protocol.Interface.block_idOrBuilder getTopOrBuilder() {
          if (topBuilder_ != null) {
            return topBuilder_.getMessageOrBuilder();
          } else {
            return top_;
          }
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder> 
            getTopFieldBuilder() {
          if (topBuilder_ == null) {
            topBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder>(
                    getTop(),
                    getParentForChildren(),
                    isClean());
            top_ = null;
          }
          return topBuilder_;
        }

        private java.util.List<libbitcoin.protocol.Interface.block_header> headers_ =
          java.util.Collections.emptyList();
        private void ensureHeadersIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            headers_ = new java.util.ArrayList<libbitcoin.protocol.Interface.block_header>(headers_);
            bitField0_ |= 0x00000004;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilder<
            libbitcoin.protocol.Interface.block_header, libbitcoin.protocol.Interface.block_header.Builder, libbitcoin.protocol.Interface.block_headerOrBuilder> headersBuilder_;

        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public java.util.List<libbitcoin.protocol.Interface.block_header> getHeadersList() {
          if (headersBuilder_ == null) {
            return java.util.Collections.unmodifiableList(headers_);
          } else {
            return headersBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public int getHeadersCount() {
          if (headersBuilder_ == null) {
            return headers_.size();
          } else {
            return headersBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public libbitcoin.protocol.Interface.block_header getHeaders(int index) {
          if (headersBuilder_ == null) {
            return headers_.get(index);
          } else {
            return headersBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public Builder setHeaders(
            int index, libbitcoin.protocol.Interface.block_header value) {
          if (headersBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureHeadersIsMutable();
            headers_.set(index, value);
            onChanged();
          } else {
            headersBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public Builder setHeaders(
            int index, libbitcoin.protocol.Interface.block_header.Builder builderForValue) {
          if (headersBuilder_ == null) {
            ensureHeadersIsMutable();
            headers_.set(index, builderForValue.build());
            onChanged();
          } else {
            headersBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public Builder addHeaders(libbitcoin.protocol.Interface.block_header value) {
          if (headersBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureHeadersIsMutable();
            headers_.add(value);
            onChanged();
          } else {
            headersBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public Builder addHeaders(
            int index, libbitcoin.protocol.Interface.block_header value) {
          if (headersBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureHeadersIsMutable();
            headers_.add(index, value);
            onChanged();
          } else {
            headersBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public Builder addHeaders(
            libbitcoin.protocol.Interface.block_header.Builder builderForValue) {
          if (headersBuilder_ == null) {
            ensureHeadersIsMutable();
            headers_.add(builderForValue.build());
            onChanged();
          } else {
            headersBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public Builder addHeaders(
            int index, libbitcoin.protocol.Interface.block_header.Builder builderForValue) {
          if (headersBuilder_ == null) {
            ensureHeadersIsMutable();
            headers_.add(index, builderForValue.build());
            onChanged();
          } else {
            headersBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public Builder addAllHeaders(
            java.lang.Iterable<? extends libbitcoin.protocol.Interface.block_header> values) {
          if (headersBuilder_ == null) {
            ensureHeadersIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, headers_);
            onChanged();
          } else {
            headersBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public Builder clearHeaders() {
          if (headersBuilder_ == null) {
            headers_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
            onChanged();
          } else {
            headersBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public Builder removeHeaders(int index) {
          if (headersBuilder_ == null) {
            ensureHeadersIsMutable();
            headers_.remove(index);
            onChanged();
          } else {
            headersBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public libbitcoin.protocol.Interface.block_header.Builder getHeadersBuilder(
            int index) {
          return getHeadersFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public libbitcoin.protocol.Interface.block_headerOrBuilder getHeadersOrBuilder(
            int index) {
          if (headersBuilder_ == null) {
            return headers_.get(index);  } else {
            return headersBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public java.util.List<? extends libbitcoin.protocol.Interface.block_headerOrBuilder> 
             getHeadersOrBuilderList() {
          if (headersBuilder_ != null) {
            return headersBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(headers_);
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public libbitcoin.protocol.Interface.block_header.Builder addHeadersBuilder() {
          return getHeadersFieldBuilder().addBuilder(
              libbitcoin.protocol.Interface.block_header.getDefaultInstance());
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public libbitcoin.protocol.Interface.block_header.Builder addHeadersBuilder(
            int index) {
          return getHeadersFieldBuilder().addBuilder(
              index, libbitcoin.protocol.Interface.block_header.getDefaultInstance());
        }
        /**
         * <code>repeated .libbitcoin.protocol.block_header headers = 3;</code>
         */
        public java.util.List<libbitcoin.protocol.Interface.block_header.Builder> 
             getHeadersBuilderList() {
          return getHeadersFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilder<
            libbitcoin.protocol.Interface.block_header, libbitcoin.protocol.Interface.block_header.Builder, libbitcoin.protocol.Interface.block_headerOrBuilder> 
            getHeadersFieldBuilder() {
          if (headersBuilder_ == null) {
            headersBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                libbitcoin.protocol.Interface.block_header, libbitcoin.protocol.Interface.block_header.Builder, libbitcoin.protocol.Interface.block_headerOrBuilder>(
                    headers_,
                    ((bitField0_ & 0x00000004) == 0x00000004),
                    getParentForChildren(),
                    isClean());
            headers_ = null;
          }
          return headersBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.response.block_headers)
      }

      static {
        defaultInstance = new block_headers(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:libbitcoin.protocol.response.block_headers)
    }

    public interface transactionsOrBuilder extends
        // @@protoc_insertion_point(interface_extends:libbitcoin.protocol.response.transactions)
        com.google.protobuf.MessageOrBuilder {

      /**
       * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
       */
      boolean hasNext();
      /**
       * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
       */
      libbitcoin.protocol.Interface.block_id getNext();
      /**
       * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
       */
      libbitcoin.protocol.Interface.block_idOrBuilder getNextOrBuilder();

      /**
       * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
       */
      boolean hasTop();
      /**
       * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
       */
      libbitcoin.protocol.Interface.block_id getTop();
      /**
       * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
       */
      libbitcoin.protocol.Interface.block_idOrBuilder getTopOrBuilder();

      /**
       * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
       */
      java.util.List<libbitcoin.protocol.Interface.tx_hash_result> 
          getHashesList();
      /**
       * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
       */
      libbitcoin.protocol.Interface.tx_hash_result getHashes(int index);
      /**
       * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
       */
      int getHashesCount();
      /**
       * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
       */
      java.util.List<? extends libbitcoin.protocol.Interface.tx_hash_resultOrBuilder> 
          getHashesOrBuilderList();
      /**
       * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
       */
      libbitcoin.protocol.Interface.tx_hash_resultOrBuilder getHashesOrBuilder(
          int index);

      /**
       * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
       */
      java.util.List<libbitcoin.protocol.Interface.tx_result> 
          getTransactionsList();
      /**
       * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
       */
      libbitcoin.protocol.Interface.tx_result getTransactions(int index);
      /**
       * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
       */
      int getTransactionsCount();
      /**
       * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
       */
      java.util.List<? extends libbitcoin.protocol.Interface.tx_resultOrBuilder> 
          getTransactionsOrBuilderList();
      /**
       * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
       */
      libbitcoin.protocol.Interface.tx_resultOrBuilder getTransactionsOrBuilder(
          int index);

      /**
       * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
       */
      java.util.List<libbitcoin.protocol.Interface.utxo_result> 
          getUtxosList();
      /**
       * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
       */
      libbitcoin.protocol.Interface.utxo_result getUtxos(int index);
      /**
       * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
       */
      int getUtxosCount();
      /**
       * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
       */
      java.util.List<? extends libbitcoin.protocol.Interface.utxo_resultOrBuilder> 
          getUtxosOrBuilderList();
      /**
       * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
       */
      libbitcoin.protocol.Interface.utxo_resultOrBuilder getUtxosOrBuilder(
          int index);
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.response.transactions}
     */
    public static final class transactions extends
        com.google.protobuf.GeneratedMessage implements
        // @@protoc_insertion_point(message_implements:libbitcoin.protocol.response.transactions)
        transactionsOrBuilder {
      // Use transactions.newBuilder() to construct.
      private transactions(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
        super(builder);
        this.unknownFields = builder.getUnknownFields();
      }
      private transactions(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

      private static final transactions defaultInstance;
      public static transactions getDefaultInstance() {
        return defaultInstance;
      }

      public transactions getDefaultInstanceForType() {
        return defaultInstance;
      }

      private final com.google.protobuf.UnknownFieldSet unknownFields;
      @java.lang.Override
      public final com.google.protobuf.UnknownFieldSet
          getUnknownFields() {
        return this.unknownFields;
      }
      private transactions(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        initFields();
        int mutable_bitField0_ = 0;
        com.google.protobuf.UnknownFieldSet.Builder unknownFields =
            com.google.protobuf.UnknownFieldSet.newBuilder();
        try {
          boolean done = false;
          while (!done) {
            int tag = input.readTag();
            switch (tag) {
              case 0:
                done = true;
                break;
              default: {
                if (!parseUnknownField(input, unknownFields,
                                       extensionRegistry, tag)) {
                  done = true;
                }
                break;
              }
              case 10: {
                libbitcoin.protocol.Interface.block_id.Builder subBuilder = null;
                if (((bitField0_ & 0x00000001) == 0x00000001)) {
                  subBuilder = next_.toBuilder();
                }
                next_ = input.readMessage(libbitcoin.protocol.Interface.block_id.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(next_);
                  next_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000001;
                break;
              }
              case 18: {
                libbitcoin.protocol.Interface.block_id.Builder subBuilder = null;
                if (((bitField0_ & 0x00000002) == 0x00000002)) {
                  subBuilder = top_.toBuilder();
                }
                top_ = input.readMessage(libbitcoin.protocol.Interface.block_id.PARSER, extensionRegistry);
                if (subBuilder != null) {
                  subBuilder.mergeFrom(top_);
                  top_ = subBuilder.buildPartial();
                }
                bitField0_ |= 0x00000002;
                break;
              }
              case 26: {
                if (!((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
                  hashes_ = new java.util.ArrayList<libbitcoin.protocol.Interface.tx_hash_result>();
                  mutable_bitField0_ |= 0x00000004;
                }
                hashes_.add(input.readMessage(libbitcoin.protocol.Interface.tx_hash_result.PARSER, extensionRegistry));
                break;
              }
              case 34: {
                if (!((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
                  transactions_ = new java.util.ArrayList<libbitcoin.protocol.Interface.tx_result>();
                  mutable_bitField0_ |= 0x00000008;
                }
                transactions_.add(input.readMessage(libbitcoin.protocol.Interface.tx_result.PARSER, extensionRegistry));
                break;
              }
              case 42: {
                if (!((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
                  utxos_ = new java.util.ArrayList<libbitcoin.protocol.Interface.utxo_result>();
                  mutable_bitField0_ |= 0x00000010;
                }
                utxos_.add(input.readMessage(libbitcoin.protocol.Interface.utxo_result.PARSER, extensionRegistry));
                break;
              }
            }
          }
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          throw e.setUnfinishedMessage(this);
        } catch (java.io.IOException e) {
          throw new com.google.protobuf.InvalidProtocolBufferException(
              e.getMessage()).setUnfinishedMessage(this);
        } finally {
          if (((mutable_bitField0_ & 0x00000004) == 0x00000004)) {
            hashes_ = java.util.Collections.unmodifiableList(hashes_);
          }
          if (((mutable_bitField0_ & 0x00000008) == 0x00000008)) {
            transactions_ = java.util.Collections.unmodifiableList(transactions_);
          }
          if (((mutable_bitField0_ & 0x00000010) == 0x00000010)) {
            utxos_ = java.util.Collections.unmodifiableList(utxos_);
          }
          this.unknownFields = unknownFields.build();
          makeExtensionsImmutable();
        }
      }
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_response_transactions_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_response_transactions_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.response.transactions.class, libbitcoin.protocol.Interface.response.transactions.Builder.class);
      }

      public static com.google.protobuf.Parser<transactions> PARSER =
          new com.google.protobuf.AbstractParser<transactions>() {
        public transactions parsePartialFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws com.google.protobuf.InvalidProtocolBufferException {
          return new transactions(input, extensionRegistry);
        }
      };

      @java.lang.Override
      public com.google.protobuf.Parser<transactions> getParserForType() {
        return PARSER;
      }

      private int bitField0_;
      public static final int NEXT_FIELD_NUMBER = 1;
      private libbitcoin.protocol.Interface.block_id next_;
      /**
       * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
       */
      public boolean hasNext() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
       */
      public libbitcoin.protocol.Interface.block_id getNext() {
        return next_;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
       */
      public libbitcoin.protocol.Interface.block_idOrBuilder getNextOrBuilder() {
        return next_;
      }

      public static final int TOP_FIELD_NUMBER = 2;
      private libbitcoin.protocol.Interface.block_id top_;
      /**
       * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
       */
      public boolean hasTop() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
       */
      public libbitcoin.protocol.Interface.block_id getTop() {
        return top_;
      }
      /**
       * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
       */
      public libbitcoin.protocol.Interface.block_idOrBuilder getTopOrBuilder() {
        return top_;
      }

      public static final int HASHES_FIELD_NUMBER = 3;
      private java.util.List<libbitcoin.protocol.Interface.tx_hash_result> hashes_;
      /**
       * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
       */
      public java.util.List<libbitcoin.protocol.Interface.tx_hash_result> getHashesList() {
        return hashes_;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
       */
      public java.util.List<? extends libbitcoin.protocol.Interface.tx_hash_resultOrBuilder> 
          getHashesOrBuilderList() {
        return hashes_;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
       */
      public int getHashesCount() {
        return hashes_.size();
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
       */
      public libbitcoin.protocol.Interface.tx_hash_result getHashes(int index) {
        return hashes_.get(index);
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
       */
      public libbitcoin.protocol.Interface.tx_hash_resultOrBuilder getHashesOrBuilder(
          int index) {
        return hashes_.get(index);
      }

      public static final int TRANSACTIONS_FIELD_NUMBER = 4;
      private java.util.List<libbitcoin.protocol.Interface.tx_result> transactions_;
      /**
       * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
       */
      public java.util.List<libbitcoin.protocol.Interface.tx_result> getTransactionsList() {
        return transactions_;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
       */
      public java.util.List<? extends libbitcoin.protocol.Interface.tx_resultOrBuilder> 
          getTransactionsOrBuilderList() {
        return transactions_;
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
       */
      public int getTransactionsCount() {
        return transactions_.size();
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
       */
      public libbitcoin.protocol.Interface.tx_result getTransactions(int index) {
        return transactions_.get(index);
      }
      /**
       * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
       */
      public libbitcoin.protocol.Interface.tx_resultOrBuilder getTransactionsOrBuilder(
          int index) {
        return transactions_.get(index);
      }

      public static final int UTXOS_FIELD_NUMBER = 5;
      private java.util.List<libbitcoin.protocol.Interface.utxo_result> utxos_;
      /**
       * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
       */
      public java.util.List<libbitcoin.protocol.Interface.utxo_result> getUtxosList() {
        return utxos_;
      }
      /**
       * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
       */
      public java.util.List<? extends libbitcoin.protocol.Interface.utxo_resultOrBuilder> 
          getUtxosOrBuilderList() {
        return utxos_;
      }
      /**
       * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
       */
      public int getUtxosCount() {
        return utxos_.size();
      }
      /**
       * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
       */
      public libbitcoin.protocol.Interface.utxo_result getUtxos(int index) {
        return utxos_.get(index);
      }
      /**
       * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
       */
      public libbitcoin.protocol.Interface.utxo_resultOrBuilder getUtxosOrBuilder(
          int index) {
        return utxos_.get(index);
      }

      private void initFields() {
        next_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
        top_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
        hashes_ = java.util.Collections.emptyList();
        transactions_ = java.util.Collections.emptyList();
        utxos_ = java.util.Collections.emptyList();
      }
      private byte memoizedIsInitialized = -1;
      public final boolean isInitialized() {
        byte isInitialized = memoizedIsInitialized;
        if (isInitialized == 1) return true;
        if (isInitialized == 0) return false;

        for (int i = 0; i < getHashesCount(); i++) {
          if (!getHashes(i).isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        for (int i = 0; i < getTransactionsCount(); i++) {
          if (!getTransactions(i).isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        for (int i = 0; i < getUtxosCount(); i++) {
          if (!getUtxos(i).isInitialized()) {
            memoizedIsInitialized = 0;
            return false;
          }
        }
        memoizedIsInitialized = 1;
        return true;
      }

      public void writeTo(com.google.protobuf.CodedOutputStream output)
                          throws java.io.IOException {
        getSerializedSize();
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          output.writeMessage(1, next_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          output.writeMessage(2, top_);
        }
        for (int i = 0; i < hashes_.size(); i++) {
          output.writeMessage(3, hashes_.get(i));
        }
        for (int i = 0; i < transactions_.size(); i++) {
          output.writeMessage(4, transactions_.get(i));
        }
        for (int i = 0; i < utxos_.size(); i++) {
          output.writeMessage(5, utxos_.get(i));
        }
        getUnknownFields().writeTo(output);
      }

      private int memoizedSerializedSize = -1;
      public int getSerializedSize() {
        int size = memoizedSerializedSize;
        if (size != -1) return size;

        size = 0;
        if (((bitField0_ & 0x00000001) == 0x00000001)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(1, next_);
        }
        if (((bitField0_ & 0x00000002) == 0x00000002)) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(2, top_);
        }
        for (int i = 0; i < hashes_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(3, hashes_.get(i));
        }
        for (int i = 0; i < transactions_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(4, transactions_.get(i));
        }
        for (int i = 0; i < utxos_.size(); i++) {
          size += com.google.protobuf.CodedOutputStream
            .computeMessageSize(5, utxos_.get(i));
        }
        size += getUnknownFields().getSerializedSize();
        memoizedSerializedSize = size;
        return size;
      }

      private static final long serialVersionUID = 0L;
      @java.lang.Override
      protected java.lang.Object writeReplace()
          throws java.io.ObjectStreamException {
        return super.writeReplace();
      }

      public static libbitcoin.protocol.Interface.response.transactions parseFrom(
          com.google.protobuf.ByteString data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static libbitcoin.protocol.Interface.response.transactions parseFrom(
          com.google.protobuf.ByteString data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static libbitcoin.protocol.Interface.response.transactions parseFrom(byte[] data)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data);
      }
      public static libbitcoin.protocol.Interface.response.transactions parseFrom(
          byte[] data,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return PARSER.parseFrom(data, extensionRegistry);
      }
      public static libbitcoin.protocol.Interface.response.transactions parseFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static libbitcoin.protocol.Interface.response.transactions parseFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }
      public static libbitcoin.protocol.Interface.response.transactions parseDelimitedFrom(java.io.InputStream input)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input);
      }
      public static libbitcoin.protocol.Interface.response.transactions parseDelimitedFrom(
          java.io.InputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseDelimitedFrom(input, extensionRegistry);
      }
      public static libbitcoin.protocol.Interface.response.transactions parseFrom(
          com.google.protobuf.CodedInputStream input)
          throws java.io.IOException {
        return PARSER.parseFrom(input);
      }
      public static libbitcoin.protocol.Interface.response.transactions parseFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        return PARSER.parseFrom(input, extensionRegistry);
      }

      public static Builder newBuilder() { return Builder.create(); }
      public Builder newBuilderForType() { return newBuilder(); }
      public static Builder newBuilder(libbitcoin.protocol.Interface.response.transactions prototype) {
        return newBuilder().mergeFrom(prototype);
      }
      public Builder toBuilder() { return newBuilder(this); }

      @java.lang.Override
      protected Builder newBuilderForType(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        Builder builder = new Builder(parent);
        return builder;
      }
      /**
       * Protobuf type {@code libbitcoin.protocol.response.transactions}
       */
      public static final class Builder extends
          com.google.protobuf.GeneratedMessage.Builder<Builder> implements
          // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.response.transactions)
          libbitcoin.protocol.Interface.response.transactionsOrBuilder {
        public static final com.google.protobuf.Descriptors.Descriptor
            getDescriptor() {
          return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_response_transactions_descriptor;
        }

        protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
            internalGetFieldAccessorTable() {
          return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_response_transactions_fieldAccessorTable
              .ensureFieldAccessorsInitialized(
                  libbitcoin.protocol.Interface.response.transactions.class, libbitcoin.protocol.Interface.response.transactions.Builder.class);
        }

        // Construct using libbitcoin.protocol.Interface.response.transactions.newBuilder()
        private Builder() {
          maybeForceBuilderInitialization();
        }

        private Builder(
            com.google.protobuf.GeneratedMessage.BuilderParent parent) {
          super(parent);
          maybeForceBuilderInitialization();
        }
        private void maybeForceBuilderInitialization() {
          if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
            getNextFieldBuilder();
            getTopFieldBuilder();
            getHashesFieldBuilder();
            getTransactionsFieldBuilder();
            getUtxosFieldBuilder();
          }
        }
        private static Builder create() {
          return new Builder();
        }

        public Builder clear() {
          super.clear();
          if (nextBuilder_ == null) {
            next_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
          } else {
            nextBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          if (topBuilder_ == null) {
            top_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
          } else {
            topBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          if (hashesBuilder_ == null) {
            hashes_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
          } else {
            hashesBuilder_.clear();
          }
          if (transactionsBuilder_ == null) {
            transactions_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000008);
          } else {
            transactionsBuilder_.clear();
          }
          if (utxosBuilder_ == null) {
            utxos_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000010);
          } else {
            utxosBuilder_.clear();
          }
          return this;
        }

        public Builder clone() {
          return create().mergeFrom(buildPartial());
        }

        public com.google.protobuf.Descriptors.Descriptor
            getDescriptorForType() {
          return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_response_transactions_descriptor;
        }

        public libbitcoin.protocol.Interface.response.transactions getDefaultInstanceForType() {
          return libbitcoin.protocol.Interface.response.transactions.getDefaultInstance();
        }

        public libbitcoin.protocol.Interface.response.transactions build() {
          libbitcoin.protocol.Interface.response.transactions result = buildPartial();
          if (!result.isInitialized()) {
            throw newUninitializedMessageException(result);
          }
          return result;
        }

        public libbitcoin.protocol.Interface.response.transactions buildPartial() {
          libbitcoin.protocol.Interface.response.transactions result = new libbitcoin.protocol.Interface.response.transactions(this);
          int from_bitField0_ = bitField0_;
          int to_bitField0_ = 0;
          if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
            to_bitField0_ |= 0x00000001;
          }
          if (nextBuilder_ == null) {
            result.next_ = next_;
          } else {
            result.next_ = nextBuilder_.build();
          }
          if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
            to_bitField0_ |= 0x00000002;
          }
          if (topBuilder_ == null) {
            result.top_ = top_;
          } else {
            result.top_ = topBuilder_.build();
          }
          if (hashesBuilder_ == null) {
            if (((bitField0_ & 0x00000004) == 0x00000004)) {
              hashes_ = java.util.Collections.unmodifiableList(hashes_);
              bitField0_ = (bitField0_ & ~0x00000004);
            }
            result.hashes_ = hashes_;
          } else {
            result.hashes_ = hashesBuilder_.build();
          }
          if (transactionsBuilder_ == null) {
            if (((bitField0_ & 0x00000008) == 0x00000008)) {
              transactions_ = java.util.Collections.unmodifiableList(transactions_);
              bitField0_ = (bitField0_ & ~0x00000008);
            }
            result.transactions_ = transactions_;
          } else {
            result.transactions_ = transactionsBuilder_.build();
          }
          if (utxosBuilder_ == null) {
            if (((bitField0_ & 0x00000010) == 0x00000010)) {
              utxos_ = java.util.Collections.unmodifiableList(utxos_);
              bitField0_ = (bitField0_ & ~0x00000010);
            }
            result.utxos_ = utxos_;
          } else {
            result.utxos_ = utxosBuilder_.build();
          }
          result.bitField0_ = to_bitField0_;
          onBuilt();
          return result;
        }

        public Builder mergeFrom(com.google.protobuf.Message other) {
          if (other instanceof libbitcoin.protocol.Interface.response.transactions) {
            return mergeFrom((libbitcoin.protocol.Interface.response.transactions)other);
          } else {
            super.mergeFrom(other);
            return this;
          }
        }

        public Builder mergeFrom(libbitcoin.protocol.Interface.response.transactions other) {
          if (other == libbitcoin.protocol.Interface.response.transactions.getDefaultInstance()) return this;
          if (other.hasNext()) {
            mergeNext(other.getNext());
          }
          if (other.hasTop()) {
            mergeTop(other.getTop());
          }
          if (hashesBuilder_ == null) {
            if (!other.hashes_.isEmpty()) {
              if (hashes_.isEmpty()) {
                hashes_ = other.hashes_;
                bitField0_ = (bitField0_ & ~0x00000004);
              } else {
                ensureHashesIsMutable();
                hashes_.addAll(other.hashes_);
              }
              onChanged();
            }
          } else {
            if (!other.hashes_.isEmpty()) {
              if (hashesBuilder_.isEmpty()) {
                hashesBuilder_.dispose();
                hashesBuilder_ = null;
                hashes_ = other.hashes_;
                bitField0_ = (bitField0_ & ~0x00000004);
                hashesBuilder_ = 
                  com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getHashesFieldBuilder() : null;
              } else {
                hashesBuilder_.addAllMessages(other.hashes_);
              }
            }
          }
          if (transactionsBuilder_ == null) {
            if (!other.transactions_.isEmpty()) {
              if (transactions_.isEmpty()) {
                transactions_ = other.transactions_;
                bitField0_ = (bitField0_ & ~0x00000008);
              } else {
                ensureTransactionsIsMutable();
                transactions_.addAll(other.transactions_);
              }
              onChanged();
            }
          } else {
            if (!other.transactions_.isEmpty()) {
              if (transactionsBuilder_.isEmpty()) {
                transactionsBuilder_.dispose();
                transactionsBuilder_ = null;
                transactions_ = other.transactions_;
                bitField0_ = (bitField0_ & ~0x00000008);
                transactionsBuilder_ = 
                  com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getTransactionsFieldBuilder() : null;
              } else {
                transactionsBuilder_.addAllMessages(other.transactions_);
              }
            }
          }
          if (utxosBuilder_ == null) {
            if (!other.utxos_.isEmpty()) {
              if (utxos_.isEmpty()) {
                utxos_ = other.utxos_;
                bitField0_ = (bitField0_ & ~0x00000010);
              } else {
                ensureUtxosIsMutable();
                utxos_.addAll(other.utxos_);
              }
              onChanged();
            }
          } else {
            if (!other.utxos_.isEmpty()) {
              if (utxosBuilder_.isEmpty()) {
                utxosBuilder_.dispose();
                utxosBuilder_ = null;
                utxos_ = other.utxos_;
                bitField0_ = (bitField0_ & ~0x00000010);
                utxosBuilder_ = 
                  com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders ?
                     getUtxosFieldBuilder() : null;
              } else {
                utxosBuilder_.addAllMessages(other.utxos_);
              }
            }
          }
          this.mergeUnknownFields(other.getUnknownFields());
          return this;
        }

        public final boolean isInitialized() {
          for (int i = 0; i < getHashesCount(); i++) {
            if (!getHashes(i).isInitialized()) {
              
              return false;
            }
          }
          for (int i = 0; i < getTransactionsCount(); i++) {
            if (!getTransactions(i).isInitialized()) {
              
              return false;
            }
          }
          for (int i = 0; i < getUtxosCount(); i++) {
            if (!getUtxos(i).isInitialized()) {
              
              return false;
            }
          }
          return true;
        }

        public Builder mergeFrom(
            com.google.protobuf.CodedInputStream input,
            com.google.protobuf.ExtensionRegistryLite extensionRegistry)
            throws java.io.IOException {
          libbitcoin.protocol.Interface.response.transactions parsedMessage = null;
          try {
            parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
          } catch (com.google.protobuf.InvalidProtocolBufferException e) {
            parsedMessage = (libbitcoin.protocol.Interface.response.transactions) e.getUnfinishedMessage();
            throw e;
          } finally {
            if (parsedMessage != null) {
              mergeFrom(parsedMessage);
            }
          }
          return this;
        }
        private int bitField0_;

        private libbitcoin.protocol.Interface.block_id next_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder> nextBuilder_;
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        public boolean hasNext() {
          return ((bitField0_ & 0x00000001) == 0x00000001);
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        public libbitcoin.protocol.Interface.block_id getNext() {
          if (nextBuilder_ == null) {
            return next_;
          } else {
            return nextBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        public Builder setNext(libbitcoin.protocol.Interface.block_id value) {
          if (nextBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            next_ = value;
            onChanged();
          } else {
            nextBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        public Builder setNext(
            libbitcoin.protocol.Interface.block_id.Builder builderForValue) {
          if (nextBuilder_ == null) {
            next_ = builderForValue.build();
            onChanged();
          } else {
            nextBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        public Builder mergeNext(libbitcoin.protocol.Interface.block_id value) {
          if (nextBuilder_ == null) {
            if (((bitField0_ & 0x00000001) == 0x00000001) &&
                next_ != libbitcoin.protocol.Interface.block_id.getDefaultInstance()) {
              next_ =
                libbitcoin.protocol.Interface.block_id.newBuilder(next_).mergeFrom(value).buildPartial();
            } else {
              next_ = value;
            }
            onChanged();
          } else {
            nextBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000001;
          return this;
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        public Builder clearNext() {
          if (nextBuilder_ == null) {
            next_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
            onChanged();
          } else {
            nextBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000001);
          return this;
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        public libbitcoin.protocol.Interface.block_id.Builder getNextBuilder() {
          bitField0_ |= 0x00000001;
          onChanged();
          return getNextFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        public libbitcoin.protocol.Interface.block_idOrBuilder getNextOrBuilder() {
          if (nextBuilder_ != null) {
            return nextBuilder_.getMessageOrBuilder();
          } else {
            return next_;
          }
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id next = 1;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder> 
            getNextFieldBuilder() {
          if (nextBuilder_ == null) {
            nextBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder>(
                    getNext(),
                    getParentForChildren(),
                    isClean());
            next_ = null;
          }
          return nextBuilder_;
        }

        private libbitcoin.protocol.Interface.block_id top_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
        private com.google.protobuf.SingleFieldBuilder<
            libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder> topBuilder_;
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        public boolean hasTop() {
          return ((bitField0_ & 0x00000002) == 0x00000002);
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        public libbitcoin.protocol.Interface.block_id getTop() {
          if (topBuilder_ == null) {
            return top_;
          } else {
            return topBuilder_.getMessage();
          }
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        public Builder setTop(libbitcoin.protocol.Interface.block_id value) {
          if (topBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            top_ = value;
            onChanged();
          } else {
            topBuilder_.setMessage(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        public Builder setTop(
            libbitcoin.protocol.Interface.block_id.Builder builderForValue) {
          if (topBuilder_ == null) {
            top_ = builderForValue.build();
            onChanged();
          } else {
            topBuilder_.setMessage(builderForValue.build());
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        public Builder mergeTop(libbitcoin.protocol.Interface.block_id value) {
          if (topBuilder_ == null) {
            if (((bitField0_ & 0x00000002) == 0x00000002) &&
                top_ != libbitcoin.protocol.Interface.block_id.getDefaultInstance()) {
              top_ =
                libbitcoin.protocol.Interface.block_id.newBuilder(top_).mergeFrom(value).buildPartial();
            } else {
              top_ = value;
            }
            onChanged();
          } else {
            topBuilder_.mergeFrom(value);
          }
          bitField0_ |= 0x00000002;
          return this;
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        public Builder clearTop() {
          if (topBuilder_ == null) {
            top_ = libbitcoin.protocol.Interface.block_id.getDefaultInstance();
            onChanged();
          } else {
            topBuilder_.clear();
          }
          bitField0_ = (bitField0_ & ~0x00000002);
          return this;
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        public libbitcoin.protocol.Interface.block_id.Builder getTopBuilder() {
          bitField0_ |= 0x00000002;
          onChanged();
          return getTopFieldBuilder().getBuilder();
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        public libbitcoin.protocol.Interface.block_idOrBuilder getTopOrBuilder() {
          if (topBuilder_ != null) {
            return topBuilder_.getMessageOrBuilder();
          } else {
            return top_;
          }
        }
        /**
         * <code>optional .libbitcoin.protocol.block_id top = 2;</code>
         */
        private com.google.protobuf.SingleFieldBuilder<
            libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder> 
            getTopFieldBuilder() {
          if (topBuilder_ == null) {
            topBuilder_ = new com.google.protobuf.SingleFieldBuilder<
                libbitcoin.protocol.Interface.block_id, libbitcoin.protocol.Interface.block_id.Builder, libbitcoin.protocol.Interface.block_idOrBuilder>(
                    getTop(),
                    getParentForChildren(),
                    isClean());
            top_ = null;
          }
          return topBuilder_;
        }

        private java.util.List<libbitcoin.protocol.Interface.tx_hash_result> hashes_ =
          java.util.Collections.emptyList();
        private void ensureHashesIsMutable() {
          if (!((bitField0_ & 0x00000004) == 0x00000004)) {
            hashes_ = new java.util.ArrayList<libbitcoin.protocol.Interface.tx_hash_result>(hashes_);
            bitField0_ |= 0x00000004;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilder<
            libbitcoin.protocol.Interface.tx_hash_result, libbitcoin.protocol.Interface.tx_hash_result.Builder, libbitcoin.protocol.Interface.tx_hash_resultOrBuilder> hashesBuilder_;

        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public java.util.List<libbitcoin.protocol.Interface.tx_hash_result> getHashesList() {
          if (hashesBuilder_ == null) {
            return java.util.Collections.unmodifiableList(hashes_);
          } else {
            return hashesBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public int getHashesCount() {
          if (hashesBuilder_ == null) {
            return hashes_.size();
          } else {
            return hashesBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public libbitcoin.protocol.Interface.tx_hash_result getHashes(int index) {
          if (hashesBuilder_ == null) {
            return hashes_.get(index);
          } else {
            return hashesBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public Builder setHashes(
            int index, libbitcoin.protocol.Interface.tx_hash_result value) {
          if (hashesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureHashesIsMutable();
            hashes_.set(index, value);
            onChanged();
          } else {
            hashesBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public Builder setHashes(
            int index, libbitcoin.protocol.Interface.tx_hash_result.Builder builderForValue) {
          if (hashesBuilder_ == null) {
            ensureHashesIsMutable();
            hashes_.set(index, builderForValue.build());
            onChanged();
          } else {
            hashesBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public Builder addHashes(libbitcoin.protocol.Interface.tx_hash_result value) {
          if (hashesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureHashesIsMutable();
            hashes_.add(value);
            onChanged();
          } else {
            hashesBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public Builder addHashes(
            int index, libbitcoin.protocol.Interface.tx_hash_result value) {
          if (hashesBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureHashesIsMutable();
            hashes_.add(index, value);
            onChanged();
          } else {
            hashesBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public Builder addHashes(
            libbitcoin.protocol.Interface.tx_hash_result.Builder builderForValue) {
          if (hashesBuilder_ == null) {
            ensureHashesIsMutable();
            hashes_.add(builderForValue.build());
            onChanged();
          } else {
            hashesBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public Builder addHashes(
            int index, libbitcoin.protocol.Interface.tx_hash_result.Builder builderForValue) {
          if (hashesBuilder_ == null) {
            ensureHashesIsMutable();
            hashes_.add(index, builderForValue.build());
            onChanged();
          } else {
            hashesBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public Builder addAllHashes(
            java.lang.Iterable<? extends libbitcoin.protocol.Interface.tx_hash_result> values) {
          if (hashesBuilder_ == null) {
            ensureHashesIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, hashes_);
            onChanged();
          } else {
            hashesBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public Builder clearHashes() {
          if (hashesBuilder_ == null) {
            hashes_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000004);
            onChanged();
          } else {
            hashesBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public Builder removeHashes(int index) {
          if (hashesBuilder_ == null) {
            ensureHashesIsMutable();
            hashes_.remove(index);
            onChanged();
          } else {
            hashesBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public libbitcoin.protocol.Interface.tx_hash_result.Builder getHashesBuilder(
            int index) {
          return getHashesFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public libbitcoin.protocol.Interface.tx_hash_resultOrBuilder getHashesOrBuilder(
            int index) {
          if (hashesBuilder_ == null) {
            return hashes_.get(index);  } else {
            return hashesBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public java.util.List<? extends libbitcoin.protocol.Interface.tx_hash_resultOrBuilder> 
             getHashesOrBuilderList() {
          if (hashesBuilder_ != null) {
            return hashesBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(hashes_);
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public libbitcoin.protocol.Interface.tx_hash_result.Builder addHashesBuilder() {
          return getHashesFieldBuilder().addBuilder(
              libbitcoin.protocol.Interface.tx_hash_result.getDefaultInstance());
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public libbitcoin.protocol.Interface.tx_hash_result.Builder addHashesBuilder(
            int index) {
          return getHashesFieldBuilder().addBuilder(
              index, libbitcoin.protocol.Interface.tx_hash_result.getDefaultInstance());
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_hash_result hashes = 3;</code>
         */
        public java.util.List<libbitcoin.protocol.Interface.tx_hash_result.Builder> 
             getHashesBuilderList() {
          return getHashesFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilder<
            libbitcoin.protocol.Interface.tx_hash_result, libbitcoin.protocol.Interface.tx_hash_result.Builder, libbitcoin.protocol.Interface.tx_hash_resultOrBuilder> 
            getHashesFieldBuilder() {
          if (hashesBuilder_ == null) {
            hashesBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                libbitcoin.protocol.Interface.tx_hash_result, libbitcoin.protocol.Interface.tx_hash_result.Builder, libbitcoin.protocol.Interface.tx_hash_resultOrBuilder>(
                    hashes_,
                    ((bitField0_ & 0x00000004) == 0x00000004),
                    getParentForChildren(),
                    isClean());
            hashes_ = null;
          }
          return hashesBuilder_;
        }

        private java.util.List<libbitcoin.protocol.Interface.tx_result> transactions_ =
          java.util.Collections.emptyList();
        private void ensureTransactionsIsMutable() {
          if (!((bitField0_ & 0x00000008) == 0x00000008)) {
            transactions_ = new java.util.ArrayList<libbitcoin.protocol.Interface.tx_result>(transactions_);
            bitField0_ |= 0x00000008;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilder<
            libbitcoin.protocol.Interface.tx_result, libbitcoin.protocol.Interface.tx_result.Builder, libbitcoin.protocol.Interface.tx_resultOrBuilder> transactionsBuilder_;

        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public java.util.List<libbitcoin.protocol.Interface.tx_result> getTransactionsList() {
          if (transactionsBuilder_ == null) {
            return java.util.Collections.unmodifiableList(transactions_);
          } else {
            return transactionsBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public int getTransactionsCount() {
          if (transactionsBuilder_ == null) {
            return transactions_.size();
          } else {
            return transactionsBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public libbitcoin.protocol.Interface.tx_result getTransactions(int index) {
          if (transactionsBuilder_ == null) {
            return transactions_.get(index);
          } else {
            return transactionsBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public Builder setTransactions(
            int index, libbitcoin.protocol.Interface.tx_result value) {
          if (transactionsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureTransactionsIsMutable();
            transactions_.set(index, value);
            onChanged();
          } else {
            transactionsBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public Builder setTransactions(
            int index, libbitcoin.protocol.Interface.tx_result.Builder builderForValue) {
          if (transactionsBuilder_ == null) {
            ensureTransactionsIsMutable();
            transactions_.set(index, builderForValue.build());
            onChanged();
          } else {
            transactionsBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public Builder addTransactions(libbitcoin.protocol.Interface.tx_result value) {
          if (transactionsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureTransactionsIsMutable();
            transactions_.add(value);
            onChanged();
          } else {
            transactionsBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public Builder addTransactions(
            int index, libbitcoin.protocol.Interface.tx_result value) {
          if (transactionsBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureTransactionsIsMutable();
            transactions_.add(index, value);
            onChanged();
          } else {
            transactionsBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public Builder addTransactions(
            libbitcoin.protocol.Interface.tx_result.Builder builderForValue) {
          if (transactionsBuilder_ == null) {
            ensureTransactionsIsMutable();
            transactions_.add(builderForValue.build());
            onChanged();
          } else {
            transactionsBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public Builder addTransactions(
            int index, libbitcoin.protocol.Interface.tx_result.Builder builderForValue) {
          if (transactionsBuilder_ == null) {
            ensureTransactionsIsMutable();
            transactions_.add(index, builderForValue.build());
            onChanged();
          } else {
            transactionsBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public Builder addAllTransactions(
            java.lang.Iterable<? extends libbitcoin.protocol.Interface.tx_result> values) {
          if (transactionsBuilder_ == null) {
            ensureTransactionsIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, transactions_);
            onChanged();
          } else {
            transactionsBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public Builder clearTransactions() {
          if (transactionsBuilder_ == null) {
            transactions_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000008);
            onChanged();
          } else {
            transactionsBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public Builder removeTransactions(int index) {
          if (transactionsBuilder_ == null) {
            ensureTransactionsIsMutable();
            transactions_.remove(index);
            onChanged();
          } else {
            transactionsBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public libbitcoin.protocol.Interface.tx_result.Builder getTransactionsBuilder(
            int index) {
          return getTransactionsFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public libbitcoin.protocol.Interface.tx_resultOrBuilder getTransactionsOrBuilder(
            int index) {
          if (transactionsBuilder_ == null) {
            return transactions_.get(index);  } else {
            return transactionsBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public java.util.List<? extends libbitcoin.protocol.Interface.tx_resultOrBuilder> 
             getTransactionsOrBuilderList() {
          if (transactionsBuilder_ != null) {
            return transactionsBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(transactions_);
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public libbitcoin.protocol.Interface.tx_result.Builder addTransactionsBuilder() {
          return getTransactionsFieldBuilder().addBuilder(
              libbitcoin.protocol.Interface.tx_result.getDefaultInstance());
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public libbitcoin.protocol.Interface.tx_result.Builder addTransactionsBuilder(
            int index) {
          return getTransactionsFieldBuilder().addBuilder(
              index, libbitcoin.protocol.Interface.tx_result.getDefaultInstance());
        }
        /**
         * <code>repeated .libbitcoin.protocol.tx_result transactions = 4;</code>
         */
        public java.util.List<libbitcoin.protocol.Interface.tx_result.Builder> 
             getTransactionsBuilderList() {
          return getTransactionsFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilder<
            libbitcoin.protocol.Interface.tx_result, libbitcoin.protocol.Interface.tx_result.Builder, libbitcoin.protocol.Interface.tx_resultOrBuilder> 
            getTransactionsFieldBuilder() {
          if (transactionsBuilder_ == null) {
            transactionsBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                libbitcoin.protocol.Interface.tx_result, libbitcoin.protocol.Interface.tx_result.Builder, libbitcoin.protocol.Interface.tx_resultOrBuilder>(
                    transactions_,
                    ((bitField0_ & 0x00000008) == 0x00000008),
                    getParentForChildren(),
                    isClean());
            transactions_ = null;
          }
          return transactionsBuilder_;
        }

        private java.util.List<libbitcoin.protocol.Interface.utxo_result> utxos_ =
          java.util.Collections.emptyList();
        private void ensureUtxosIsMutable() {
          if (!((bitField0_ & 0x00000010) == 0x00000010)) {
            utxos_ = new java.util.ArrayList<libbitcoin.protocol.Interface.utxo_result>(utxos_);
            bitField0_ |= 0x00000010;
           }
        }

        private com.google.protobuf.RepeatedFieldBuilder<
            libbitcoin.protocol.Interface.utxo_result, libbitcoin.protocol.Interface.utxo_result.Builder, libbitcoin.protocol.Interface.utxo_resultOrBuilder> utxosBuilder_;

        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public java.util.List<libbitcoin.protocol.Interface.utxo_result> getUtxosList() {
          if (utxosBuilder_ == null) {
            return java.util.Collections.unmodifiableList(utxos_);
          } else {
            return utxosBuilder_.getMessageList();
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public int getUtxosCount() {
          if (utxosBuilder_ == null) {
            return utxos_.size();
          } else {
            return utxosBuilder_.getCount();
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public libbitcoin.protocol.Interface.utxo_result getUtxos(int index) {
          if (utxosBuilder_ == null) {
            return utxos_.get(index);
          } else {
            return utxosBuilder_.getMessage(index);
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public Builder setUtxos(
            int index, libbitcoin.protocol.Interface.utxo_result value) {
          if (utxosBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureUtxosIsMutable();
            utxos_.set(index, value);
            onChanged();
          } else {
            utxosBuilder_.setMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public Builder setUtxos(
            int index, libbitcoin.protocol.Interface.utxo_result.Builder builderForValue) {
          if (utxosBuilder_ == null) {
            ensureUtxosIsMutable();
            utxos_.set(index, builderForValue.build());
            onChanged();
          } else {
            utxosBuilder_.setMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public Builder addUtxos(libbitcoin.protocol.Interface.utxo_result value) {
          if (utxosBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureUtxosIsMutable();
            utxos_.add(value);
            onChanged();
          } else {
            utxosBuilder_.addMessage(value);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public Builder addUtxos(
            int index, libbitcoin.protocol.Interface.utxo_result value) {
          if (utxosBuilder_ == null) {
            if (value == null) {
              throw new NullPointerException();
            }
            ensureUtxosIsMutable();
            utxos_.add(index, value);
            onChanged();
          } else {
            utxosBuilder_.addMessage(index, value);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public Builder addUtxos(
            libbitcoin.protocol.Interface.utxo_result.Builder builderForValue) {
          if (utxosBuilder_ == null) {
            ensureUtxosIsMutable();
            utxos_.add(builderForValue.build());
            onChanged();
          } else {
            utxosBuilder_.addMessage(builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public Builder addUtxos(
            int index, libbitcoin.protocol.Interface.utxo_result.Builder builderForValue) {
          if (utxosBuilder_ == null) {
            ensureUtxosIsMutable();
            utxos_.add(index, builderForValue.build());
            onChanged();
          } else {
            utxosBuilder_.addMessage(index, builderForValue.build());
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public Builder addAllUtxos(
            java.lang.Iterable<? extends libbitcoin.protocol.Interface.utxo_result> values) {
          if (utxosBuilder_ == null) {
            ensureUtxosIsMutable();
            com.google.protobuf.AbstractMessageLite.Builder.addAll(
                values, utxos_);
            onChanged();
          } else {
            utxosBuilder_.addAllMessages(values);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public Builder clearUtxos() {
          if (utxosBuilder_ == null) {
            utxos_ = java.util.Collections.emptyList();
            bitField0_ = (bitField0_ & ~0x00000010);
            onChanged();
          } else {
            utxosBuilder_.clear();
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public Builder removeUtxos(int index) {
          if (utxosBuilder_ == null) {
            ensureUtxosIsMutable();
            utxos_.remove(index);
            onChanged();
          } else {
            utxosBuilder_.remove(index);
          }
          return this;
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public libbitcoin.protocol.Interface.utxo_result.Builder getUtxosBuilder(
            int index) {
          return getUtxosFieldBuilder().getBuilder(index);
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public libbitcoin.protocol.Interface.utxo_resultOrBuilder getUtxosOrBuilder(
            int index) {
          if (utxosBuilder_ == null) {
            return utxos_.get(index);  } else {
            return utxosBuilder_.getMessageOrBuilder(index);
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public java.util.List<? extends libbitcoin.protocol.Interface.utxo_resultOrBuilder> 
             getUtxosOrBuilderList() {
          if (utxosBuilder_ != null) {
            return utxosBuilder_.getMessageOrBuilderList();
          } else {
            return java.util.Collections.unmodifiableList(utxos_);
          }
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public libbitcoin.protocol.Interface.utxo_result.Builder addUtxosBuilder() {
          return getUtxosFieldBuilder().addBuilder(
              libbitcoin.protocol.Interface.utxo_result.getDefaultInstance());
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public libbitcoin.protocol.Interface.utxo_result.Builder addUtxosBuilder(
            int index) {
          return getUtxosFieldBuilder().addBuilder(
              index, libbitcoin.protocol.Interface.utxo_result.getDefaultInstance());
        }
        /**
         * <code>repeated .libbitcoin.protocol.utxo_result utxos = 5;</code>
         */
        public java.util.List<libbitcoin.protocol.Interface.utxo_result.Builder> 
             getUtxosBuilderList() {
          return getUtxosFieldBuilder().getBuilderList();
        }
        private com.google.protobuf.RepeatedFieldBuilder<
            libbitcoin.protocol.Interface.utxo_result, libbitcoin.protocol.Interface.utxo_result.Builder, libbitcoin.protocol.Interface.utxo_resultOrBuilder> 
            getUtxosFieldBuilder() {
          if (utxosBuilder_ == null) {
            utxosBuilder_ = new com.google.protobuf.RepeatedFieldBuilder<
                libbitcoin.protocol.Interface.utxo_result, libbitcoin.protocol.Interface.utxo_result.Builder, libbitcoin.protocol.Interface.utxo_resultOrBuilder>(
                    utxos_,
                    ((bitField0_ & 0x00000010) == 0x00000010),
                    getParentForChildren(),
                    isClean());
            utxos_ = null;
          }
          return utxosBuilder_;
        }

        // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.response.transactions)
      }

      static {
        defaultInstance = new transactions(true);
        defaultInstance.initFields();
      }

      // @@protoc_insertion_point(class_scope:libbitcoin.protocol.response.transactions)
    }

    private int bitField0_;
    private int responseTypeCase_ = 0;
    private java.lang.Object responseType_;
    public enum ResponseTypeCase
        implements com.google.protobuf.Internal.EnumLite {
      GET_BLOCK_HEADERS_RESPONSE(3),
      GET_TRANSACTIONS_RESPONSE(4),
      POST_TRANSACTION_SUCCEEDED(5),
      VALIDATE_TRANSACTION_SUCCEEDED(6),
      POST_BLOCK_SUCCEEDED(7),
      VALIDATE_BLOCK_SUCCEEDED(8),
      RESPONSETYPE_NOT_SET(0);
      private int value = 0;
      private ResponseTypeCase(int value) {
        this.value = value;
      }
      public static ResponseTypeCase valueOf(int value) {
        switch (value) {
          case 3: return GET_BLOCK_HEADERS_RESPONSE;
          case 4: return GET_TRANSACTIONS_RESPONSE;
          case 5: return POST_TRANSACTION_SUCCEEDED;
          case 6: return VALIDATE_TRANSACTION_SUCCEEDED;
          case 7: return POST_BLOCK_SUCCEEDED;
          case 8: return VALIDATE_BLOCK_SUCCEEDED;
          case 0: return RESPONSETYPE_NOT_SET;
          default: throw new java.lang.IllegalArgumentException(
            "Value is undefined for this oneof enum.");
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ResponseTypeCase
    getResponseTypeCase() {
      return ResponseTypeCase.valueOf(
          responseTypeCase_);
    }

    public static final int ID_FIELD_NUMBER = 1;
    private int id_;
    /**
     * <code>required uint32 id = 1;</code>
     */
    public boolean hasId() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>required uint32 id = 1;</code>
     */
    public int getId() {
      return id_;
    }

    public static final int STATUS_FIELD_NUMBER = 2;
    private int status_;
    /**
     * <code>optional sint32 status = 2;</code>
     *
     * <pre>
     * can encode error codes for calls
     * </pre>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional sint32 status = 2;</code>
     *
     * <pre>
     * can encode error codes for calls
     * </pre>
     */
    public int getStatus() {
      return status_;
    }

    public static final int GET_BLOCK_HEADERS_RESPONSE_FIELD_NUMBER = 3;
    /**
     * <code>optional .libbitcoin.protocol.response.block_headers get_block_headers_response = 3;</code>
     */
    public boolean hasGetBlockHeadersResponse() {
      return responseTypeCase_ == 3;
    }
    /**
     * <code>optional .libbitcoin.protocol.response.block_headers get_block_headers_response = 3;</code>
     */
    public libbitcoin.protocol.Interface.response.block_headers getGetBlockHeadersResponse() {
      if (responseTypeCase_ == 3) {
         return (libbitcoin.protocol.Interface.response.block_headers) responseType_;
      }
      return libbitcoin.protocol.Interface.response.block_headers.getDefaultInstance();
    }
    /**
     * <code>optional .libbitcoin.protocol.response.block_headers get_block_headers_response = 3;</code>
     */
    public libbitcoin.protocol.Interface.response.block_headersOrBuilder getGetBlockHeadersResponseOrBuilder() {
      if (responseTypeCase_ == 3) {
         return (libbitcoin.protocol.Interface.response.block_headers) responseType_;
      }
      return libbitcoin.protocol.Interface.response.block_headers.getDefaultInstance();
    }

    public static final int GET_TRANSACTIONS_RESPONSE_FIELD_NUMBER = 4;
    /**
     * <code>optional .libbitcoin.protocol.response.transactions get_transactions_response = 4;</code>
     */
    public boolean hasGetTransactionsResponse() {
      return responseTypeCase_ == 4;
    }
    /**
     * <code>optional .libbitcoin.protocol.response.transactions get_transactions_response = 4;</code>
     */
    public libbitcoin.protocol.Interface.response.transactions getGetTransactionsResponse() {
      if (responseTypeCase_ == 4) {
         return (libbitcoin.protocol.Interface.response.transactions) responseType_;
      }
      return libbitcoin.protocol.Interface.response.transactions.getDefaultInstance();
    }
    /**
     * <code>optional .libbitcoin.protocol.response.transactions get_transactions_response = 4;</code>
     */
    public libbitcoin.protocol.Interface.response.transactionsOrBuilder getGetTransactionsResponseOrBuilder() {
      if (responseTypeCase_ == 4) {
         return (libbitcoin.protocol.Interface.response.transactions) responseType_;
      }
      return libbitcoin.protocol.Interface.response.transactions.getDefaultInstance();
    }

    public static final int POST_TRANSACTION_SUCCEEDED_FIELD_NUMBER = 5;
    /**
     * <code>optional bool post_transaction_succeeded = 5;</code>
     */
    public boolean hasPostTransactionSucceeded() {
      return responseTypeCase_ == 5;
    }
    /**
     * <code>optional bool post_transaction_succeeded = 5;</code>
     */
    public boolean getPostTransactionSucceeded() {
      if (responseTypeCase_ == 5) {
        return (java.lang.Boolean) responseType_;
      }
      return false;
    }

    public static final int VALIDATE_TRANSACTION_SUCCEEDED_FIELD_NUMBER = 6;
    /**
     * <code>optional bool validate_transaction_succeeded = 6;</code>
     */
    public boolean hasValidateTransactionSucceeded() {
      return responseTypeCase_ == 6;
    }
    /**
     * <code>optional bool validate_transaction_succeeded = 6;</code>
     */
    public boolean getValidateTransactionSucceeded() {
      if (responseTypeCase_ == 6) {
        return (java.lang.Boolean) responseType_;
      }
      return false;
    }

    public static final int POST_BLOCK_SUCCEEDED_FIELD_NUMBER = 7;
    /**
     * <code>optional bool post_block_succeeded = 7;</code>
     */
    public boolean hasPostBlockSucceeded() {
      return responseTypeCase_ == 7;
    }
    /**
     * <code>optional bool post_block_succeeded = 7;</code>
     */
    public boolean getPostBlockSucceeded() {
      if (responseTypeCase_ == 7) {
        return (java.lang.Boolean) responseType_;
      }
      return false;
    }

    public static final int VALIDATE_BLOCK_SUCCEEDED_FIELD_NUMBER = 8;
    /**
     * <code>optional bool validate_block_succeeded = 8;</code>
     */
    public boolean hasValidateBlockSucceeded() {
      return responseTypeCase_ == 8;
    }
    /**
     * <code>optional bool validate_block_succeeded = 8;</code>
     */
    public boolean getValidateBlockSucceeded() {
      if (responseTypeCase_ == 8) {
        return (java.lang.Boolean) responseType_;
      }
      return false;
    }

    private void initFields() {
      id_ = 0;
      status_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      if (!hasId()) {
        memoizedIsInitialized = 0;
        return false;
      }
      if (hasGetBlockHeadersResponse()) {
        if (!getGetBlockHeadersResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (hasGetTransactionsResponse()) {
        if (!getGetTransactionsResponse().isInitialized()) {
          memoizedIsInitialized = 0;
          return false;
        }
      }
      if (!extensionsAreInitialized()) {
        memoizedIsInitialized = 0;
        return false;
      }
      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      com.google.protobuf.GeneratedMessage
        .ExtendableMessage<libbitcoin.protocol.Interface.response>.ExtensionWriter extensionWriter =
          newExtensionWriter();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeUInt32(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeSInt32(2, status_);
      }
      if (responseTypeCase_ == 3) {
        output.writeMessage(3, (libbitcoin.protocol.Interface.response.block_headers) responseType_);
      }
      if (responseTypeCase_ == 4) {
        output.writeMessage(4, (libbitcoin.protocol.Interface.response.transactions) responseType_);
      }
      if (responseTypeCase_ == 5) {
        output.writeBool(
            5, (boolean)((java.lang.Boolean) responseType_));
      }
      if (responseTypeCase_ == 6) {
        output.writeBool(
            6, (boolean)((java.lang.Boolean) responseType_));
      }
      if (responseTypeCase_ == 7) {
        output.writeBool(
            7, (boolean)((java.lang.Boolean) responseType_));
      }
      if (responseTypeCase_ == 8) {
        output.writeBool(
            8, (boolean)((java.lang.Boolean) responseType_));
      }
      extensionWriter.writeUntil(200, output);
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeUInt32Size(1, id_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeSInt32Size(2, status_);
      }
      if (responseTypeCase_ == 3) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, (libbitcoin.protocol.Interface.response.block_headers) responseType_);
      }
      if (responseTypeCase_ == 4) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, (libbitcoin.protocol.Interface.response.transactions) responseType_);
      }
      if (responseTypeCase_ == 5) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              5, (boolean)((java.lang.Boolean) responseType_));
      }
      if (responseTypeCase_ == 6) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              6, (boolean)((java.lang.Boolean) responseType_));
      }
      if (responseTypeCase_ == 7) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              7, (boolean)((java.lang.Boolean) responseType_));
      }
      if (responseTypeCase_ == 8) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(
              8, (boolean)((java.lang.Boolean) responseType_));
      }
      size += extensionsSerializedSize();
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static libbitcoin.protocol.Interface.response parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.response parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.response parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static libbitcoin.protocol.Interface.response parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.response parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.response parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.response parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static libbitcoin.protocol.Interface.response parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static libbitcoin.protocol.Interface.response parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static libbitcoin.protocol.Interface.response parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(libbitcoin.protocol.Interface.response prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code libbitcoin.protocol.response}
     *
     * <pre>
     *
     * Server response
     *
     * </pre>
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.ExtendableBuilder<
          libbitcoin.protocol.Interface.response, Builder> implements
        // @@protoc_insertion_point(builder_implements:libbitcoin.protocol.response)
        libbitcoin.protocol.Interface.responseOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_response_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_response_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                libbitcoin.protocol.Interface.response.class, libbitcoin.protocol.Interface.response.Builder.class);
      }

      // Construct using libbitcoin.protocol.Interface.response.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        id_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        status_ = 0;
        bitField0_ = (bitField0_ & ~0x00000002);
        responseTypeCase_ = 0;
        responseType_ = null;
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return libbitcoin.protocol.Interface.internal_static_libbitcoin_protocol_response_descriptor;
      }

      public libbitcoin.protocol.Interface.response getDefaultInstanceForType() {
        return libbitcoin.protocol.Interface.response.getDefaultInstance();
      }

      public libbitcoin.protocol.Interface.response build() {
        libbitcoin.protocol.Interface.response result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public libbitcoin.protocol.Interface.response buildPartial() {
        libbitcoin.protocol.Interface.response result = new libbitcoin.protocol.Interface.response(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.id_ = id_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.status_ = status_;
        if (responseTypeCase_ == 3) {
          if (getBlockHeadersResponseBuilder_ == null) {
            result.responseType_ = responseType_;
          } else {
            result.responseType_ = getBlockHeadersResponseBuilder_.build();
          }
        }
        if (responseTypeCase_ == 4) {
          if (getTransactionsResponseBuilder_ == null) {
            result.responseType_ = responseType_;
          } else {
            result.responseType_ = getTransactionsResponseBuilder_.build();
          }
        }
        if (responseTypeCase_ == 5) {
          result.responseType_ = responseType_;
        }
        if (responseTypeCase_ == 6) {
          result.responseType_ = responseType_;
        }
        if (responseTypeCase_ == 7) {
          result.responseType_ = responseType_;
        }
        if (responseTypeCase_ == 8) {
          result.responseType_ = responseType_;
        }
        result.bitField0_ = to_bitField0_;
        result.responseTypeCase_ = responseTypeCase_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof libbitcoin.protocol.Interface.response) {
          return mergeFrom((libbitcoin.protocol.Interface.response)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(libbitcoin.protocol.Interface.response other) {
        if (other == libbitcoin.protocol.Interface.response.getDefaultInstance()) return this;
        if (other.hasId()) {
          setId(other.getId());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        switch (other.getResponseTypeCase()) {
          case GET_BLOCK_HEADERS_RESPONSE: {
            mergeGetBlockHeadersResponse(other.getGetBlockHeadersResponse());
            break;
          }
          case GET_TRANSACTIONS_RESPONSE: {
            mergeGetTransactionsResponse(other.getGetTransactionsResponse());
            break;
          }
          case POST_TRANSACTION_SUCCEEDED: {
            setPostTransactionSucceeded(other.getPostTransactionSucceeded());
            break;
          }
          case VALIDATE_TRANSACTION_SUCCEEDED: {
            setValidateTransactionSucceeded(other.getValidateTransactionSucceeded());
            break;
          }
          case POST_BLOCK_SUCCEEDED: {
            setPostBlockSucceeded(other.getPostBlockSucceeded());
            break;
          }
          case VALIDATE_BLOCK_SUCCEEDED: {
            setValidateBlockSucceeded(other.getValidateBlockSucceeded());
            break;
          }
          case RESPONSETYPE_NOT_SET: {
            break;
          }
        }
        this.mergeExtensionFields(other);
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        if (!hasId()) {
          
          return false;
        }
        if (hasGetBlockHeadersResponse()) {
          if (!getGetBlockHeadersResponse().isInitialized()) {
            
            return false;
          }
        }
        if (hasGetTransactionsResponse()) {
          if (!getGetTransactionsResponse().isInitialized()) {
            
            return false;
          }
        }
        if (!extensionsAreInitialized()) {
          
          return false;
        }
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        libbitcoin.protocol.Interface.response parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (libbitcoin.protocol.Interface.response) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int responseTypeCase_ = 0;
      private java.lang.Object responseType_;
      public ResponseTypeCase
          getResponseTypeCase() {
        return ResponseTypeCase.valueOf(
            responseTypeCase_);
      }

      public Builder clearResponseType() {
        responseTypeCase_ = 0;
        responseType_ = null;
        onChanged();
        return this;
      }

      private int bitField0_;

      private int id_ ;
      /**
       * <code>required uint32 id = 1;</code>
       */
      public boolean hasId() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>required uint32 id = 1;</code>
       */
      public int getId() {
        return id_;
      }
      /**
       * <code>required uint32 id = 1;</code>
       */
      public Builder setId(int value) {
        bitField0_ |= 0x00000001;
        id_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>required uint32 id = 1;</code>
       */
      public Builder clearId() {
        bitField0_ = (bitField0_ & ~0x00000001);
        id_ = 0;
        onChanged();
        return this;
      }

      private int status_ ;
      /**
       * <code>optional sint32 status = 2;</code>
       *
       * <pre>
       * can encode error codes for calls
       * </pre>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional sint32 status = 2;</code>
       *
       * <pre>
       * can encode error codes for calls
       * </pre>
       */
      public int getStatus() {
        return status_;
      }
      /**
       * <code>optional sint32 status = 2;</code>
       *
       * <pre>
       * can encode error codes for calls
       * </pre>
       */
      public Builder setStatus(int value) {
        bitField0_ |= 0x00000002;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional sint32 status = 2;</code>
       *
       * <pre>
       * can encode error codes for calls
       * </pre>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000002);
        status_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.response.block_headers, libbitcoin.protocol.Interface.response.block_headers.Builder, libbitcoin.protocol.Interface.response.block_headersOrBuilder> getBlockHeadersResponseBuilder_;
      /**
       * <code>optional .libbitcoin.protocol.response.block_headers get_block_headers_response = 3;</code>
       */
      public boolean hasGetBlockHeadersResponse() {
        return responseTypeCase_ == 3;
      }
      /**
       * <code>optional .libbitcoin.protocol.response.block_headers get_block_headers_response = 3;</code>
       */
      public libbitcoin.protocol.Interface.response.block_headers getGetBlockHeadersResponse() {
        if (getBlockHeadersResponseBuilder_ == null) {
          if (responseTypeCase_ == 3) {
            return (libbitcoin.protocol.Interface.response.block_headers) responseType_;
          }
          return libbitcoin.protocol.Interface.response.block_headers.getDefaultInstance();
        } else {
          if (responseTypeCase_ == 3) {
            return getBlockHeadersResponseBuilder_.getMessage();
          }
          return libbitcoin.protocol.Interface.response.block_headers.getDefaultInstance();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.response.block_headers get_block_headers_response = 3;</code>
       */
      public Builder setGetBlockHeadersResponse(libbitcoin.protocol.Interface.response.block_headers value) {
        if (getBlockHeadersResponseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          responseType_ = value;
          onChanged();
        } else {
          getBlockHeadersResponseBuilder_.setMessage(value);
        }
        responseTypeCase_ = 3;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.response.block_headers get_block_headers_response = 3;</code>
       */
      public Builder setGetBlockHeadersResponse(
          libbitcoin.protocol.Interface.response.block_headers.Builder builderForValue) {
        if (getBlockHeadersResponseBuilder_ == null) {
          responseType_ = builderForValue.build();
          onChanged();
        } else {
          getBlockHeadersResponseBuilder_.setMessage(builderForValue.build());
        }
        responseTypeCase_ = 3;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.response.block_headers get_block_headers_response = 3;</code>
       */
      public Builder mergeGetBlockHeadersResponse(libbitcoin.protocol.Interface.response.block_headers value) {
        if (getBlockHeadersResponseBuilder_ == null) {
          if (responseTypeCase_ == 3 &&
              responseType_ != libbitcoin.protocol.Interface.response.block_headers.getDefaultInstance()) {
            responseType_ = libbitcoin.protocol.Interface.response.block_headers.newBuilder((libbitcoin.protocol.Interface.response.block_headers) responseType_)
                .mergeFrom(value).buildPartial();
          } else {
            responseType_ = value;
          }
          onChanged();
        } else {
          if (responseTypeCase_ == 3) {
            getBlockHeadersResponseBuilder_.mergeFrom(value);
          }
          getBlockHeadersResponseBuilder_.setMessage(value);
        }
        responseTypeCase_ = 3;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.response.block_headers get_block_headers_response = 3;</code>
       */
      public Builder clearGetBlockHeadersResponse() {
        if (getBlockHeadersResponseBuilder_ == null) {
          if (responseTypeCase_ == 3) {
            responseTypeCase_ = 0;
            responseType_ = null;
            onChanged();
          }
        } else {
          if (responseTypeCase_ == 3) {
            responseTypeCase_ = 0;
            responseType_ = null;
          }
          getBlockHeadersResponseBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.response.block_headers get_block_headers_response = 3;</code>
       */
      public libbitcoin.protocol.Interface.response.block_headers.Builder getGetBlockHeadersResponseBuilder() {
        return getGetBlockHeadersResponseFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .libbitcoin.protocol.response.block_headers get_block_headers_response = 3;</code>
       */
      public libbitcoin.protocol.Interface.response.block_headersOrBuilder getGetBlockHeadersResponseOrBuilder() {
        if ((responseTypeCase_ == 3) && (getBlockHeadersResponseBuilder_ != null)) {
          return getBlockHeadersResponseBuilder_.getMessageOrBuilder();
        } else {
          if (responseTypeCase_ == 3) {
            return (libbitcoin.protocol.Interface.response.block_headers) responseType_;
          }
          return libbitcoin.protocol.Interface.response.block_headers.getDefaultInstance();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.response.block_headers get_block_headers_response = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.response.block_headers, libbitcoin.protocol.Interface.response.block_headers.Builder, libbitcoin.protocol.Interface.response.block_headersOrBuilder> 
          getGetBlockHeadersResponseFieldBuilder() {
        if (getBlockHeadersResponseBuilder_ == null) {
          if (!(responseTypeCase_ == 3)) {
            responseType_ = libbitcoin.protocol.Interface.response.block_headers.getDefaultInstance();
          }
          getBlockHeadersResponseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.response.block_headers, libbitcoin.protocol.Interface.response.block_headers.Builder, libbitcoin.protocol.Interface.response.block_headersOrBuilder>(
                  (libbitcoin.protocol.Interface.response.block_headers) responseType_,
                  getParentForChildren(),
                  isClean());
          responseType_ = null;
        }
        responseTypeCase_ = 3;
        return getBlockHeadersResponseBuilder_;
      }

      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.response.transactions, libbitcoin.protocol.Interface.response.transactions.Builder, libbitcoin.protocol.Interface.response.transactionsOrBuilder> getTransactionsResponseBuilder_;
      /**
       * <code>optional .libbitcoin.protocol.response.transactions get_transactions_response = 4;</code>
       */
      public boolean hasGetTransactionsResponse() {
        return responseTypeCase_ == 4;
      }
      /**
       * <code>optional .libbitcoin.protocol.response.transactions get_transactions_response = 4;</code>
       */
      public libbitcoin.protocol.Interface.response.transactions getGetTransactionsResponse() {
        if (getTransactionsResponseBuilder_ == null) {
          if (responseTypeCase_ == 4) {
            return (libbitcoin.protocol.Interface.response.transactions) responseType_;
          }
          return libbitcoin.protocol.Interface.response.transactions.getDefaultInstance();
        } else {
          if (responseTypeCase_ == 4) {
            return getTransactionsResponseBuilder_.getMessage();
          }
          return libbitcoin.protocol.Interface.response.transactions.getDefaultInstance();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.response.transactions get_transactions_response = 4;</code>
       */
      public Builder setGetTransactionsResponse(libbitcoin.protocol.Interface.response.transactions value) {
        if (getTransactionsResponseBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          responseType_ = value;
          onChanged();
        } else {
          getTransactionsResponseBuilder_.setMessage(value);
        }
        responseTypeCase_ = 4;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.response.transactions get_transactions_response = 4;</code>
       */
      public Builder setGetTransactionsResponse(
          libbitcoin.protocol.Interface.response.transactions.Builder builderForValue) {
        if (getTransactionsResponseBuilder_ == null) {
          responseType_ = builderForValue.build();
          onChanged();
        } else {
          getTransactionsResponseBuilder_.setMessage(builderForValue.build());
        }
        responseTypeCase_ = 4;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.response.transactions get_transactions_response = 4;</code>
       */
      public Builder mergeGetTransactionsResponse(libbitcoin.protocol.Interface.response.transactions value) {
        if (getTransactionsResponseBuilder_ == null) {
          if (responseTypeCase_ == 4 &&
              responseType_ != libbitcoin.protocol.Interface.response.transactions.getDefaultInstance()) {
            responseType_ = libbitcoin.protocol.Interface.response.transactions.newBuilder((libbitcoin.protocol.Interface.response.transactions) responseType_)
                .mergeFrom(value).buildPartial();
          } else {
            responseType_ = value;
          }
          onChanged();
        } else {
          if (responseTypeCase_ == 4) {
            getTransactionsResponseBuilder_.mergeFrom(value);
          }
          getTransactionsResponseBuilder_.setMessage(value);
        }
        responseTypeCase_ = 4;
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.response.transactions get_transactions_response = 4;</code>
       */
      public Builder clearGetTransactionsResponse() {
        if (getTransactionsResponseBuilder_ == null) {
          if (responseTypeCase_ == 4) {
            responseTypeCase_ = 0;
            responseType_ = null;
            onChanged();
          }
        } else {
          if (responseTypeCase_ == 4) {
            responseTypeCase_ = 0;
            responseType_ = null;
          }
          getTransactionsResponseBuilder_.clear();
        }
        return this;
      }
      /**
       * <code>optional .libbitcoin.protocol.response.transactions get_transactions_response = 4;</code>
       */
      public libbitcoin.protocol.Interface.response.transactions.Builder getGetTransactionsResponseBuilder() {
        return getGetTransactionsResponseFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .libbitcoin.protocol.response.transactions get_transactions_response = 4;</code>
       */
      public libbitcoin.protocol.Interface.response.transactionsOrBuilder getGetTransactionsResponseOrBuilder() {
        if ((responseTypeCase_ == 4) && (getTransactionsResponseBuilder_ != null)) {
          return getTransactionsResponseBuilder_.getMessageOrBuilder();
        } else {
          if (responseTypeCase_ == 4) {
            return (libbitcoin.protocol.Interface.response.transactions) responseType_;
          }
          return libbitcoin.protocol.Interface.response.transactions.getDefaultInstance();
        }
      }
      /**
       * <code>optional .libbitcoin.protocol.response.transactions get_transactions_response = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          libbitcoin.protocol.Interface.response.transactions, libbitcoin.protocol.Interface.response.transactions.Builder, libbitcoin.protocol.Interface.response.transactionsOrBuilder> 
          getGetTransactionsResponseFieldBuilder() {
        if (getTransactionsResponseBuilder_ == null) {
          if (!(responseTypeCase_ == 4)) {
            responseType_ = libbitcoin.protocol.Interface.response.transactions.getDefaultInstance();
          }
          getTransactionsResponseBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              libbitcoin.protocol.Interface.response.transactions, libbitcoin.protocol.Interface.response.transactions.Builder, libbitcoin.protocol.Interface.response.transactionsOrBuilder>(
                  (libbitcoin.protocol.Interface.response.transactions) responseType_,
                  getParentForChildren(),
                  isClean());
          responseType_ = null;
        }
        responseTypeCase_ = 4;
        return getTransactionsResponseBuilder_;
      }

      /**
       * <code>optional bool post_transaction_succeeded = 5;</code>
       */
      public boolean hasPostTransactionSucceeded() {
        return responseTypeCase_ == 5;
      }
      /**
       * <code>optional bool post_transaction_succeeded = 5;</code>
       */
      public boolean getPostTransactionSucceeded() {
        if (responseTypeCase_ == 5) {
          return (java.lang.Boolean) responseType_;
        }
        return false;
      }
      /**
       * <code>optional bool post_transaction_succeeded = 5;</code>
       */
      public Builder setPostTransactionSucceeded(boolean value) {
        responseTypeCase_ = 5;
        responseType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool post_transaction_succeeded = 5;</code>
       */
      public Builder clearPostTransactionSucceeded() {
        if (responseTypeCase_ == 5) {
          responseTypeCase_ = 0;
          responseType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>optional bool validate_transaction_succeeded = 6;</code>
       */
      public boolean hasValidateTransactionSucceeded() {
        return responseTypeCase_ == 6;
      }
      /**
       * <code>optional bool validate_transaction_succeeded = 6;</code>
       */
      public boolean getValidateTransactionSucceeded() {
        if (responseTypeCase_ == 6) {
          return (java.lang.Boolean) responseType_;
        }
        return false;
      }
      /**
       * <code>optional bool validate_transaction_succeeded = 6;</code>
       */
      public Builder setValidateTransactionSucceeded(boolean value) {
        responseTypeCase_ = 6;
        responseType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool validate_transaction_succeeded = 6;</code>
       */
      public Builder clearValidateTransactionSucceeded() {
        if (responseTypeCase_ == 6) {
          responseTypeCase_ = 0;
          responseType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>optional bool post_block_succeeded = 7;</code>
       */
      public boolean hasPostBlockSucceeded() {
        return responseTypeCase_ == 7;
      }
      /**
       * <code>optional bool post_block_succeeded = 7;</code>
       */
      public boolean getPostBlockSucceeded() {
        if (responseTypeCase_ == 7) {
          return (java.lang.Boolean) responseType_;
        }
        return false;
      }
      /**
       * <code>optional bool post_block_succeeded = 7;</code>
       */
      public Builder setPostBlockSucceeded(boolean value) {
        responseTypeCase_ = 7;
        responseType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool post_block_succeeded = 7;</code>
       */
      public Builder clearPostBlockSucceeded() {
        if (responseTypeCase_ == 7) {
          responseTypeCase_ = 0;
          responseType_ = null;
          onChanged();
        }
        return this;
      }

      /**
       * <code>optional bool validate_block_succeeded = 8;</code>
       */
      public boolean hasValidateBlockSucceeded() {
        return responseTypeCase_ == 8;
      }
      /**
       * <code>optional bool validate_block_succeeded = 8;</code>
       */
      public boolean getValidateBlockSucceeded() {
        if (responseTypeCase_ == 8) {
          return (java.lang.Boolean) responseType_;
        }
        return false;
      }
      /**
       * <code>optional bool validate_block_succeeded = 8;</code>
       */
      public Builder setValidateBlockSucceeded(boolean value) {
        responseTypeCase_ = 8;
        responseType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional bool validate_block_succeeded = 8;</code>
       */
      public Builder clearValidateBlockSucceeded() {
        if (responseTypeCase_ == 8) {
          responseTypeCase_ = 0;
          responseType_ = null;
          onChanged();
        }
        return this;
      }

      // @@protoc_insertion_point(builder_scope:libbitcoin.protocol.response)
    }

    static {
      defaultInstance = new response(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:libbitcoin.protocol.response)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_block_header_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_block_header_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_point_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_point_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_tx_input_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_tx_input_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_tx_output_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_tx_output_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_tx_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_tx_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_block_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_block_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_filter_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_filter_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_block_id_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_block_id_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_block_location_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_block_location_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_tx_hash_result_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_tx_hash_result_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_tx_result_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_tx_result_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_output_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_output_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_utxo_result_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_utxo_result_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_block_headers_request_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_block_headers_request_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_transactions_request_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_transactions_request_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_request_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_request_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_response_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_response_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_response_block_headers_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_response_block_headers_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_libbitcoin_protocol_response_transactions_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_libbitcoin_protocol_response_transactions_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n&proto/bitcoin/protocol/interface.proto" +
      "\022\023libbitcoin.protocol\"\223\001\n\014block_header\022\017" +
      "\n\007version\030\001 \002(\r\022\033\n\023previous_block_hash\030\002" +
      " \002(\014\022\023\n\013merkle_root\030\003 \002(\014\022\021\n\ttimestamp\030\004" +
      " \002(\r\022\014\n\004bits\030\005 \002(\r\022\r\n\005nonce\030\006 \002(\r\022\020\n\010tx_" +
      "count\030\007 \002(\004\"$\n\005point\022\014\n\004hash\030\001 \002(\014\022\r\n\005in" +
      "dex\030\002 \002(\r\"a\n\010tx_input\0223\n\017previous_output" +
      "\030\001 \002(\0132\032.libbitcoin.protocol.point\022\016\n\006sc" +
      "ript\030\002 \002(\014\022\020\n\010sequence\030\003 \002(\r\"*\n\ttx_outpu" +
      "t\022\r\n\005value\030\001 \002(\004\022\016\n\006script\030\002 \002(\014\"\207\001\n\002tx\022",
      "\017\n\007version\030\001 \002(\r\022\020\n\010locktime\030\002 \002(\r\022-\n\006in" +
      "puts\030\003 \003(\0132\035.libbitcoin.protocol.tx_inpu" +
      "t\022/\n\007outputs\030\004 \003(\0132\036.libbitcoin.protocol" +
      ".tx_output\"w\n\005block\0221\n\006header\030\001 \002(\0132!.li" +
      "bbitcoin.protocol.block_header\022-\n\014transa" +
      "ctions\030\002 \003(\0132\027.libbitcoin.protocol.tx\022\014\n" +
      "\004tree\030\003 \003(\014\"Y\n\006filter\0221\n\013filter_type\030\001 \002" +
      "(\0162\034.libbitcoin.protocol.filters\022\014\n\004bits" +
      "\030\002 \001(\r\022\016\n\006prefix\030\003 \002(\014\"(\n\010block_id\022\016\n\006he" +
      "ight\030\001 \001(\r\022\014\n\004hash\030\002 \001(\014\"`\n\016block_locati",
      "on\022/\n\010identity\030\001 \001(\0132\035.libbitcoin.protoc" +
      "ol.block_id\022\r\n\005index\030\002 \001(\004\022\016\n\006branch\030\003 \003" +
      "(\014\"U\n\016tx_hash_result\022\014\n\004hash\030\001 \002(\014\0225\n\010lo" +
      "cation\030\002 \002(\0132#.libbitcoin.protocol.block" +
      "_location\"p\n\ttx_result\022,\n\013transaction\030\001 " +
      "\002(\0132\027.libbitcoin.protocol.tx\0225\n\010location" +
      "\030\002 \002(\0132#.libbitcoin.protocol.block_locat" +
      "ion\"9\n\006output\022\r\n\005index\030\001 \002(\r\022\020\n\010satoshis" +
      "\030\002 \002(\004\022\016\n\006script\030\003 \002(\014\"\203\001\n\013utxo_result\022\017" +
      "\n\007tx_hash\030\001 \002(\014\0225\n\010location\030\002 \002(\0132#.libb",
      "itcoin.protocol.block_location\022,\n\007output" +
      "s\030\003 \003(\0132\033.libbitcoin.protocol.output\"_\n\025" +
      "block_headers_request\022,\n\005start\030\001 \001(\0132\035.l" +
      "ibbitcoin.protocol.block_id\022\030\n\020results_p" +
      "er_page\030\002 \001(\r\"\217\002\n\024transactions_request\022," +
      "\n\005start\030\001 \001(\0132\035.libbitcoin.protocol.bloc" +
      "k_id\022\030\n\020results_per_page\030\002 \001(\r\022*\n\005query\030" +
      "\003 \003(\0132\033.libbitcoin.protocol.filter\022F\n\013re" +
      "sult_type\030\004 \001(\0162(.libbitcoin.protocol.tr" +
      "ansaction_results:\007TX_HASH\022;\n\rlocation_t",
      "ype\030\005 \001(\0162\036.libbitcoin.protocol.location" +
      "s:\004NONE\"\222\003\n\007request\022\n\n\002id\030\001 \002(\r\022G\n\021get_b" +
      "lock_headers\030\002 \001(\0132*.libbitcoin.protocol" +
      ".block_headers_requestH\000\022E\n\020get_transact" +
      "ions\030\003 \001(\0132).libbitcoin.protocol.transac" +
      "tions_requestH\000\0223\n\020post_transaction\030\004 \001(" +
      "\0132\027.libbitcoin.protocol.txH\000\0227\n\024validate" +
      "_transaction\030\005 \001(\0132\027.libbitcoin.protocol" +
      ".txH\000\0220\n\npost_block\030\006 \001(\0132\032.libbitcoin.p" +
      "rotocol.blockH\000\0224\n\016validate_block\030\007 \001(\0132",
      "\032.libbitcoin.protocol.blockH\000*\005\010d\020\310\001B\016\n\014" +
      "request_type\"\233\006\n\010response\022\n\n\002id\030\001 \002(\r\022\016\n" +
      "\006status\030\002 \001(\021\022Q\n\032get_block_headers_respo" +
      "nse\030\003 \001(\0132+.libbitcoin.protocol.response" +
      ".block_headersH\000\022O\n\031get_transactions_res" +
      "ponse\030\004 \001(\0132*.libbitcoin.protocol.respon" +
      "se.transactionsH\000\022$\n\032post_transaction_su" +
      "cceeded\030\005 \001(\010H\000\022(\n\036validate_transaction_" +
      "succeeded\030\006 \001(\010H\000\022\036\n\024post_block_succeede" +
      "d\030\007 \001(\010H\000\022\"\n\030validate_block_succeeded\030\010 ",
      "\001(\010H\000\032\234\001\n\rblock_headers\022+\n\004next\030\001 \001(\0132\035." +
      "libbitcoin.protocol.block_id\022*\n\003top\030\002 \001(" +
      "\0132\035.libbitcoin.protocol.block_id\0222\n\007head" +
      "ers\030\003 \003(\0132!.libbitcoin.protocol.block_he" +
      "ader\032\203\002\n\014transactions\022+\n\004next\030\001 \001(\0132\035.li" +
      "bbitcoin.protocol.block_id\022*\n\003top\030\002 \001(\0132" +
      "\035.libbitcoin.protocol.block_id\0223\n\006hashes" +
      "\030\003 \003(\0132#.libbitcoin.protocol.tx_hash_res" +
      "ult\0224\n\014transactions\030\004 \003(\0132\036.libbitcoin.p" +
      "rotocol.tx_result\022/\n\005utxos\030\005 \003(\0132 .libbi",
      "tcoin.protocol.utxo_result*\005\010d\020\310\001B\017\n\rres" +
      "ponse_type*4\n\007filters\022\013\n\007ADDRESS\020\001\022\017\n\013TR" +
      "ANSACTION\020\002\022\013\n\007STEALTH\020\003*B\n\023transaction_" +
      "results\022\013\n\007TX_HASH\020\001\022\r\n\tTX_RESULT\020\002\022\017\n\013U" +
      "TXO_RESULT\020\003*,\n\tlocations\022\010\n\004NONE\020\000\022\t\n\005B" +
      "LOCK\020\001\022\n\n\006MERKLE\020\002"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_libbitcoin_protocol_block_header_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_libbitcoin_protocol_block_header_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_block_header_descriptor,
        new java.lang.String[] { "Version", "PreviousBlockHash", "MerkleRoot", "Timestamp", "Bits", "Nonce", "TxCount", });
    internal_static_libbitcoin_protocol_point_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_libbitcoin_protocol_point_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_point_descriptor,
        new java.lang.String[] { "Hash", "Index", });
    internal_static_libbitcoin_protocol_tx_input_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_libbitcoin_protocol_tx_input_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_tx_input_descriptor,
        new java.lang.String[] { "PreviousOutput", "Script", "Sequence", });
    internal_static_libbitcoin_protocol_tx_output_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_libbitcoin_protocol_tx_output_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_tx_output_descriptor,
        new java.lang.String[] { "Value", "Script", });
    internal_static_libbitcoin_protocol_tx_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_libbitcoin_protocol_tx_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_tx_descriptor,
        new java.lang.String[] { "Version", "Locktime", "Inputs", "Outputs", });
    internal_static_libbitcoin_protocol_block_descriptor =
      getDescriptor().getMessageTypes().get(5);
    internal_static_libbitcoin_protocol_block_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_block_descriptor,
        new java.lang.String[] { "Header", "Transactions", "Tree", });
    internal_static_libbitcoin_protocol_filter_descriptor =
      getDescriptor().getMessageTypes().get(6);
    internal_static_libbitcoin_protocol_filter_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_filter_descriptor,
        new java.lang.String[] { "FilterType", "Bits", "Prefix", });
    internal_static_libbitcoin_protocol_block_id_descriptor =
      getDescriptor().getMessageTypes().get(7);
    internal_static_libbitcoin_protocol_block_id_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_block_id_descriptor,
        new java.lang.String[] { "Height", "Hash", });
    internal_static_libbitcoin_protocol_block_location_descriptor =
      getDescriptor().getMessageTypes().get(8);
    internal_static_libbitcoin_protocol_block_location_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_block_location_descriptor,
        new java.lang.String[] { "Identity", "Index", "Branch", });
    internal_static_libbitcoin_protocol_tx_hash_result_descriptor =
      getDescriptor().getMessageTypes().get(9);
    internal_static_libbitcoin_protocol_tx_hash_result_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_tx_hash_result_descriptor,
        new java.lang.String[] { "Hash", "Location", });
    internal_static_libbitcoin_protocol_tx_result_descriptor =
      getDescriptor().getMessageTypes().get(10);
    internal_static_libbitcoin_protocol_tx_result_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_tx_result_descriptor,
        new java.lang.String[] { "Transaction", "Location", });
    internal_static_libbitcoin_protocol_output_descriptor =
      getDescriptor().getMessageTypes().get(11);
    internal_static_libbitcoin_protocol_output_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_output_descriptor,
        new java.lang.String[] { "Index", "Satoshis", "Script", });
    internal_static_libbitcoin_protocol_utxo_result_descriptor =
      getDescriptor().getMessageTypes().get(12);
    internal_static_libbitcoin_protocol_utxo_result_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_utxo_result_descriptor,
        new java.lang.String[] { "TxHash", "Location", "Outputs", });
    internal_static_libbitcoin_protocol_block_headers_request_descriptor =
      getDescriptor().getMessageTypes().get(13);
    internal_static_libbitcoin_protocol_block_headers_request_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_block_headers_request_descriptor,
        new java.lang.String[] { "Start", "ResultsPerPage", });
    internal_static_libbitcoin_protocol_transactions_request_descriptor =
      getDescriptor().getMessageTypes().get(14);
    internal_static_libbitcoin_protocol_transactions_request_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_transactions_request_descriptor,
        new java.lang.String[] { "Start", "ResultsPerPage", "Query", "ResultType", "LocationType", });
    internal_static_libbitcoin_protocol_request_descriptor =
      getDescriptor().getMessageTypes().get(15);
    internal_static_libbitcoin_protocol_request_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_request_descriptor,
        new java.lang.String[] { "Id", "GetBlockHeaders", "GetTransactions", "PostTransaction", "ValidateTransaction", "PostBlock", "ValidateBlock", "RequestType", });
    internal_static_libbitcoin_protocol_response_descriptor =
      getDescriptor().getMessageTypes().get(16);
    internal_static_libbitcoin_protocol_response_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_response_descriptor,
        new java.lang.String[] { "Id", "Status", "GetBlockHeadersResponse", "GetTransactionsResponse", "PostTransactionSucceeded", "ValidateTransactionSucceeded", "PostBlockSucceeded", "ValidateBlockSucceeded", "ResponseType", });
    internal_static_libbitcoin_protocol_response_block_headers_descriptor =
      internal_static_libbitcoin_protocol_response_descriptor.getNestedTypes().get(0);
    internal_static_libbitcoin_protocol_response_block_headers_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_response_block_headers_descriptor,
        new java.lang.String[] { "Next", "Top", "Headers", });
    internal_static_libbitcoin_protocol_response_transactions_descriptor =
      internal_static_libbitcoin_protocol_response_descriptor.getNestedTypes().get(1);
    internal_static_libbitcoin_protocol_response_transactions_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_libbitcoin_protocol_response_transactions_descriptor,
        new java.lang.String[] { "Next", "Top", "Hashes", "Transactions", "Utxos", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
