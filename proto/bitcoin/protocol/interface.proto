package libbitcoin.protocol;

// Bitcoin types mapped from descriptions found at
// https://en.bitcoin.it/wiki/Protocol_specification
// where names have been normalized against libbitcoin
// existing implementation/usage.

//
// Block Header
//
message block_header {
    // protocol version
    required uint32 version = 1;
    
    // 32-byte previous block hash
    required bytes previous_block_hash = 2;
    
    // 32-byte transactions hash
    required bytes merkle_root = 3;
    
    // creation
    required uint32 timestamp = 4;
    
    // difficulty
    required uint32 bits = 5;
    
    required uint32 nonce = 6;
    
    // variable length integer in protocol, not involved in hash computation
    required uint64 tx_count = 7;
}

//
// OutPoint corresponding object.
//
message point {
    required bytes hash = 1;
    required uint32 index = 2;
}

//
// TxIn corresponding object.
//
message tx_input {
    required point previous_output = 1;
    required bytes script = 2;
    required uint32 sequence = 3;
}

//
// TxOut corresponding object.
//
message tx_output {
    required uint64 value = 1;
    required bytes script = 2;
}

//
// Transaction
//
message tx {
    required uint32 version = 1;
    required uint32 locktime = 2;
    repeated tx_input inputs = 3;
    repeated tx_output outputs = 4;
}

//
// Block
//
message block {
    required block_header header = 1;
    repeated tx transactions = 2;
    repeated bytes tree = 3;
}


// Protocol unique members

enum filters {
    ADDRESS = 1;
    TRANSACTION = 2;
    STEALTH = 3;
}

//
// Query filter type, allowing prefix matching against addresses,
// transactions or stealth addresses.
//
message filter {
    required filters filter_type = 1;
    optional uint32 bits = 2;
    required bytes prefix = 3;
}

//
// A block height, hash tuple.
//
message block_id {
    optional uint32 height = 1;
    
    // 32-bytes
    optional bytes hash = 2;
}

//
// A block identity, merkle branch tuple.
//
message block_location {
    optional block_id identity = 1;
    optional uint64 index = 2;
    repeated bytes branch = 3;
}

//
// Minimal transaction identification query response,
// meant to correspond with request.transactions.results.TX_HASH
// query result_type.
//
message tx_hash_result {
    required bytes hash = 1;
    required block_location location = 2;
}

//
// Full transaction instance query response,
// meant to correspond with request.transactions.results.TX_RESULT
// query result_type.
//
message tx_result {
    required tx transaction = 1;
    required block_location location = 2;
}

//
// A transaction output.
//
message output {
    required uint32 index = 1;
    required uint64 satoshis = 2;
    required bytes script = 3;
}

//
// Unspent transaction output query response,
// meant to correspond with request.transactions.results.UTXO_RESULT
// query result_type.
//
message utxo_result {
    required bytes tx_hash = 1;
    required block_location location = 2;
    repeated output outputs = 3;
}

//
// Client request
//
enum transaction_results {
    TX_HASH = 1;
    TX_RESULT = 2;
    UTXO_RESULT = 3;
}

enum locations {
    NONE = 0;
    BLOCK = 1;
    MERKLE = 2;
}

message block_headers_request {
    optional block_id start = 1;
    optional uint32 results_per_page = 2;
}
    
message transactions_request {
    optional block_id start = 1;
    optional uint32 results_per_page = 2;
    repeated filter query = 3;
    optional transaction_results result_type = 4 [default = TX_HASH];
    optional locations location_type = 5 [default = NONE];
}

message request {
    required uint32 id = 1;

    oneof request_type {
        block_headers_request get_block_headers = 2;

        transactions_request get_transactions = 3;

        tx post_transaction = 4;

        tx validate_transaction = 5;

        block post_block = 6;

        block validate_block = 7;
    }
    
    extensions 100 to 199;
}

//
// Server response
//
message response {
    required uint32 id = 1;

    // can encode error codes for calls
    optional sint32 status = 2;

    message block_headers {
        optional block_id next = 1;
        optional block_id top = 2;
        repeated block_header headers = 3;
    }
    
    message transactions {
        optional block_id next = 1;
        optional block_id top = 2;
        repeated tx_hash_result hashes = 3;
        repeated tx_result transactions = 4;
        repeated utxo_result utxos = 5;
    }

    oneof response_type {
        block_headers get_block_headers_response = 3;

        transactions get_transactions_response = 4;

        bool post_transaction_succeeded = 5;

        bool validate_transaction_succeeded = 6;

        bool post_block_succeeded = 7;

        bool validate_block_succeeded = 8;
    }

    extensions 100 to 199;
}

